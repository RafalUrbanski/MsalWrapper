!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("MsalWrapper",[],t):"object"==typeof exports?exports.MsalWrapper=t():e.MsalWrapper=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(1);!function(e){e[e.LoginToken=0]="LoginToken",e[e.AccessToken=1]="AccessToken"}(r||(r={}));var i=function(e){var t=this;if(this._basicConfiguration={auth:{clientId:null,validateAuthority:!0},cache:{cacheLocation:"localStorage",storeAuthStateInCookie:!1},system:{loadFrameTimeout:3e4}},this._basicLoginRequest={scopes:["openid"],prompt:"login"},this.acquireAccessToken=function(e){return new Promise((function(n,o){t._resolve=n,t._reject=o,t._requestType=r.AccessToken,t._acquireAccessTokenInternal(e)}))},this.acquireLoginToken=function(e){return new Promise((function(n,o){t._resolve=n,t._reject=o,t._requestType=r.LoginToken;var i=Object.assign(t._basicLoginRequest,e);t._userAgentApplication.loginPopup(i).then((function(e){t._resolve(e)})).catch((function(e){t._reject(e)}))}))},this._authRedirectCallBack=function(e,n){console.log("Authorization redirect fired"),e?console.log(e):"id_token"===n.tokenType?t._requestType===r.AccessToken?t._acquireAccessTokenInternal({scopes:n.scopes}):t._resolve(n):"access_token"===n.tokenType?t._resolve(n):console.log("token type is:"+n.tokenType)},this._requiresInteraction=function(e){return!(!e||!e.length)&&(console.log(e),-1!==e.indexOf("consent_required")||-1!==e.indexOf("interaction_required")||-1!==e.indexOf("login_required"))},this._acquireAccessTokenInternal=function(e){t._userAgentApplication.loginPopup(t._basicLoginRequest).then((function(){t._userAgentApplication.acquireTokenSilent(e).then((function(e){t._resolve(e)})).catch((function(n){t._requiresInteraction(n.errorCode)?t._userAgentApplication.acquireTokenPopup(e).then((function(e){t._resolve(e)})).catch((function(e){t._reject(e)})):t._reject(n)}))})).catch((function(e){t._reject(e)}))},!e.auth.clientId)throw"ClientId has to be set";var n=Object.assign(this._basicConfiguration,e);this._userAgentApplication=new o.UserAgentApplication(n),this._userAgentApplication.handleRedirectCallback(this._authRedirectCallBack)};t.default=i},function(e,t,n){"use strict";n.r(t);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function o(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};var a=function(){function e(){}return e.createNewGuid=function(){var t=window.crypto;if(t&&t.getRandomValues){var n=new Uint8Array(16);return t.getRandomValues(n),n[6]|=64,n[6]&=79,n[8]|=128,n[8]&=191,e.decimalToHex(n[0])+e.decimalToHex(n[1])+e.decimalToHex(n[2])+e.decimalToHex(n[3])+"-"+e.decimalToHex(n[4])+e.decimalToHex(n[5])+"-"+e.decimalToHex(n[6])+e.decimalToHex(n[7])+"-"+e.decimalToHex(n[8])+e.decimalToHex(n[9])+"-"+e.decimalToHex(n[10])+e.decimalToHex(n[11])+e.decimalToHex(n[12])+e.decimalToHex(n[13])+e.decimalToHex(n[14])+e.decimalToHex(n[15])}for(var r="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx",o="0123456789abcdef",i=0,a="",c=0;c<36;c++)"-"!==r[c]&&"4"!==r[c]&&(i=16*Math.random()|0),"x"===r[c]?a+=o[i]:"y"===r[c]?(i&=3,a+=o[i|=8]):a+=r[c];return a},e.decimalToHex=function(e){for(var t=e.toString(16);t.length<2;)t="0"+t;return t},e.base64Encode=function(e){return btoa(encodeURIComponent(e).replace(/%([0-9A-F]{2})/g,(function(e,t){return String.fromCharCode(Number("0x"+t))})))},e.base64Decode=function(e){return decodeURIComponent(atob(e).split("").map((function(e){return"%"+("00"+e.charCodeAt(0).toString(16)).slice(-2)})).join(""))},e.deserialize=function(e){var t,n=/\+/g,r=/([^&=]+)=([^&]*)/g,o=function(e){return decodeURIComponent(e.replace(n," "))},i={};for(t=r.exec(e);t;)i[o(t[1])]=o(t[2]),t=r.exec(e);return i},e}(),c=function(){function e(){}return Object.defineProperty(e,"errorDescription",{get:function(){return"error_description"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"error",{get:function(){return"error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"scope",{get:function(){return"scope"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"clientInfo",{get:function(){return"client_info"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"clientId",{get:function(){return"clientId"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"idToken",{get:function(){return"id_token"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"adalIdToken",{get:function(){return"adal.idtoken"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"accessToken",{get:function(){return"access_token"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"expiresIn",{get:function(){return"expires_in"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"sessionState",{get:function(){return"session_state"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"claims",{get:function(){return"claims"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"msalClientInfo",{get:function(){return"msal.client.info"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"msalError",{get:function(){return"msal.error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"msalErrorDescription",{get:function(){return"msal.error.description"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"msalSessionState",{get:function(){return"msal.session.state"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"tokenKeys",{get:function(){return"msal.token.keys"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"accessTokenKey",{get:function(){return"msal.access.token.key"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"expirationKey",{get:function(){return"msal.expiration.key"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"stateLogin",{get:function(){return"msal.state.login"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"stateAcquireToken",{get:function(){return"msal.state.acquireToken"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"stateRenew",{get:function(){return"msal.state.renew"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"nonceIdToken",{get:function(){return"msal.nonce.idtoken"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"userName",{get:function(){return"msal.username"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"idTokenKey",{get:function(){return"msal.idtoken"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"loginRequest",{get:function(){return"msal.login.request"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"loginError",{get:function(){return"msal.login.error"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"renewStatus",{get:function(){return"msal.token.renew.status"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"urlHash",{get:function(){return"msal.urlHash"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"angularLoginRequest",{get:function(){return"msal.angular.login.request"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"msal",{get:function(){return"msal"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"no_account",{get:function(){return"NO_ACCOUNT"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"consumersUtid",{get:function(){return"9188040d-6c67-4c5b-b112-36a304b66dad"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"upn",{get:function(){return"upn"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"prompt_select_account",{get:function(){return"&prompt=select_account"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"prompt_none",{get:function(){return"&prompt=none"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"prompt",{get:function(){return"prompt"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"response_mode_fragment",{get:function(){return"&response_mode=fragment"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"resourceDelimiter",{get:function(){return"|"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"tokenRenewStatusCancelled",{get:function(){return"Canceled"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"tokenRenewStatusCompleted",{get:function(){return"Completed"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"tokenRenewStatusInProgress",{get:function(){return"In Progress"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"popUpWidth",{get:function(){return this._popUpWidth},set:function(e){this._popUpWidth=e},enumerable:!0,configurable:!0}),Object.defineProperty(e,"popUpHeight",{get:function(){return this._popUpHeight},set:function(e){this._popUpHeight=e},enumerable:!0,configurable:!0}),Object.defineProperty(e,"login",{get:function(){return"LOGIN"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"renewToken",{get:function(){return"RENEW_TOKEN"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"unknown",{get:function(){return"UNKNOWN"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"homeAccountIdentifier",{get:function(){return"homeAccountIdentifier"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"common",{get:function(){return"common"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"openidScope",{get:function(){return"openid"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"profileScope",{get:function(){return"profile"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"cacheLocationLocal",{get:function(){return"localStorage"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"cacheLocationSession",{get:function(){return"sessionStorage"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"interactionTypeRedirect",{get:function(){return"redirectInteraction"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"interactionTypePopup",{get:function(){return"popupInteraction"},enumerable:!0,configurable:!0}),e._popUpWidth=483,e._popUpHeight=600,e}(),s="msal.authority",u="msal.acquireTokenAccount",l={"login.windows.net":"login.windows.net","login.chinacloudapi.cn":"login.chinacloudapi.cn","login.cloudgovapi.us":"login.cloudgovapi.us","login.microsoftonline.com":"login.microsoftonline.com","login.microsoftonline.de":"login.microsoftonline.de","login.microsoftonline.us":"login.microsoftonline.us"},d="sid",p="login_hint",h="id_token",f="domain_hint",g="organizations",m="consumers",y="homeAccountIdentifier",v="login_req",w="domain_req",I=[d,p],b={LOGIN:"login",SELECT_ACCOUNT:"select_account",CONSENT:"consent",NONE:"none"};var k=function(){function e(){}return e.isIntersectingScopes=function(e,t){e=this.convertToLowerCase(e);for(var n=0;n<t.length;n++)if(e.indexOf(t[n].toLowerCase())>-1)return!0;return!1},e.containsScope=function(e,t){return e=this.convertToLowerCase(e),t.every((function(t){return e.indexOf(t.toString().toLowerCase())>=0}))},e.convertToLowerCase=function(e){return e.map((function(e){return e.toLowerCase()}))},e.removeElement=function(e,t){return e.filter((function(e){return e!==t}))},e.parseScope=function(e){var t="";if(e)for(var n=0;n<e.length;++n)t+=n!==e.length-1?e[n]+" ":e[n];return t},e}(),T=function(){function e(){}return e.isEmpty=function(e){return void 0===e||!e||0===e.length},e}(),S=function(){function e(){}return e.createNavigateUrl=function(e){var t=this.createNavigationUrlString(e),n=e.authorityInstance.AuthorizationEndpoint;return n.indexOf("?")<0?n+="?":n+="&",""+n+t.join("&")},e.createNavigationUrlString=function(e){var t=e.scopes;-1===t.indexOf(e.clientId)&&t.push(e.clientId);var n=[];return n.push("response_type="+e.responseType),this.translateclientIdUsedInScope(t,e.clientId),n.push("scope="+encodeURIComponent(k.parseScope(t))),n.push("client_id="+encodeURIComponent(e.clientId)),n.push("redirect_uri="+encodeURIComponent(e.redirectUri)),n.push("state="+encodeURIComponent(e.state)),n.push("nonce="+encodeURIComponent(e.nonce)),n.push("client_info=1"),n.push("x-client-SKU="+e.xClientSku),n.push("x-client-Ver="+e.xClientVer),e.promptValue&&n.push("prompt="+encodeURIComponent(e.promptValue)),e.claimsValue&&n.push("claims="+encodeURIComponent(e.claimsValue)),e.queryParameters&&n.push(e.queryParameters),e.extraQueryParameters&&n.push(e.extraQueryParameters),n.push("client-request-id="+encodeURIComponent(e.correlationId)),n},e.translateclientIdUsedInScope=function(e,t){var n=e.indexOf(t);n>=0&&(e.splice(n,1),-1===e.indexOf("openid")&&e.push("openid"),-1===e.indexOf("profile")&&e.push("profile"))},e.getDefaultRedirectUri=function(){return window.location.href.split("?")[0].split("#")[0]},e.replaceTenantPath=function(e,t){e=e.toLowerCase();var n=this.GetUrlComponents(e),r=n.PathSegments;return!t||0===r.length||r[0]!==c.common&&r[0]!==g||(r[0]=t),this.constructAuthorityUriFromObject(n,r)},e.constructAuthorityUriFromObject=function(e,t){return this.CanonicalizeUri(e.Protocol+"//"+e.HostNameAndPort+"/"+t.join("/"))},e.GetUrlComponents=function(e){if(!e)throw"Url required";var t=RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?"),n=e.match(t);if(!n||n.length<6)throw"Valid url required";var r={Protocol:n[1],HostNameAndPort:n[4],AbsolutePath:n[5]},o=r.AbsolutePath.split("/");return o=o.filter((function(e){return e&&e.length>0})),r.PathSegments=o,r},e.CanonicalizeUri=function(t){return t&&(t=t.toLowerCase()),t&&!e.endsWith(t,"/")&&(t+="/"),t},e.endsWith=function(e,t){return!(!e||!t)&&-1!==e.indexOf(t,e.length-t.length)},e.urlRemoveQueryStringParameter=function(e,t){if(T.isEmpty(e))return e;var n=new RegExp("(\\&"+t+"=)[^&]+");return e=e.replace(n,""),n=new RegExp("("+t+"=)[^&]+&"),e=e.replace(n,""),n=new RegExp("("+t+"=)[^&]+"),e=e.replace(n,"")},e.getHashFromUrl=function(e){var t=e.indexOf("#"),n=e.indexOf("#/");return n>-1?e.substring(n+2):t>-1?e.substring(t+1):e},e}(),C=function(e,t,n,r,o){this.authority=S.CanonicalizeUri(e),this.clientId=t,this.scopes=n,this.homeAccountIdentifier=a.base64Encode(r)+"."+a.base64Encode(o)},E=function(e,t,n,r){this.accessToken=e,this.idToken=t,this.expiresIn=n,this.homeAccountIdentifier=r},A={code:"unexpected_error",desc:"Unexpected error in authentication."},P=function(e){function t(n,r){var o=e.call(this,r)||this;return Object.setPrototypeOf(o,t.prototype),o.errorCode=n,o.errorMessage=r,o.name="AuthError",o}return o(t,e),t.createUnexpectedError=function(e){return new t(A.code,A.desc+": "+e)},t}(Error),_={code:"multiple_matching_tokens",desc:"The cache contains multiple tokens satisfying the requirements. Call AcquireToken again providing more requirements like authority."},O={code:"multiple_authorities",desc:"Multiple authorities found in the cache. Pass authority in the API overload."},R={code:"endpoints_resolution_error",desc:"Error: could not resolve endpoints. Please check network and try again."},x={code:"popup_window_error",desc:"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser."},q={code:"token_renewal_error",desc:"Token renewal operation failed due to timeout."},U={code:"invalid_id_token",desc:"Invalid ID token format."},j={code:"invalid_state_error",desc:"Invalid state."},L={code:"nonce_mismatch_error",desc:"Nonce is not matching, Nonce received: "},N={code:"login_progress_error",desc:"Login_In_Progress: Error during login call - login is already in progress."},M={code:"acquiretoken_progress_error",desc:"AcquireToken_In_Progress: Error during login call - login is already in progress."},H={code:"user_cancelled",desc:"User cancelled the flow."},D={code:"callback_error",desc:"Error occurred in token received callback function."},F={code:"user_login_error",desc:"User login is required."},W={code:"user_non_existent",desc:"User object does not exist. Please call a login API."},K={code:"client_info_decoding_error",desc:"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause."},V={code:"client_info_not_populated_error",desc:"The service did not populate client_info in the response, Please verify with the service team"},G={code:"null_or_empty_id_token",desc:"The idToken is null or empty. Please review the trace to determine the root cause."},z={code:"id_token_parsing_error",desc:"ID token cannot be parsed. Please review stack trace to determine root cause."},B={code:"token_encoding_error",desc:"The token to be decoded is not encoded correctly."},J={code:"invalid_interaction_type",desc:"The interaction type passed to the handler was incorrect or unknown"},Q=function(e){function t(n,r){var o=e.call(this,n,r)||this;return o.name="ClientAuthError",Object.setPrototypeOf(o,t.prototype),o}return o(t,e),t.createEndpointResolutionError=function(e){var n=R.desc;return e&&!T.isEmpty(e)&&(n+=" Details: "+e),new t(R.code,n)},t.createMultipleMatchingTokensInCacheError=function(e){return new t(_.code,"Cache error for scope "+e+": "+_.desc+".")},t.createMultipleAuthoritiesInCacheError=function(e){return new t(O.code,"Cache error for scope "+e+": "+O.desc+".")},t.createPopupWindowError=function(e){var n=x.desc;return e&&!T.isEmpty(e)&&(n+=" Details: "+e),new t(x.code,n)},t.createTokenRenewalTimeoutError=function(){return new t(q.code,q.desc)},t.createInvalidIdTokenError=function(e){return new t(U.code,U.desc+" Given token: "+e)},t.createInvalidStateError=function(e,n){return new t(j.code,j.desc+" "+e+", state expected : "+n+".")},t.createNonceMismatchError=function(e,n){return new t(L.code,L.desc+" "+e+", nonce expected : "+n+".")},t.createLoginInProgressError=function(){return new t(N.code,N.desc)},t.createAcquireTokenInProgressError=function(){return new t(M.code,M.desc)},t.createUserCancelledError=function(){return new t(H.code,H.desc)},t.createErrorInCallbackFunction=function(e){return new t(D.code,D.desc+" "+e+".")},t.createUserLoginRequiredError=function(){return new t(F.code,F.desc)},t.createUserDoesNotExistError=function(){return new t(W.code,W.desc)},t.createClientInfoDecodingError=function(e){return new t(K.code,K.desc+" Failed with error: "+e)},t.createClientInfoNotPopulatedError=function(e){return new t(V.code,V.desc+" Failed with error: "+e)},t.createIdTokenNullOrEmptyError=function(e){return new t(G.code,G.desc+" Raw ID Token Value: "+e)},t.createIdTokenParsingError=function(e){return new t(z.code,z.desc+" Failed with error: "+e)},t.createTokenEncodingError=function(e){return new t(B.code,B.desc+" Attempted to decode: "+e)},t.createInvalidInteractionTypeError=function(){return new t(J.code,J.desc)},t}(P),X={configurationNotSet:{code:"no_config_set",desc:"Configuration has not been set. Please call the UserAgentApplication constructor with a valid Configuration object."},invalidCacheLocation:{code:"invalid_cache_location",desc:"The cache location provided is not valid."},noStorageSupported:{code:"browser_storage_not_supported",desc:"localStorage and sessionStorage are not supported."},noRedirectCallbacksSet:{code:"no_redirect_callbacks",desc:"No redirect callbacks have been set. Please call setRedirectCallbacks() with the appropriate function arguments before continuing. More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."},invalidCallbackObject:{code:"invalid_callback_object",desc:"The object passed for the callback was invalid. More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."},scopesRequired:{code:"scopes_required",desc:"Scopes are required to obtain an access token."},emptyScopes:{code:"empty_input_scopes_error",desc:"Scopes cannot be passed as empty array."},nonArrayScopes:{code:"nonarray_input_scopes_error",desc:"Scopes cannot be passed as non-array."},clientScope:{code:"clientid_input_scopes_error",desc:"Client ID can only be provided as a single scope."},invalidPrompt:{code:"invalid_prompt_value",desc:"Supported prompt values are 'login', 'select_account', 'consent' and 'none'"},invalidAuthorityType:{code:"invalid_authority_type",desc:"The given authority is not a valid type of authority supported by MSAL. Please see here for valid authorities: <insert URL here>."},authorityUriInsecure:{code:"authority_uri_insecure",desc:"Authority URIs must use https."},authorityUriInvalidPath:{code:"authority_uri_invalid_path",desc:"Given authority URI is invalid."},unsupportedAuthorityValidation:{code:"unsupported_authority_validation",desc:"The authority validation is not supported for this authority type."},b2cAuthorityUriInvalidPath:{code:"b2c_authority_uri_invalid_path",desc:"The given URI for the B2C authority is invalid."},claimsRequestParsingError:{code:"claims_request_parsing_error",desc:"Could not parse the given claims request object."},emptyRequestError:{code:"empty_request_error",desc:"Request object is required."},telemetryConfigError:{code:"telemetry_config_error",desc:"Telemetry config is not configured with required values"}},Y=function(e){function t(n,r){var o=e.call(this,n,r)||this;return o.name="ClientConfigurationError",Object.setPrototypeOf(o,t.prototype),o}return o(t,e),t.createNoSetConfigurationError=function(){return new t(X.configurationNotSet.code,""+X.configurationNotSet.desc)},t.createInvalidCacheLocationConfigError=function(e){return new t(X.invalidCacheLocation.code,X.invalidCacheLocation.desc+" Provided value: "+e+". Possible values are: "+c.cacheLocationLocal+", "+c.cacheLocationSession+".")},t.createNoStorageSupportedError=function(){return new t(X.noStorageSupported.code,X.noStorageSupported.desc)},t.createRedirectCallbacksNotSetError=function(){return new t(X.noRedirectCallbacksSet.code,X.noRedirectCallbacksSet.desc)},t.createInvalidCallbackObjectError=function(e){return new t(X.invalidCallbackObject.code,X.invalidCallbackObject.desc+" Given value for callback function: "+e)},t.createEmptyScopesArrayError=function(e){return new t(X.emptyScopes.code,X.emptyScopes.desc+" Given value: "+e+".")},t.createScopesNonArrayError=function(e){return new t(X.nonArrayScopes.code,X.nonArrayScopes.desc+" Given value: "+e+".")},t.createClientIdSingleScopeError=function(e){return new t(X.clientScope.code,X.clientScope.desc+" Given value: "+e+".")},t.createScopesRequiredError=function(e){return new t(X.scopesRequired.code,X.scopesRequired.desc+" Given value: "+e)},t.createInvalidPromptError=function(e){return new t(X.invalidPrompt.code,X.invalidPrompt.desc+" Given value: "+e)},t.createClaimsRequestParsingError=function(e){return new t(X.claimsRequestParsingError.code,X.claimsRequestParsingError.desc+" Given value: "+e)},t.createEmptyRequestError=function(){var e=X.emptyRequestError;return new t(e.code,e.desc)},t.createTelemetryConfigError=function(e){var n=X.telemetryConfigError,r=n.code,o=n.desc,i={applicationName:"string",applicationVersion:"string",telemetryEmitter:"function"};return new t(r,o+" mising values: "+Object.keys(i).reduce((function(t,n){return e[n]?t:t.concat([n+" ("+i[n]+")"])}),[]).join(","))},t}(Q);var $,Z=function(){function e(e,t,n,r,o,i){this.authorityInstance=e,this.clientId=t,this.scopes=n?n.slice():[t],this.nonce=a.createNewGuid(),this.state=i&&!T.isEmpty(i)?a.createNewGuid()+"|"+i:a.createNewGuid(),this.correlationId=a.createNewGuid(),this.xClientSku="MSAL.JS",this.xClientVer="1.1.3",this.responseType=r,this.redirectUri=o}return Object.defineProperty(e.prototype,"authority",{get:function(){return this.authorityInstance?this.authorityInstance.CanonicalAuthority:null},enumerable:!0,configurable:!0}),e.prototype.populateQueryParams=function(t,n,r){var o,i={};n&&(n.prompt&&(this.validatePromptParameter(n.prompt),this.promptValue=n.prompt),n.claimsRequest&&(!function(e){if(e.claimsRequest)try{JSON.parse(e.claimsRequest)}catch(e){throw Y.createClaimsRequestParsingError(e)}}(n),this.claimsValue=n.claimsRequest),e.isSSOParam(n)&&(i=this.constructUnifiedCacheQueryParameter(n,null))),r&&(i=this.constructUnifiedCacheQueryParameter(null,r)),i=this.addHintParameters(t,i),n&&(o=this.sanitizeEQParams(n)),this.queryParameters=e.generateQueryParametersString(i),this.extraQueryParameters=e.generateQueryParametersString(o)},e.prototype.validatePromptParameter=function(e){if(!([b.LOGIN,b.SELECT_ACCOUNT,b.CONSENT,b.NONE].indexOf(e)>=0))throw Y.createInvalidPromptError(e)},e.prototype.constructUnifiedCacheQueryParameter=function(e,t){var n,r,o={};if(e)if(e.account){var i=e.account;i.sid?(n=d,r=i.sid):i.userName&&(n=p,r=i.userName)}else e.sid?(n=d,r=e.sid):e.loginHint&&(n=p,r=e.loginHint);else t&&(t.hasOwnProperty(c.upn)?(n=h,r=t.upn):(n=g,r=null));return o=this.addSSOParameter(n,r),e&&e.account&&e.account.homeAccountIdentifier&&(o=this.addSSOParameter(y,e.account.homeAccountIdentifier,o)),o},e.prototype.addHintParameters=function(e,t){if(e&&!t[d]){if(!t[p]&&e.sid&&this.promptValue===b.NONE)t=this.addSSOParameter(d,e.sid,t);else!t[p]&&e.userName&&!T.isEmpty(e.userName)&&(t=this.addSSOParameter(p,e.userName,t));!t[w]&&!t[v]&&(t=this.addSSOParameter(y,e.homeAccountIdentifier,t))}return t},e.prototype.addSSOParameter=function(e,t,n){if(n||(n={}),!t)return n;switch(e){case d:n[d]=t;break;case h:n[p]=t,n[f]=g;break;case p:n[p]=t;break;case g:n[f]=g;break;case m:n[f]=m;break;case y:var r=t.split("."),o=a.base64Decode(r[0]),i=a.base64Decode(r[1]);n[v]=o,n[w]=i,i===c.consumersUtid?n[f]=m:n[f]=g;break;case v:n[v]=t;break;case w:n[w]=t}return n},e.prototype.sanitizeEQParams=function(e){var t=e.extraQueryParameters;return t?(e.claimsRequest&&delete t[c.claims],I.forEach((function(e){t[e]&&delete t[e]})),t):null},e.generateQueryParametersString=function(e){var t=null;return e&&Object.keys(e).forEach((function(n){null==t?t=n+"="+encodeURIComponent(e[n]):t+="&"+n+"="+encodeURIComponent(e[n])})),t},e.isSSOParam=function(e){return e&&(e.account||e.sid||e.loginHint)},e}(),ee=function(){function e(e){if(!e||T.isEmpty(e))return this.uid="",void(this.utid="");try{var t=a.base64Decode(e),n=JSON.parse(t);n&&(n.hasOwnProperty("uid")&&(this.uid=n.uid),n.hasOwnProperty("utid")&&(this.utid=n.utid))}catch(e){throw Q.createClientInfoDecodingError(e)}}return Object.defineProperty(e.prototype,"uid",{get:function(){return this._uid?this._uid:""},set:function(e){this._uid=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"utid",{get:function(){return this._utid?this._utid:""},set:function(e){this._utid=e},enumerable:!0,configurable:!0}),e}(),te=function(){function e(){}return e.decodeJwt=function(e){if(T.isEmpty(e))return null;var t=/^([^\.\s]*)\.([^\.\s]+)\.([^\.\s]*)$/.exec(e);return!t||t.length<4?null:{header:t[1],JWSPayload:t[2],JWSSig:t[3]}},e.extractIdToken=function(e){var t=this.decodeJwt(e);if(!t)return null;try{var n=t.JWSPayload,r=a.base64Decode(n);return r?JSON.parse(r):null}catch(e){}return null},e}(),ne=function(e){if(T.isEmpty(e))throw Q.createIdTokenNullOrEmptyError(e);try{this.rawIdToken=e,this.claims=te.extractIdToken(e),this.claims&&(this.claims.hasOwnProperty("iss")&&(this.issuer=this.claims.iss),this.claims.hasOwnProperty("oid")&&(this.objectId=this.claims.oid),this.claims.hasOwnProperty("sub")&&(this.subject=this.claims.sub),this.claims.hasOwnProperty("tid")&&(this.tenantId=this.claims.tid),this.claims.hasOwnProperty("ver")&&(this.version=this.claims.ver),this.claims.hasOwnProperty("preferred_username")&&(this.preferredName=this.claims.preferred_username),this.claims.hasOwnProperty("name")&&(this.name=this.claims.name),this.claims.hasOwnProperty("nonce")&&(this.nonce=this.claims.nonce),this.claims.hasOwnProperty("exp")&&(this.expiration=this.claims.exp),this.claims.hasOwnProperty("home_oid")&&(this.homeObjectId=this.claims.home_oid),this.claims.hasOwnProperty("sid")&&(this.sid=this.claims.sid))}catch(e){throw Q.createIdTokenParsingError(e)}},re=function(e,t){this.key=e,this.value=t},oe=function(){function e(t){if(e.instance)return e.instance;if(this.cacheLocation=t,this.localStorageSupported=void 0!==window[this.cacheLocation]&&null!=window[this.cacheLocation],this.sessionStorageSupported=void 0!==window[t]&&null!=window[t],e.instance=this,!this.localStorageSupported&&!this.sessionStorageSupported)throw Y.createNoStorageSupportedError();return e.instance}return e.prototype.setItem=function(e,t,n){window[this.cacheLocation]&&window[this.cacheLocation].setItem(e,t),n&&this.setItemCookie(e,t)},e.prototype.getItem=function(e,t){return t&&this.getItemCookie(e)?this.getItemCookie(e):window[this.cacheLocation]?window[this.cacheLocation].getItem(e):null},e.prototype.removeItem=function(e){if(window[this.cacheLocation])return window[this.cacheLocation].removeItem(e)},e.prototype.clear=function(){if(window[this.cacheLocation])return window[this.cacheLocation].clear()},e.prototype.getAllAccessTokens=function(e,t){var n,r=[],o=window[this.cacheLocation];if(o){var i=void 0;for(i in o)if(o.hasOwnProperty(i)&&i.match(e)&&i.match(t)){var a=this.getItem(i);a&&(n=new re(JSON.parse(i),JSON.parse(a)),r.push(n))}}return r},e.prototype.removeAcquireTokenEntries=function(e){var t=window[this.cacheLocation];if(t){var n=void 0;for(n in t)if(t.hasOwnProperty(n)&&!(-1===n.indexOf(s)&&1===n.indexOf(u)||e&&-1===n.indexOf(e))){var r=n.split(c.resourceDelimiter),o=void 0;r.length>1&&(o=r[1]),o&&!this.tokenRenewalInProgress(o)&&(this.removeItem(n),this.removeItem(c.renewStatus+o),this.removeItem(c.stateLogin),this.removeItem(c.stateAcquireToken),this.setItemCookie(n,"",-1))}}this.clearCookie()},e.prototype.tokenRenewalInProgress=function(e){var t=window[this.cacheLocation][c.renewStatus+e];return!(!t||t!==c.tokenRenewStatusInProgress)},e.prototype.resetCacheItems=function(){var e=window[this.cacheLocation];if(e){var t=void 0;for(t in e)e.hasOwnProperty(t)&&-1!==t.indexOf(c.msal)&&this.removeItem(t);this.removeAcquireTokenEntries()}},e.prototype.setItemCookie=function(e,t,n){var r=e+"="+t+";";n&&(r+="expires="+this.getCookieExpirationTime(n)+";");document.cookie=r},e.prototype.getItemCookie=function(e){for(var t=e+"=",n=document.cookie.split(";"),r=0;r<n.length;r++){for(var o=n[r];" "===o.charAt(0);)o=o.substring(1);if(0===o.indexOf(t))return o.substring(t.length,o.length)}return""},e.prototype.getCookieExpirationTime=function(e){var t=new Date;return new Date(t.getTime()+24*e*60*60*1e3).toUTCString()},e.prototype.clearCookie=function(){this.setItemCookie(c.nonceIdToken,"",-1),this.setItemCookie(c.stateLogin,"",-1),this.setItemCookie(c.loginRequest,"",-1),this.setItemCookie(c.stateAcquireToken,"",-1)},e.generateAcquireTokenAccountKey=function(e,t){return u+c.resourceDelimiter+""+e+c.resourceDelimiter+t},e.generateAuthorityKey=function(e){return s+c.resourceDelimiter+""+e},e}(),ie=function(){function e(e,t,n,r,o,i,a){this.accountIdentifier=e,this.homeAccountIdentifier=t,this.userName=n,this.name=r,this.idToken=o,this.idTokenClaims=o,this.sid=i,this.environment=a}return e.createAccount=function(t,n){var r,o=t.objectId||t.subject,i=n?n.uid:"",c=n?n.utid:"";return T.isEmpty(i)||T.isEmpty(c)||(r=a.base64Encode(i)+"."+a.base64Encode(c)),new e(o,r,t.preferredName,t.name,t.claims,t.sid,t.issuer)},e.compareAccounts=function(e,t){return!(!e||!t)&&!(!e.homeAccountIdentifier||!t.homeAccountIdentifier||e.homeAccountIdentifier!==t.homeAccountIdentifier)},e}(),ae=function(){function e(){}return e.parseExpiresIn=function(e){return e||(e="3599"),parseInt(e,10)},e.now=function(){return Math.round((new Date).getTime()/1e3)},e}(),ce=function(){function e(){}return e.setResponseIdToken=function(e,t){if(!e)return null;if(!t)return e;var n=Number(t.expiration);return n&&!e.expiresOn&&(e.expiresOn=new Date(1e3*n)),i({},e,{idToken:t,idTokenClaims:t.claims,uniqueId:t.objectId||t.subject,tenantId:t.tenantId})},e}(),se=function(){function e(){}return e.prototype.sendRequestAsync=function(e,t,n){var r=this;return new Promise((function(n,o){var i=new XMLHttpRequest;if(i.open(t,e,!0),i.onload=function(e){(i.status<200||i.status>=300)&&o(r.handleError(i.responseText));try{var t=JSON.parse(i.responseText)}catch(e){o(r.handleError(i.responseText))}n(t)},i.onerror=function(e){o(i.status)},"GET"!==t)throw"not implemented";i.send()}))},e.prototype.handleError=function(e){var t;try{if((t=JSON.parse(e)).error)return t.error;throw e}catch(t){return e}},e}();!function(e){e[e.Aad=0]="Aad",e[e.Adfs=1]="Adfs",e[e.B2C=2]="B2C"}($||($={}));var ue,le=function(){function e(e,t){this.IsValidationEnabled=t,this.CanonicalAuthority=e,this.validateAsUri()}return Object.defineProperty(e.prototype,"Tenant",{get:function(){return this.CanonicalAuthorityUrlComponents.PathSegments[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"AuthorizationEndpoint",{get:function(){return this.validateResolved(),this.tenantDiscoveryResponse.AuthorizationEndpoint.replace("{tenant}",this.Tenant)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"EndSessionEndpoint",{get:function(){return this.validateResolved(),this.tenantDiscoveryResponse.EndSessionEndpoint.replace("{tenant}",this.Tenant)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"SelfSignedJwtAudience",{get:function(){return this.validateResolved(),this.tenantDiscoveryResponse.Issuer.replace("{tenant}",this.Tenant)},enumerable:!0,configurable:!0}),e.prototype.validateResolved=function(){if(!this.tenantDiscoveryResponse)throw"Please call ResolveEndpointsAsync first"},Object.defineProperty(e.prototype,"CanonicalAuthority",{get:function(){return this.canonicalAuthority},set:function(e){this.canonicalAuthority=S.CanonicalizeUri(e),this.canonicalAuthorityUrlComponents=null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"CanonicalAuthorityUrlComponents",{get:function(){return this.canonicalAuthorityUrlComponents||(this.canonicalAuthorityUrlComponents=S.GetUrlComponents(this.CanonicalAuthority)),this.canonicalAuthorityUrlComponents},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"DefaultOpenIdConfigurationEndpoint",{get:function(){return this.CanonicalAuthority+"v2.0/.well-known/openid-configuration"},enumerable:!0,configurable:!0}),e.prototype.validateAsUri=function(){var e;try{e=this.CanonicalAuthorityUrlComponents}catch(e){throw X.invalidAuthorityType}if(!e.Protocol||"https:"!==e.Protocol.toLowerCase())throw X.authorityUriInsecure;if(!e.PathSegments||e.PathSegments.length<1)throw X.authorityUriInvalidPath},e.prototype.DiscoverEndpoints=function(e){return(new se).sendRequestAsync(e,"GET",!0).then((function(e){return{AuthorizationEndpoint:e.authorization_endpoint,EndSessionEndpoint:e.end_session_endpoint,Issuer:e.issuer}}))},e.prototype.resolveEndpointsAsync=function(){var e=this,t="";return this.GetOpenIdConfigurationEndpointAsync().then((function(n){return t=n,e.DiscoverEndpoints(t)})).then((function(t){return e.tenantDiscoveryResponse=t,e}))},e}(),de=function(e){function t(t,n){return e.call(this,t,n)||this}return o(t,e),Object.defineProperty(t.prototype,"AadInstanceDiscoveryEndpointUrl",{get:function(){return t.AadInstanceDiscoveryEndpoint+"?api-version=1.0&authorization_endpoint="+this.CanonicalAuthority+"oauth2/v2.0/authorize"},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"AuthorityType",{get:function(){return $.Aad},enumerable:!0,configurable:!0}),t.prototype.GetOpenIdConfigurationEndpointAsync=function(){var e=this,t=new Promise((function(t,n){return t(e.DefaultOpenIdConfigurationEndpoint)}));if(!this.IsValidationEnabled)return t;var n=this.CanonicalAuthorityUrlComponents.HostNameAndPort;return this.IsInTrustedHostList(n)?t:(new se).sendRequestAsync(this.AadInstanceDiscoveryEndpointUrl,"GET",!0).then((function(e){return e.tenant_discovery_endpoint}))},t.prototype.IsInTrustedHostList=function(e){return l[e.toLowerCase()]},t.AadInstanceDiscoveryEndpoint="https://login.microsoftonline.com/common/discovery/instance",t}(le),pe=function(e){function t(t,n){var r=e.call(this,t,n)||this,o=S.GetUrlComponents(t),i=o.PathSegments;if(i.length<3)throw X.b2cAuthorityUriInvalidPath;return r.CanonicalAuthority="https://"+o.HostNameAndPort+"/"+i[0]+"/"+i[1]+"/"+i[2]+"/",r}return o(t,e),Object.defineProperty(t.prototype,"AuthorityType",{get:function(){return $.B2C},enumerable:!0,configurable:!0}),t.prototype.GetOpenIdConfigurationEndpointAsync=function(){var e=this,t=new Promise((function(t,n){return t(e.DefaultOpenIdConfigurationEndpoint)}));return this.IsValidationEnabled?this.IsInTrustedHostList(this.CanonicalAuthorityUrlComponents.HostNameAndPort)?t:new Promise((function(e,t){return t(X.unsupportedAuthorityValidation)})):t},t.B2C_PREFIX="tfp",t}(de),he=function(){function e(){}return e.DetectAuthorityFromUrl=function(e){switch(e=S.CanonicalizeUri(e),S.GetUrlComponents(e).PathSegments[0]){case"tfp":return $.B2C;case"adfs":return $.Adfs;default:return $.Aad}},e.CreateInstance=function(t,n){if(T.isEmpty(t))return null;switch(e.DetectAuthorityFromUrl(t)){case $.B2C:return new pe(t,n);case $.Aad:return new de(t,n);default:throw X.invalidAuthorityType}},e}();!function(e){e[e.Error=0]="Error",e[e.Warning=1]="Warning",e[e.Info=2]="Info",e[e.Verbose=3]="Verbose"}(ue||(ue={}));var fe=function(){function e(e,t){void 0===t&&(t={}),this.level=ue.Info;var n=t.correlationId,r=void 0===n?"":n,o=t.level,i=void 0===o?ue.Info:o,a=t.piiLoggingEnabled,c=void 0!==a&&a;this.localCallback=e,this.correlationId=r,this.level=i,this.piiLoggingEnabled=c}return e.prototype.logMessage=function(e,t,n){if(!(e>this.level||!this.piiLoggingEnabled&&n)){var r,o=(new Date).toUTCString();r=T.isEmpty(this.correlationId)?o+":1.1.3-"+ue[e]+" "+t:o+":"+this.correlationId+"-1.1.3-"+ue[e]+" "+t,this.executeCallback(e,r,n)}},e.prototype.executeCallback=function(e,t,n){this.localCallback&&this.localCallback(e,t,n)},e.prototype.error=function(e){this.logMessage(ue.Error,e,!1)},e.prototype.errorPii=function(e){this.logMessage(ue.Error,e,!0)},e.prototype.warning=function(e){this.logMessage(ue.Warning,e,!1)},e.prototype.warningPii=function(e){this.logMessage(ue.Warning,e,!0)},e.prototype.info=function(e){this.logMessage(ue.Info,e,!1)},e.prototype.infoPii=function(e){this.logMessage(ue.Info,e,!0)},e.prototype.verbose=function(e){this.logMessage(ue.Verbose,e,!1)},e.prototype.verbosePii=function(e){this.logMessage(ue.Verbose,e,!0)},e.prototype.isPiiLoggingEnabled=function(){return this.piiLoggingEnabled},e}(),ge={clientId:"",authority:null,validateAuthority:!0,redirectUri:function(){return S.getDefaultRedirectUri()},postLogoutRedirectUri:function(){return S.getDefaultRedirectUri()},navigateToLoginRequestUrl:!0},me={cacheLocation:"sessionStorage",storeAuthStateInCookie:!1},ye={logger:new fe(null),loadFrameTimeout:6e3,tokenRenewalOffsetSeconds:300,navigateFrameWait:500},ve={isAngular:!1,unprotectedResources:new Array,protectedResourceMap:new Map};var we={code:"server_unavailable",desc:"Server is temporarily unavailable."},Ie={code:"unknown_server_error"},be=function(e){function t(n,r){var o=e.call(this,n,r)||this;return o.name="ServerError",Object.setPrototypeOf(o,t.prototype),o}return o(t,e),t.createServerUnavailableError=function(){return new t(we.code,we.desc)},t.createUnknownServerError=function(e){return new t(Ie.code,e)},t}(P),ke={code:"interaction_required"},Te={code:"consent_required"},Se={code:"login_required"},Ce=function(e){function t(n,r){var o=e.call(this,n,r)||this;return o.name="InteractionRequiredAuthError",Object.setPrototypeOf(o,t.prototype),o}return o(t,e),t.isInteractionRequiredError=function(e){var t=[ke.code,Te.code,Se.code];return e&&t.indexOf(e)>-1},t.createLoginRequiredAuthError=function(e){return new t(Se.code,e)},t.createInteractionRequiredAuthError=function(e){return new t(ke.code,e)},t.createConsentRequiredAuthError=function(e){return new t(Te.code,e)},t}(be);function Ee(e){return{uniqueId:"",tenantId:"",tokenType:"",idToken:null,idTokenClaims:null,accessToken:"",scopes:null,expiresOn:null,account:null,accountState:e}}var Ae="event_name",Pe="start_time",_e="elapsed_time",Oe={MsalCorrelationIdConstStrKey:"Microsoft.MSAL.correlation_id",ApiTelemIdConstStrKey:"msal.api_telem_id",ApiIdConstStrKey:"msal.api_id",BrokerAppConstStrKey:"Microsoft_MSAL_broker_app",CacheEventCountConstStrKey:"Microsoft_MSAL_cache_event_count",HttpEventCountTelemetryBatchKey:"Microsoft_MSAL_http_event_count",IdpConstStrKey:"Microsoft_MSAL_idp",IsSilentTelemetryBatchKey:"",IsSuccessfulConstStrKey:"Microsoft_MSAL_is_successful",ResponseTimeConstStrKey:"Microsoft_MSAL_response_time",TenantIdConstStrKey:"Microsoft_MSAL_tenant_id",UiEventCountTelemetryBatchKey:"Microsoft_MSAL_ui_event_count"},Re=function(e){return"msal."+(e||"")},xe=function(e){function t(t,n,r,o){var i=e.call(this,Re("default_event"),n)||this;return i.event[Re("client_id")]=r,i.event[Re("sdk_plaform")]=t.sdk,i.event[Re("sdk_version")]=t.sdkVersion,i.event[Re("application_name")]=t.applicationName,i.event[Re("application_version")]=t.applicationVersion,i.event[""+Oe.UiEventCountTelemetryBatchKey]=i.getEventCount(Re("ui_event"),o),i.event[""+Oe.HttpEventCountTelemetryBatchKey]=i.getEventCount(Re("http_event"),o),i.event[""+Oe.CacheEventCountConstStrKey]=i.getEventCount(Re("cache_event"),o),i}return o(t,e),t.prototype.getEventCount=function(e,t){return t[e]?t[e]:0},t}(function(){function e(e,t){var n;this.startTimestamp=Date.now(),this.eventId=a.createNewGuid(),this.event=((n={})[Re(Ae)]=e,n[Re(Pe)]=this.startTimestamp,n[Re(_e)]=-1,n[""+Oe.MsalCorrelationIdConstStrKey]=t,n)}return e.prototype.setElapsedTime=function(e){this.event[Re(_e)]=e},e.prototype.stop=function(){this.setElapsedTime(+Date.now()-+this.startTimestamp)},Object.defineProperty(e.prototype,"telemetryCorrelationId",{get:function(){return this.event[""+Oe.MsalCorrelationIdConstStrKey]},set:function(e){this.event[""+Oe.MsalCorrelationIdConstStrKey]=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"eventName",{get:function(){return this.event[Re(Ae)]},enumerable:!0,configurable:!0}),e.prototype.get=function(){return i({},this.event,{eventId:this.eventId})},e}()),qe=function(e){return e.telemetryCorrelationId+"-"+e.eventId+"-"+e.eventName},Ue=function(){function e(e,t){this.completedEvents={},this.inProgressEvents={},this.eventCountByCorrelationId={},this.onlySendFailureTelemetry=!1,this.telemetryPlatform=e.platform,this.clientId=e.clientId,this.onlySendFailureTelemetry=e.onlySendFailureTelemetry,this.telemetryEmitter=t}return e.prototype.startEvent=function(e){if(this.telemetryEmitter){var t=qe(e);this.inProgressEvents[t]=e}},e.prototype.stopEvent=function(e){var t=qe(e);if(this.telemetryEmitter&&this.inProgressEvents[t]){e.stop(),this.incrementEventCount(e);var n=this.completedEvents[e.telemetryCorrelationId];this.completedEvents[e.telemetryCorrelationId]=(n||[]).concat([e]),delete this.inProgressEvents[t]}},e.prototype.flush=function(e){var t=this;if(this.telemetryEmitter&&this.completedEvents[e]){var n=this.getOrphanedEvents(e);n.forEach((function(e){return t.incrementEventCount(e)}));var r=this.completedEvents[e].concat(n);delete this.completedEvents[e];var o=this.eventCountByCorrelationId[e];if(delete this.eventCountByCorrelationId[e],r&&r.length){var i=new xe(this.telemetryPlatform,e,this.clientId,o),a=r.concat([i]);this.telemetryEmitter(a.map((function(e){return e.get()})))}}},e.prototype.incrementEventCount=function(e){var t,n=e.eventName,r=this.eventCountByCorrelationId[e.telemetryCorrelationId];r?r[n]=r[n]?r[n]+1:1:this.eventCountByCorrelationId[e.telemetryCorrelationId]=((t={})[n]=1,t)},e.prototype.getOrphanedEvents=function(e){var t=this;return Object.keys(this.inProgressEvents).reduce((function(n,r){if(-1!==r.indexOf(e)){var o=t.inProgressEvents[r];return delete t.inProgressEvents[r],n.concat([o])}return n}),[])},e}(),je="https://login.microsoftonline.com/common",Le="id_token",Ne="token",Me="id_token token",He=function(e,t,n){var r=n.value;return n.value=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.isInIframe()?new Promise((function(){})):r.apply(this,e)},n},De=function(){function e(e){var t,n,r,o,a,c,s,u;this.authResponseCallback=null,this.tokenReceivedCallback=null,this.errorReceivedCallback=null,this.config=(n=(t=e).auth,r=t.cache,o=void 0===r?{}:r,a=t.system,c=void 0===a?{}:a,s=t.framework,u=void 0===s?{}:s,{auth:i({},ge,n),cache:i({},me,o),system:i({},ye,c),framework:i({},ve,u)}),this.redirectCallbacksSet=!1,this.logger=this.config.system.logger,this.clientId=this.config.auth.clientId,this.inCookie=this.config.cache.storeAuthStateInCookie,this.telemetryManager=this.getTelemetryManagerFromConfig(this.config.system.telemetry,this.clientId),this.authority=this.config.auth.authority||je,this.loginInProgress=!1,this.acquireTokenInProgress=!1;try{this.cacheStorage=new oe(this.config.cache.cacheLocation)}catch(e){throw Y.createInvalidCacheLocationConfigError(this.config.cache.cacheLocation)}window.openedWindows=[],window.activeRenewals={},window.renewStates=[],window.callbackMappedToRenewStates={},window.promiseMappedToRenewStates={},window.msal=this;var l=window.location.hash,d=this.urlContainsHash(l);this.config.framework.isAngular||d&&this.handleAuthenticationResponse(l)}return Object.defineProperty(e.prototype,"authority",{get:function(){return this.authorityInstance.CanonicalAuthority},set:function(e){this.authorityInstance=he.CreateInstance(e,this.config.auth.validateAuthority)},enumerable:!0,configurable:!0}),e.prototype.getAuthorityInstance=function(){return this.authorityInstance},e.prototype.handleRedirectCallback=function(e,t){if(!e)throw this.redirectCallbacksSet=!1,Y.createInvalidCallbackObjectError(e);if(t?(this.tokenReceivedCallback=e,this.errorReceivedCallback=t,this.logger.warning("This overload for callback is deprecated - please change the format of the callbacks to a single callback as shown: (err: AuthError, response: AuthResponse).")):this.authResponseCallback=e,this.redirectCallbacksSet=!0,!this.config.framework.isAngular){var n=this.cacheStorage.getItem(c.urlHash);n&&this.processCallBack(n,null)}},e.prototype.authResponseHandler=function(e,t,n){if(e===c.interactionTypeRedirect)this.errorReceivedCallback?this.tokenReceivedCallback(t):this.authResponseCallback&&this.authResponseCallback(null,t);else{if(e!==c.interactionTypePopup)throw Q.createInvalidInteractionTypeError();n(t)}},e.prototype.authErrorHandler=function(e,t,n,r){if(e===c.interactionTypeRedirect)this.errorReceivedCallback?this.errorReceivedCallback(t,n.accountState):this.authResponseCallback(t,n);else{if(e!==c.interactionTypePopup)throw Q.createInvalidInteractionTypeError();r(t)}},e.prototype.loginRedirect=function(e){if(!this.redirectCallbacksSet)throw Y.createRedirectCallbacksNotSetError();this.acquireTokenInteractive(c.interactionTypeRedirect,!0,e)},e.prototype.acquireTokenRedirect=function(e){if(!e)throw Y.createEmptyRequestError();if(!this.redirectCallbacksSet)throw Y.createRedirectCallbacksNotSetError();this.acquireTokenInteractive(c.interactionTypeRedirect,!1,e)},e.prototype.loginPopup=function(e){var t=this;return new Promise((function(n,r){t.acquireTokenInteractive(c.interactionTypePopup,!0,e,n,r)}))},e.prototype.acquireTokenPopup=function(e){var t=this;if(!e)throw Y.createEmptyRequestError();return new Promise((function(n,r){t.acquireTokenInteractive(c.interactionTypePopup,!1,e,n,r)}))},e.prototype.acquireTokenInteractive=function(e,t,n,r,o){var i=this;if(this.loginInProgress||this.acquireTokenInProgress){var a=this.loginInProgress?Q.createLoginInProgressError():Q.createAcquireTokenInProgressError(),c=Ee(this.getAccountState(n&&n.state));this.authErrorHandler(e,a,c,o)}else{var s=t?this.appendScopes(n):n.scopes;this.validateInputScope(s,!t);var u=n&&n.account&&!t?n.account:this.getAccount();if(u||Z.isSSOParam(n))this.acquireTokenHelper(u,e,t,n,s,r,o);else{if(!t)throw this.logger.info("User login is required"),Q.createUserLoginRequiredError();if(this.extractADALIdToken()&&!s){this.logger.info("ADAL's idToken exists. Extracting login information from ADAL's idToken ");var l=this.buildIDTokenRequest(n);this.silentLogin=!0,this.acquireTokenSilent(l).then((function(t){i.silentLogin=!1,i.logger.info("Unified cache call is successful"),i.authResponseHandler(e,t,r)}),(function(a){i.silentLogin=!1,i.logger.error("Error occurred during unified cache ATS: "+a),i.acquireTokenHelper(null,e,t,n,s,r,o)}))}else this.acquireTokenHelper(null,e,t,n,s,r,o)}}},e.prototype.acquireTokenHelper=function(e,t,n,r,o,i,a){var s=this;n?this.loginInProgress=!0:this.acquireTokenInProgress=!0;var u,l,d=o?o.join(" ").toLowerCase():this.clientId.toLowerCase(),p=!n&&r&&r.authority?he.CreateInstance(r.authority,this.config.auth.validateAuthority):this.authorityInstance;(t!==c.interactionTypePopup||(l=this.openWindow("about:blank","_blank",1,this,i,a)))&&p.resolveEndpointsAsync().then((function(){var h,f=n?Le:s.getTokenType(e,o,!1);n&&((h=s.cacheStorage.getItem(c.angularLoginRequest))&&""!==h?s.cacheStorage.setItem(c.angularLoginRequest,""):h=window.location.href),u=new Z(p,s.clientId,o,f,s.getRedirectUri(),r&&r.state),s.updateCacheEntries(u,e,h),u.populateQueryParams(e,r);var g=S.createNavigateUrl(u)+c.response_mode_fragment;if(t===c.interactionTypeRedirect)n||s.cacheStorage.setItem(c.stateAcquireToken,u.state,s.inCookie);else{if(t!==c.interactionTypePopup)throw Q.createInvalidInteractionTypeError();window.renewStates.push(u.state),window.requestType=n?c.login:c.renewToken,s.registerCallback(u.state,d,i,a)}s.navigateWindow(g,l)})).catch((function(e){s.logger.warning("could not resolve endpoints"),s.authErrorHandler(t,Q.createEndpointResolutionError(e.toString),Ee(r.state),a),l&&l.close()}))},e.prototype.acquireTokenSilent=function(e){var t=this;if(!e)throw Y.createEmptyRequestError();return new Promise((function(n,r){t.validateInputScope(e.scopes,!0);var o=e.scopes.join(" ").toLowerCase(),i=e.account||t.getAccount(),a=t.cacheStorage.getItem(c.adalIdToken);if(!i&&!e.sid&&!e.loginHint&&T.isEmpty(a))return t.logger.info("User login is required"),r(Q.createUserLoginRequiredError());var s=t.getTokenType(i,e.scopes,!0),u=new Z(he.CreateInstance(e.authority,t.config.auth.validateAuthority),t.clientId,e.scopes,s,t.getRedirectUri(),e&&e.state);if(Z.isSSOParam(e)||i)u.populateQueryParams(i,e);else if(!i&&!T.isEmpty(a)){var l=te.extractIdToken(a);t.logger.verbose("ADAL's idToken exists. Extracting login information from ADAL's idToken "),u.populateQueryParams(i,null,l)}var d,p,h=e.claimsRequest||u.claimsValue;if(!h&&!e.forceRefresh)try{p=t.getCachedToken(u,i)}catch(e){d=e}if(p)return t.logger.info("Token is already in cache for scope:"+o),n(p),null;if(d)return t.logger.infoPii(d.errorCode+":"+d.errorMessage),r(d),null;var f=void 0;return f=h?"Skipped cache lookup since claims were given.":e.forceRefresh?"Skipped cache lookup since request.forceRefresh option was set to true":"Token is not in cache for scope:"+o,t.logger.verbose(f),u.authorityInstance||(u.authorityInstance=e.authority?he.CreateInstance(e.authority,t.config.auth.validateAuthority):t.authorityInstance),u.authorityInstance.resolveEndpointsAsync().then((function(){window.activeRenewals[o]?(t.logger.verbose("Renew token for scope: "+o+" is in progress. Registering callback"),t.registerCallback(window.activeRenewals[o],o,n,r)):e.scopes&&e.scopes.indexOf(t.clientId)>-1&&1===e.scopes.length?(t.logger.verbose("renewing idToken"),t.silentLogin=!0,t.renewIdToken(e.scopes,n,r,i,u)):(t.logger.verbose("renewing accesstoken"),t.renewToken(e.scopes,n,r,i,u))})).catch((function(e){return t.logger.warning("could not resolve endpoints"),r(Q.createEndpointResolutionError(e.toString())),null}))}))},e.prototype.openWindow=function(e,t,n,r,o,i){var a,s=this;try{a=this.openPopup(e,t,c.popUpWidth,c.popUpHeight)}catch(e){return r.loginInProgress=!1,r.acquireTokenInProgress=!1,this.logger.info(x.code+":"+x.desc),this.cacheStorage.setItem(c.msalError,x.code),this.cacheStorage.setItem(c.msalErrorDescription,x.desc),i&&i(Q.createPopupWindowError()),null}window.openedWindows.push(a);var u=window.setInterval((function(){if(a&&a.closed&&(r.loginInProgress||r.acquireTokenInProgress)){if(i&&i(Q.createUserCancelledError()),window.clearInterval(u),s.config.framework.isAngular)return void s.broadcast("msal:popUpClosed",H.code+c.resourceDelimiter+H.desc);r.loginInProgress=!1,r.acquireTokenInProgress=!1}try{var e=a.location;if(-1!==e.href.indexOf(s.getRedirectUri())&&(window.clearInterval(u),r.loginInProgress=!1,r.acquireTokenInProgress=!1,s.logger.info("Closing popup window"),s.config.framework.isAngular)){s.broadcast("msal:popUpHashChanged",e.hash);for(var t=0;t<window.openedWindows.length;t++)window.openedWindows[t].close()}}catch(e){}}),n);return a},e.prototype.openPopup=function(e,t,n,r){try{var o=window.screenLeft?window.screenLeft:window.screenX,i=window.screenTop?window.screenTop:window.screenY,a=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,c=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight,s=a/2-n/2+o,u=c/2-r/2+i,l=window.open(e,t,"width="+n+", height="+r+", top="+u+", left="+s);if(!l)throw Q.createPopupWindowError();return l.focus&&l.focus(),l}catch(e){throw this.logger.error("error opening popup "+e.message),this.loginInProgress=!1,this.acquireTokenInProgress=!1,Q.createPopupWindowError(e.toString())}},e.prototype.isInIframe=function(){return window.parent!==window},e.prototype.parentIsMsal=function(){return window.parent!==window&&window.parent.msal},e.prototype.loadIframeTimeout=function(e,t,n){var r=this,o=window.activeRenewals[n];this.logger.verbose("Set loading state to pending for: "+n+":"+o),this.cacheStorage.setItem(c.renewStatus+o,c.tokenRenewStatusInProgress),this.loadFrame(e,t),setTimeout((function(){r.cacheStorage.getItem(c.renewStatus+o)===c.tokenRenewStatusInProgress&&(r.logger.verbose("Loading frame has timed out after: "+r.config.system.loadFrameTimeout/1e3+" seconds for scope "+n+":"+o),o&&window.callbackMappedToRenewStates[o]&&window.callbackMappedToRenewStates[o](null,Q.createTokenRenewalTimeoutError()),r.cacheStorage.setItem(c.renewStatus+o,c.tokenRenewStatusCancelled))}),this.config.system.loadFrameTimeout)},e.prototype.loadFrame=function(e,t){var n=this;this.logger.info("LoadFrame: "+t);var r=t;setTimeout((function(){var o=n.addHiddenIFrame(r);""!==o.src&&"about:blank"!==o.src||(o.src=e,n.logger.infoPii("Frame Name : "+t+" Navigated to: "+e))}),this.config.system.navigateFrameWait)},e.prototype.addHiddenIFrame=function(e){if(void 0===e)return null;this.logger.info("Add msal frame to document:"+e);var t=document.getElementById(e);if(!t){if(document.createElement&&document.documentElement&&-1===window.navigator.userAgent.indexOf("MSIE 5.0")){var n=document.createElement("iframe");n.setAttribute("id",e),n.style.visibility="hidden",n.style.position="absolute",n.style.width=n.style.height="0",n.style.border="0",t=document.getElementsByTagName("body")[0].appendChild(n)}else document.body&&document.body.insertAdjacentHTML&&document.body.insertAdjacentHTML("beforeend","<iframe name='"+e+"' id='"+e+"' style='display:none'></iframe>");window.frames&&window.frames[e]&&(t=window.frames[e])}return t},e.prototype.navigateWindow=function(e,t){if(!e||T.isEmpty(e))throw this.logger.info("Navigate url is empty"),P.createUnexpectedError("Navigate url is empty");var n=t||window,r=t?"Navigated Popup window to:"+e:"Navigate to:"+e;this.logger.infoPii(r),n.location.replace(e)},e.prototype.registerCallback=function(e,t,n,r){var o=this;window.activeRenewals[t]=e,window.promiseMappedToRenewStates[e]||(window.promiseMappedToRenewStates[e]=[]),window.promiseMappedToRenewStates[e].push({resolve:n,reject:r}),window.callbackMappedToRenewStates[e]||(window.callbackMappedToRenewStates[e]=function(n,r){window.activeRenewals[t]=null;for(var i=0;i<window.promiseMappedToRenewStates[e].length;++i)try{if(r)window.promiseMappedToRenewStates[e][i].reject(r);else{if(!n)throw P.createUnexpectedError("Error and response are both null");window.promiseMappedToRenewStates[e][i].resolve(n)}}catch(e){o.logger.warning(e)}window.promiseMappedToRenewStates[e]=null,window.callbackMappedToRenewStates[e]=null})},e.prototype.logout=function(){var e=this;this.clearCache(),this.account=null;var t="";this.getPostLogoutRedirectUri()&&(t="post_logout_redirect_uri="+encodeURIComponent(this.getPostLogoutRedirectUri())),this.authorityInstance.resolveEndpointsAsync().then((function(n){var r=n.EndSessionEndpoint?n.EndSessionEndpoint+"?"+t:e.authority+"oauth2/v2.0/logout?"+t;e.navigateWindow(r)}))},e.prototype.clearCache=function(){window.renewStates=[];for(var e=this.cacheStorage.getAllAccessTokens(c.clientId,c.homeAccountIdentifier),t=0;t<e.length;t++)this.cacheStorage.removeItem(JSON.stringify(e[t].key));this.cacheStorage.resetCacheItems(),this.cacheStorage.clearCookie()},e.prototype.clearCacheForScope=function(e){for(var t=this.cacheStorage.getAllAccessTokens(c.clientId,c.homeAccountIdentifier),n=0;n<t.length;n++){var r=t[n];r.value.accessToken===e&&this.cacheStorage.removeItem(JSON.stringify(r.key))}},e.prototype.isCallback=function(e){return this.logger.info("isCallback will be deprecated in favor of urlContainsHash in MSAL.js v2.0."),this.urlContainsHash(e)},e.prototype.urlContainsHash=function(e){var t=this.deserializeHash(e);return t.hasOwnProperty(c.errorDescription)||t.hasOwnProperty(c.error)||t.hasOwnProperty(c.accessToken)||t.hasOwnProperty(c.idToken)},e.prototype.processCallBack=function(e,t,n){var r,o;this.logger.info("Processing the callback from redirect response"),t||(t=this.getResponseState(e));try{r=this.saveTokenFromHash(e,t)}catch(e){o=e}this.cacheStorage.removeItem(c.urlHash);try{this.cacheStorage.clearCookie();var i=this.getAccountState(t.state);if(r){if(t.requestType===c.renewToken||r.accessToken?(window.parent!==window?this.logger.verbose("Window is in iframe, acquiring token silently"):this.logger.verbose("acquiring token interactive in progress"),r.tokenType=c.accessToken):t.requestType===c.login&&(r.tokenType=c.idToken),!n)return void this.authResponseHandler(c.interactionTypeRedirect,r)}else if(!n)return void this.authErrorHandler(c.interactionTypeRedirect,o,Ee(i));n(r,o)}catch(e){throw this.logger.error("Error occurred in token received callback function: "+e),Q.createErrorInCallbackFunction(e.toString())}},e.prototype.handleAuthenticationResponse=function(e){null==e&&(e=window.location.hash);var t=null,n=!1,r=!1;try{r=window.opener&&window.opener.msal&&window.opener.msal!==window.msal}catch(e){r=!1}r?(t=window.opener.msal,n=!0):window.parent&&window.parent.msal&&(t=window.parent.msal);var o=t.getResponseState(e),i=null;if(t.logger.info("Returned from redirect url"),this.parentIsMsal())i=window.parent.callbackMappedToRenewStates[o.state];else if(r)i=window.opener.callbackMappedToRenewStates[o.state];else{if(i=null,t.config.auth.navigateToLoginRequestUrl)return t.cacheStorage.setItem(c.urlHash,e),void(window.parent!==window||n||(window.location.href=t.cacheStorage.getItem(c.loginRequest,t.inCookie)));if(window.location.hash="",!this.redirectCallbacksSet)return void t.cacheStorage.setItem(c.urlHash,e)}if(t.processCallBack(e,o,i),r)for(var a=0;a<window.opener.openedWindows.length;a++)window.opener.openedWindows[a].close()},e.prototype.deserializeHash=function(e){var t=S.getHashFromUrl(e);return a.deserialize(t)},e.prototype.getResponseState=function(e){var t,n=this.deserializeHash(e);if(!n)throw P.createUnexpectedError("Hash was not parsed correctly.");if(!n.hasOwnProperty("state"))throw P.createUnexpectedError("Hash does not contain state.");if((t={requestType:c.unknown,state:n.state,stateMatch:!1}).state===this.cacheStorage.getItem(c.stateLogin,this.inCookie)||t.state===this.silentAuthenticationState)return t.requestType=c.login,t.stateMatch=!0,t;if(t.state===this.cacheStorage.getItem(c.stateAcquireToken,this.inCookie))return t.requestType=c.renewToken,t.stateMatch=!0,t;if(!t.stateMatch){t.requestType=window.requestType;for(var r=window.renewStates,o=0;o<r.length;o++)if(r[o]===t.state){t.stateMatch=!0;break}}return t},e.prototype.getCachedToken=function(e,t){var n=null,r=e.scopes,o=this.cacheStorage.getAllAccessTokens(this.clientId,t?t.homeAccountIdentifier:null);if(0===o.length)return null;var i=[];if(e.authority){for(a=0;a<o.length;a++){u=(s=o[a]).key.scopes.split(" ");k.containsScope(u,r)&&S.CanonicalizeUri(s.key.authority)===e.authority&&i.push(s)}if(0===i.length)return null;if(1!==i.length)throw Q.createMultipleMatchingTokensInCacheError(r.toString());n=i[0]}else{for(var a=0;a<o.length;a++){var s,u=(s=o[a]).key.scopes.split(" ");k.containsScope(u,r)&&i.push(s)}if(1===i.length)n=i[0],e.authorityInstance=he.CreateInstance(n.key.authority,this.config.auth.validateAuthority);else{if(i.length>1)throw Q.createMultipleMatchingTokensInCacheError(r.toString());var l=this.getUniqueAuthority(o,"authority");if(l.length>1)throw Q.createMultipleAuthoritiesInCacheError(r.toString());e.authorityInstance=he.CreateInstance(l[0],this.config.auth.validateAuthority)}}if(null!=n){var d=Number(n.value.expiresIn),p=this.config.system.tokenRenewalOffsetSeconds||300;if(d&&d>ae.now()+p){var h=new ne(n.value.idToken);if(!t&&!(t=this.getAccount()))throw P.createUnexpectedError("Account should not be null here.");var f=this.getAccountState(e.state),g={uniqueId:"",tenantId:"",tokenType:n.value.idToken===n.value.accessToken?c.idToken:c.accessToken,idToken:h,idTokenClaims:h.claims,accessToken:n.value.accessToken,scopes:n.key.scopes.split(" "),expiresOn:new Date(1e3*d),account:t,accountState:f};return ce.setResponseIdToken(g,h),g}return this.cacheStorage.removeItem(JSON.stringify(i[0].key)),null}return null},e.prototype.getUniqueAuthority=function(e,t){var n=[],r=[];return e.forEach((function(e){e.key.hasOwnProperty(t)&&-1===r.indexOf(e.key[t])&&(r.push(e.key[t]),n.push(e.key[t]))})),n},e.prototype.extractADALIdToken=function(){var e=this.cacheStorage.getItem(c.adalIdToken);return T.isEmpty(e)?null:te.extractIdToken(e)},e.prototype.renewToken=function(e,t,n,r,o){var i=e.join(" ").toLowerCase();this.logger.verbose("renewToken is called for scope:"+i);var a=this.addHiddenIFrame("msalRenewFrame"+i);this.updateCacheEntries(o,r),this.logger.verbose("Renew token Expected state: "+o.state);var s=S.urlRemoveQueryStringParameter(S.createNavigateUrl(o),c.prompt)+c.prompt_none;window.renewStates.push(o.state),window.requestType=c.renewToken,this.registerCallback(o.state,i,t,n),this.logger.infoPii("Navigate to:"+s),a.src="about:blank",this.loadIframeTimeout(s,"msalRenewFrame"+i,i)},e.prototype.renewIdToken=function(e,t,n,r,o){this.logger.info("renewidToken is called");var i=this.addHiddenIFrame("msalIdTokenFrame");this.updateCacheEntries(o,r),this.logger.verbose("Renew Idtoken Expected state: "+o.state);var a=S.urlRemoveQueryStringParameter(S.createNavigateUrl(o),c.prompt)+c.prompt_none;this.silentLogin?(window.requestType=c.login,this.silentAuthenticationState=o.state):(window.requestType=c.renewToken,window.renewStates.push(o.state)),this.registerCallback(o.state,this.clientId,t,n),this.logger.infoPii("Navigate to:"+a),i.src="about:blank",this.loadIframeTimeout(a,"msalIdTokenFrame",this.clientId)},e.prototype.saveAccessToken=function(e,t,n,r,o){var a,s,u=i({},e),l=new ee(r);if(n.hasOwnProperty("scope")){for(var d=(a=n.scope).split(" "),p=this.cacheStorage.getAllAccessTokens(this.clientId,t),h=0;h<p.length;h++){var f=p[h];if(f.key.homeAccountIdentifier===e.account.homeAccountIdentifier){var g=f.key.scopes.split(" ");k.isIntersectingScopes(g,d)&&this.cacheStorage.removeItem(JSON.stringify(f.key))}}var m=ae.parseExpiresIn(n[c.expiresIn]);s=ae.now()+m;var y=new C(t,this.clientId,a,l.uid,l.utid),v=new E(n[c.accessToken],o.rawIdToken,s.toString(),r);this.cacheStorage.setItem(JSON.stringify(y),JSON.stringify(v)),u.accessToken=n[c.accessToken],u.scopes=d}else{a=this.clientId;y=new C(t,this.clientId,a,l.uid,l.utid);s=Number(o.expiration);v=new E(n[c.idToken],n[c.idToken],s.toString(),r);this.cacheStorage.setItem(JSON.stringify(y),JSON.stringify(v)),u.scopes=[a],u.accessToken=n[c.idToken]}return s?u.expiresOn=new Date(1e3*s):this.logger.error("Could not parse expiresIn parameter"),u},e.prototype.saveTokenFromHash=function(e,t){this.logger.info("State status:"+t.stateMatch+"; Request type:"+t.requestType),this.cacheStorage.setItem(c.msalError,""),this.cacheStorage.setItem(c.msalErrorDescription,"");var n,r={uniqueId:"",tenantId:"",tokenType:"",idToken:null,idTokenClaims:null,accessToken:null,scopes:[],expiresOn:null,account:null,accountState:""},o=this.deserializeHash(e),i="",a="",s=null;if(o.hasOwnProperty(c.errorDescription)||o.hasOwnProperty(c.error)){if(this.logger.infoPii("Error :"+o[c.error]+"; Error description:"+o[c.errorDescription]),this.cacheStorage.setItem(c.msalError,o[c.error]),this.cacheStorage.setItem(c.msalErrorDescription,o[c.errorDescription]),t.requestType===c.login&&(this.loginInProgress=!1,this.cacheStorage.setItem(c.loginError,o[c.errorDescription]+":"+o[c.error]),i=oe.generateAuthorityKey(t.state)),t.requestType===c.renewToken){this.acquireTokenInProgress=!1,i=oe.generateAuthorityKey(t.state);var u=this.getAccount(),l=void 0;l=u&&!T.isEmpty(u.homeAccountIdentifier)?u.homeAccountIdentifier:c.no_account,a=oe.generateAcquireTokenAccountKey(l,t.state)}var d=o[c.error],p=o[c.errorDescription];n=Ce.isInteractionRequiredError(d)||Ce.isInteractionRequiredError(p)?new Ce(o[c.error],o[c.errorDescription]):new be(o[c.error],o[c.errorDescription])}else if(t.stateMatch){this.logger.info("State is right"),o.hasOwnProperty(c.sessionState)&&this.cacheStorage.setItem(c.msalSessionState,o[c.sessionState]),r.accountState=this.getAccountState(t.state);var h="";if(o.hasOwnProperty(c.accessToken)){this.logger.info("Fragment has access token"),this.acquireTokenInProgress=!1,o.hasOwnProperty(c.idToken)?(s=new ne(o[c.idToken]),r.idToken=s,r.idTokenClaims=s.claims):(s=new ne(this.cacheStorage.getItem(c.idTokenKey)),r=ce.setResponseIdToken(r,s));var f=oe.generateAuthorityKey(t.state),g=this.cacheStorage.getItem(f,this.inCookie);if(T.isEmpty(g)||(g=S.replaceTenantPath(g,r.tenantId)),!o.hasOwnProperty(c.clientInfo))throw this.logger.warning("ClientInfo not received in the response from AAD"),Q.createClientInfoNotPopulatedError("ClientInfo not received in the response from the server");h=o[c.clientInfo],r.account=ie.createAccount(s,new ee(h));var m=void 0;m=r.account&&!T.isEmpty(r.account.homeAccountIdentifier)?r.account.homeAccountIdentifier:c.no_account,a=oe.generateAcquireTokenAccountKey(m,t.state);var y=oe.generateAcquireTokenAccountKey(c.no_account,t.state),v=this.cacheStorage.getItem(a),w=void 0;T.isEmpty(v)?T.isEmpty(this.cacheStorage.getItem(y))||(r=this.saveAccessToken(r,g,o,h,s)):(w=JSON.parse(v),r.account&&w&&ie.compareAccounts(r.account,w)?(r=this.saveAccessToken(r,g,o,h,s),this.logger.info("The user object received in the response is the same as the one passed in the acquireToken request")):this.logger.warning("The account object created from the response is not the same as the one passed in the acquireToken request"))}if(o.hasOwnProperty(c.idToken)){this.logger.info("Fragment has id token"),this.loginInProgress=!1,s=new ne(o[c.idToken]),r=ce.setResponseIdToken(r,s),o.hasOwnProperty(c.clientInfo)?h=o[c.clientInfo]:this.logger.warning("ClientInfo not received in the response from AAD"),i=oe.generateAuthorityKey(t.state);g=this.cacheStorage.getItem(i,this.inCookie);T.isEmpty(g)||(g=S.replaceTenantPath(g,s.tenantId)),this.account=ie.createAccount(s,new ee(h)),r.account=this.account,s&&s.nonce?s.nonce!==this.cacheStorage.getItem(c.nonceIdToken,this.inCookie)?(this.account=null,this.cacheStorage.setItem(c.loginError,"Nonce Mismatch. Expected Nonce: "+this.cacheStorage.getItem(c.nonceIdToken,this.inCookie)+",Actual Nonce: "+s.nonce),this.logger.error("Nonce Mismatch.Expected Nonce: "+this.cacheStorage.getItem(c.nonceIdToken,this.inCookie)+",Actual Nonce: "+s.nonce),n=Q.createNonceMismatchError(this.cacheStorage.getItem(c.nonceIdToken,this.inCookie),s.nonce)):(this.cacheStorage.setItem(c.idTokenKey,o[c.idToken]),this.cacheStorage.setItem(c.msalClientInfo,h),this.saveAccessToken(r,g,o,h,s)):(i=t.state,a=t.state,this.logger.error("Invalid id_token received in the response"),n=Q.createInvalidIdTokenError(s),this.cacheStorage.setItem(c.msalError,n.errorCode),this.cacheStorage.setItem(c.msalErrorDescription,n.errorMessage))}}else{i=t.state,a=t.state;var I=this.cacheStorage.getItem(c.stateLogin,this.inCookie);this.logger.error("State Mismatch.Expected State: "+I+",Actual State: "+t.state),n=Q.createInvalidStateError(t.state,I),this.cacheStorage.setItem(c.msalError,n.errorCode),this.cacheStorage.setItem(c.msalErrorDescription,n.errorMessage)}if(this.cacheStorage.setItem(c.renewStatus+t.state,c.tokenRenewStatusCompleted),this.cacheStorage.removeAcquireTokenEntries(t.state),this.inCookie&&(this.cacheStorage.setItemCookie(i,"",-1),this.cacheStorage.clearCookie()),n)throw n;if(!r)throw P.createUnexpectedError("Response is null");return r},e.prototype.getAccount=function(){if(this.account)return this.account;var e=this.cacheStorage.getItem(c.idTokenKey),t=this.cacheStorage.getItem(c.msalClientInfo);if(!T.isEmpty(e)&&!T.isEmpty(t)){var n=new ne(e),r=new ee(t);return this.account=ie.createAccount(n,r),this.account}return null},e.prototype.getAccountState=function(e){if(e){var t=e.indexOf("|");if(t>-1&&t+1<e.length)return e.substring(t+1)}return e},e.prototype.getAllAccounts=function(){for(var e=[],t=this.cacheStorage.getAllAccessTokens(c.clientId,c.homeAccountIdentifier),n=0;n<t.length;n++){var r=new ne(t[n].value.idToken),o=new ee(t[n].value.homeAccountIdentifier),i=ie.createAccount(r,o);e.push(i)}return this.getUniqueAccounts(e)},e.prototype.getUniqueAccounts=function(e){if(!e||e.length<=1)return e;for(var t=[],n=[],r=0;r<e.length;++r)e[r].homeAccountIdentifier&&-1===t.indexOf(e[r].homeAccountIdentifier)&&(t.push(e[r].homeAccountIdentifier),n.push(e[r]));return n},e.prototype.validateInputScope=function(e,t){if(e){if(!Array.isArray(e))throw Y.createScopesNonArrayError(e);if(e.length<1)throw Y.createEmptyScopesArrayError(e.toString());if(e.indexOf(this.clientId)>-1&&e.length>1)throw Y.createClientIdSingleScopeError(e.toString())}else if(t)throw Y.createScopesRequiredError(e)},e.prototype.getScopeFromState=function(e){if(e){var t=e.indexOf("|");if(t>-1&&t+1<e.length)return e.substring(t+1)}return""},e.prototype.appendScopes=function(e){var t;return e&&e.scopes&&(t=e.extraScopesToConsent?e.scopes.concat(e.extraScopesToConsent):e.scopes),t},e.prototype.broadcast=function(e,t){var n=new CustomEvent(e,{detail:t});window.dispatchEvent(n)},e.prototype.getCachedTokenInternal=function(e,t,n){var r=t||this.getAccount();if(!r)return null;var o=this.authorityInstance?this.authorityInstance:he.CreateInstance(this.authority,this.config.auth.validateAuthority),i=this.getTokenType(r,e,!0),a=new Z(o,this.clientId,e,i,this.getRedirectUri(),n);return this.getCachedToken(a,t)},e.prototype.getScopesForEndpoint=function(e){if(this.config.framework.unprotectedResources.length>0)for(var t=0;t<this.config.framework.unprotectedResources.length;t++)if(e.indexOf(this.config.framework.unprotectedResources[t])>-1)return null;if(this.config.framework.protectedResourceMap.size>0)for(var n=0,r=Array.from(this.config.framework.protectedResourceMap.keys());n<r.length;n++){var o=r[n];if(e.indexOf(o)>-1)return this.config.framework.protectedResourceMap.get(o)}return e.indexOf("http://")>-1||e.indexOf("https://")>-1?this.getHostFromUri(e)===this.getHostFromUri(this.getRedirectUri())?new Array(this.clientId):null:new Array(this.clientId)},e.prototype.getLoginInProgress=function(){return!!this.cacheStorage.getItem(c.urlHash)||this.loginInProgress},e.prototype.setloginInProgress=function(e){this.loginInProgress=e},e.prototype.getAcquireTokenInProgress=function(){return this.acquireTokenInProgress},e.prototype.setAcquireTokenInProgress=function(e){this.acquireTokenInProgress=e},e.prototype.getLogger=function(){return this.config.system.logger},e.prototype.getRedirectUri=function(){return"function"==typeof this.config.auth.redirectUri?this.config.auth.redirectUri():this.config.auth.redirectUri},e.prototype.getPostLogoutRedirectUri=function(){return"function"==typeof this.config.auth.postLogoutRedirectUri?this.config.auth.postLogoutRedirectUri():this.config.auth.postLogoutRedirectUri},e.prototype.getCurrentConfiguration=function(){if(!this.config)throw Y.createNoSetConfigurationError();return this.config},e.prototype.getHostFromUri=function(e){var t=String(e).replace(/^(https?:)\/\//,"");return t=t.split("/")[0]},e.prototype.getTokenType=function(e,t,n){return n?ie.compareAccounts(e,this.getAccount())?t.indexOf(this.config.auth.clientId)>-1?Le:Ne:t.indexOf(this.config.auth.clientId)>-1?Le:Me:ie.compareAccounts(e,this.getAccount())?t.indexOf(this.clientId)>-1?Le:Ne:Me},e.prototype.setAccountCache=function(e,t){var n=e?this.getAccountId(e):c.no_account,r=oe.generateAcquireTokenAccountKey(n,t);this.cacheStorage.setItem(r,JSON.stringify(e))},e.prototype.setAuthorityCache=function(e,t){var n=oe.generateAuthorityKey(e);this.cacheStorage.setItem(n,S.CanonicalizeUri(t),this.inCookie)},e.prototype.updateCacheEntries=function(e,t,n){n?(this.cacheStorage.setItem(c.loginRequest,n,this.inCookie),this.cacheStorage.setItem(c.loginError,""),this.cacheStorage.setItem(c.stateLogin,e.state,this.inCookie),this.cacheStorage.setItem(c.msalError,""),this.cacheStorage.setItem(c.msalErrorDescription,"")):this.setAccountCache(t,e.state),this.setAuthorityCache(e.state,e.authority),this.cacheStorage.setItem(c.nonceIdToken,e.nonce,this.inCookie)},e.prototype.getAccountId=function(e){return T.isEmpty(e.homeAccountIdentifier)?c.no_account:e.homeAccountIdentifier},e.prototype.buildIDTokenRequest=function(e){return{scopes:[this.clientId],authority:this.authority,account:this.getAccount(),extraQueryParameters:e.extraQueryParameters}},e.prototype.getTelemetryManagerFromConfig=function(e,t){if(!e)return null;var n=e.applicationName,r=e.applicationVersion,o=e.telemetryEmitter;if(!n||!r||!o)throw Y.createTelemetryConfigError(e);return new Ue({platform:{sdk:"msal.js",sdkVersion:"1.1.3",applicationName:n,applicationVersion:r},clientId:t},o)},function(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var c=e.length-1;c>=0;c--)(o=e[c])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);i>3&&a&&Object.defineProperty(t,n,a)}([He],e.prototype,"acquireTokenSilent",null),e}();n.d(t,"UserAgentApplication",(function(){return De})),n.d(t,"Logger",(function(){return fe})),n.d(t,"LogLevel",(function(){return ue})),n.d(t,"Account",(function(){return ie})),n.d(t,"Constants",(function(){return c})),n.d(t,"Authority",(function(){return le})),n.d(t,"AuthError",(function(){return P})),n.d(t,"ClientAuthError",(function(){return Q})),n.d(t,"ServerError",(function(){return be})),n.d(t,"ClientConfigurationError",(function(){return Y})),n.d(t,"InteractionRequiredAuthError",(function(){return Ce}))}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,