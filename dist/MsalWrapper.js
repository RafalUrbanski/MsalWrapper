!function(I,g){"object"==typeof exports&&"object"==typeof module?module.exports=g():"function"==typeof define&&define.amd?define("MsalWrapper",[],g):"object"==typeof exports?exports.MsalWrapper=g():I.MsalWrapper=g()}(window,(function(){return function(I){var g={};function c(n){if(g[n])return g[n].exports;var e=g[n]={i:n,l:!1,exports:{}};return I[n].call(e.exports,e,e.exports,c),e.l=!0,e.exports}return c.m=I,c.c=g,c.d=function(I,g,n){c.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:n})},c.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},c.t=function(I,g){if(1&g&&(I=c(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var n=Object.create(null);if(c.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var e in I)c.d(n,e,function(g){return I[g]}.bind(null,e));return n},c.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return c.d(g,"a",g),g},c.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},c.p="",c(c.s=0)}([function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nvar Msal = __webpack_require__(1);\r\nvar TokenRequestType;\r\n(function (TokenRequestType) {\r\n    TokenRequestType[TokenRequestType["LoginToken"] = 0] = "LoginToken";\r\n    TokenRequestType[TokenRequestType["AccessToken"] = 1] = "AccessToken";\r\n})(TokenRequestType || (TokenRequestType = {}));\r\nvar MsalWrapper = /** @class */ (function () {\r\n    function MsalWrapper(configuration) {\r\n        var _this = this;\r\n        this._basicConfiguration = {\r\n            auth: {\r\n                clientId: null,\r\n                validateAuthority: true\r\n            },\r\n            cache: {\r\n                cacheLocation: "localStorage",\r\n                storeAuthStateInCookie: false\r\n            },\r\n            system: {\r\n                loadFrameTimeout: 30000\r\n            }\r\n        };\r\n        this._basicLoginRequest = {\r\n            scopes: ["openid", "User.Read"],\r\n            prompt: "login"\r\n        };\r\n        this.acquireAccessToken = function (request) {\r\n            return new Promise(function (resolve, reject) {\r\n                _this._resolve = resolve;\r\n                _this._reject = reject;\r\n                _this._requestType = TokenRequestType.AccessToken;\r\n                _this._acquireAccessTokenInternal(request);\r\n            });\r\n        };\r\n        this.acquireLoginToken = function (request) {\r\n            return new Promise(function (resolve, reject) {\r\n                _this._resolve = resolve;\r\n                _this._reject = reject;\r\n                _this._requestType = TokenRequestType.LoginToken;\r\n                var mergedLoginRequest = Object.assign(_this._basicLoginRequest, request);\r\n                _this._userAgentApplication\r\n                    .loginPopup(mergedLoginRequest)\r\n                    .then(function (loginResponse) {\r\n                    _this._resolve(loginResponse);\r\n                })\r\n                    .catch(function (error) {\r\n                    _this._reject(error);\r\n                });\r\n            });\r\n        };\r\n        this._authRedirectCallBack = function (error, response) {\r\n            console.log("Authorization redirect fired");\r\n            if (error) {\r\n                console.log(error);\r\n            }\r\n            else {\r\n                if (response.tokenType === "id_token") {\r\n                    if (_this._requestType === TokenRequestType.AccessToken)\r\n                        _this._acquireAccessTokenInternal({ scopes: response.scopes });\r\n                    else\r\n                        _this._resolve(response);\r\n                }\r\n                else if (response.tokenType === "access_token") {\r\n                    _this._resolve(response);\r\n                }\r\n                else {\r\n                    console.log("token type is:" + response.tokenType);\r\n                }\r\n            }\r\n        };\r\n        this._requiresInteraction = function (errorMessage) {\r\n            if (!errorMessage || !errorMessage.length) {\r\n                return false;\r\n            }\r\n            console.log(errorMessage);\r\n            return (errorMessage.indexOf("consent_required") !== -1 ||\r\n                errorMessage.indexOf("interaction_required") !== -1 ||\r\n                errorMessage.indexOf("login_required") !== -1);\r\n        };\r\n        this._acquireAccessTokenInternal = function (request) {\r\n            _this._userAgentApplication\r\n                .loginPopup(_this._basicLoginRequest)\r\n                .then(function () {\r\n                _this._userAgentApplication\r\n                    .acquireTokenSilent(request)\r\n                    .then(function (tokenResponse) {\r\n                    _this._resolve(tokenResponse);\r\n                })\r\n                    .catch(function (error) {\r\n                    if (_this._requiresInteraction(error.errorCode)) {\r\n                        _this._userAgentApplication\r\n                            .acquireTokenPopup(request)\r\n                            .then(function (tokenResponse) {\r\n                            _this._resolve(tokenResponse);\r\n                        })\r\n                            .catch(function (error) {\r\n                            _this._reject(error);\r\n                        });\r\n                    }\r\n                    else\r\n                        _this._reject(error);\r\n                });\r\n            })\r\n                .catch(function (error) {\r\n                _this._reject(error);\r\n            });\r\n        };\r\n        if (!configuration.auth.clientId)\r\n            throw "ClientId has to be set";\r\n        var mergedConfiguration = Object.assign(this._basicConfiguration, configuration);\r\n        this._userAgentApplication = new Msal.UserAgentApplication(mergedConfiguration);\r\n        this._userAgentApplication.handleRedirectCallback(this._authRedirectCallBack);\r\n    }\r\n    ;\r\n    return MsalWrapper;\r\n}());\r\nexports.default = MsalWrapper;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.js\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError("Generator is already executing.");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === "function" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i["return"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume("next", value); }\r\n    function reject(value) { resume("throw", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/utils/CryptoUtils.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n * @hidden\r\n */\r\nvar CryptoUtils = /** @class */ (function () {\r\n    function CryptoUtils() {\r\n    }\r\n    /**\r\n     * Creates a new random GUID - used to populate state?\r\n     * @returns string (GUID)\r\n     */\r\n    CryptoUtils.createNewGuid = function () {\r\n        // RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\r\n        // pseudo-random numbers.\r\n        // The algorithm is as follows:\r\n        //     Set the two most significant bits (bits 6 and 7) of the\r\n        //        clock_seq_hi_and_reserved to zero and one, respectively.\r\n        //     Set the four most significant bits (bits 12 through 15) of the\r\n        //        time_hi_and_version field to the 4-bit version number from\r\n        //        Section 4.1.3. Version4\r\n        //     Set all the other bits to randomly (or pseudo-randomly) chosen\r\n        //     values.\r\n        // UUID                   = time-low "-" time-mid "-"time-high-and-version "-"clock-seq-reserved and low(2hexOctet)"-" node\r\n        // time-low               = 4hexOctet\r\n        // time-mid               = 2hexOctet\r\n        // time-high-and-version  = 2hexOctet\r\n        // clock-seq-and-reserved = hexOctet:\r\n        // clock-seq-low          = hexOctet\r\n        // node                   = 6hexOctet\r\n        // Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\r\n        // y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\r\n        // y values are 8, 9, A, B\r\n        var cryptoObj = window.crypto; // for IE 11\r\n        if (cryptoObj && cryptoObj.getRandomValues) {\r\n            var buffer = new Uint8Array(16);\r\n            cryptoObj.getRandomValues(buffer);\r\n            //buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\r\n            buffer[6] |= 0x40; //buffer[6] | 01000000 will set the 6 bit to 1.\r\n            buffer[6] &= 0x4f; //buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = "4".\r\n            //buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\r\n            buffer[8] |= 0x80; //buffer[8] | 10000000 will set the 7 bit to 1.\r\n            buffer[8] &= 0xbf; //buffer[8] & 10111111 will set the 6 bit to 0.\r\n            return CryptoUtils.decimalToHex(buffer[0]) + CryptoUtils.decimalToHex(buffer[1])\r\n                + CryptoUtils.decimalToHex(buffer[2]) + CryptoUtils.decimalToHex(buffer[3])\r\n                + "-" + CryptoUtils.decimalToHex(buffer[4]) + CryptoUtils.decimalToHex(buffer[5])\r\n                + "-" + CryptoUtils.decimalToHex(buffer[6]) + CryptoUtils.decimalToHex(buffer[7])\r\n                + "-" + CryptoUtils.decimalToHex(buffer[8]) + CryptoUtils.decimalToHex(buffer[9])\r\n                + "-" + CryptoUtils.decimalToHex(buffer[10]) + CryptoUtils.decimalToHex(buffer[11])\r\n                + CryptoUtils.decimalToHex(buffer[12]) + CryptoUtils.decimalToHex(buffer[13])\r\n                + CryptoUtils.decimalToHex(buffer[14]) + CryptoUtils.decimalToHex(buffer[15]);\r\n        }\r\n        else {\r\n            var guidHolder = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";\r\n            var hex = "0123456789abcdef";\r\n            var r = 0;\r\n            var guidResponse = "";\r\n            for (var i = 0; i < 36; i++) {\r\n                if (guidHolder[i] !== "-" && guidHolder[i] !== "4") {\r\n                    // each x and y needs to be random\r\n                    r = Math.random() * 16 | 0;\r\n                }\r\n                if (guidHolder[i] === "x") {\r\n                    guidResponse += hex[r];\r\n                }\r\n                else if (guidHolder[i] === "y") {\r\n                    // clock-seq-and-reserved first hex is filtered and remaining hex values are random\r\n                    r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\r\n                    r |= 0x8; // set pos 3 to 1 as 1???\r\n                    guidResponse += hex[r];\r\n                }\r\n                else {\r\n                    guidResponse += guidHolder[i];\r\n                }\r\n            }\r\n            return guidResponse;\r\n        }\r\n    };\r\n    /**\r\n     * Decimal to Hex\r\n     *\r\n     * @param num\r\n     */\r\n    CryptoUtils.decimalToHex = function (num) {\r\n        var hex = num.toString(16);\r\n        while (hex.length < 2) {\r\n            hex = "0" + hex;\r\n        }\r\n        return hex;\r\n    };\r\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_4_%E2%80%93_escaping_the_string_before_encoding_it\r\n    /**\r\n     * encoding string to base64 - platform specific check\r\n     *\r\n     * @param input\r\n     */\r\n    CryptoUtils.base64Encode = function (input) {\r\n        return btoa(encodeURIComponent(input).replace(/%([0-9A-F]{2})/g, function toSolidBytes(match, p1) {\r\n            return String.fromCharCode(Number("0x" + p1));\r\n        }));\r\n    };\r\n    /**\r\n     * decoding base64 token - platform specific check\r\n     *\r\n     * @param base64IdToken\r\n     */\r\n    CryptoUtils.base64Decode = function (input) {\r\n        return decodeURIComponent(atob(input).split("").map(function (c) {\r\n            return "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2);\r\n        }).join(""));\r\n    };\r\n    /**\r\n     * deserialize a string\r\n     *\r\n     * @param query\r\n     */\r\n    CryptoUtils.deserialize = function (query) {\r\n        var match; // Regex for replacing addition symbol with a space\r\n        var pl = /\\+/g;\r\n        var search = /([^&=]+)=([^&]*)/g;\r\n        var decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); };\r\n        var obj = {};\r\n        match = search.exec(query);\r\n        while (match) {\r\n            obj[decode(match[1])] = decode(match[2]);\r\n            match = search.exec(query);\r\n        }\r\n        return obj;\r\n    };\r\n    return CryptoUtils;\r\n}());\r\n\r\n//# sourceMappingURL=CryptoUtils.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/utils/Constants.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n * @hidden\r\n * Constants\r\n */\r\nvar Constants = /** @class */ (function () {\r\n    function Constants() {\r\n    }\r\n    Object.defineProperty(Constants, "errorDescription", {\r\n        get: function () { return "error_description"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "error", {\r\n        get: function () { return "error"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "scope", {\r\n        get: function () { return "scope"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "clientInfo", {\r\n        get: function () { return "client_info"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "clientId", {\r\n        get: function () { return "clientId"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "idToken", {\r\n        get: function () { return "id_token"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "adalIdToken", {\r\n        get: function () { return "adal.idtoken"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "accessToken", {\r\n        get: function () { return "access_token"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "expiresIn", {\r\n        get: function () { return "expires_in"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "sessionState", {\r\n        get: function () { return "session_state"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "claims", {\r\n        get: function () { return "claims"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "msalClientInfo", {\r\n        get: function () { return "msal.client.info"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "msalError", {\r\n        get: function () { return "msal.error"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "msalErrorDescription", {\r\n        get: function () { return "msal.error.description"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "msalSessionState", {\r\n        get: function () { return "msal.session.state"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "tokenKeys", {\r\n        get: function () { return "msal.token.keys"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "accessTokenKey", {\r\n        get: function () { return "msal.access.token.key"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "expirationKey", {\r\n        get: function () { return "msal.expiration.key"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "stateLogin", {\r\n        get: function () { return "msal.state.login"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "stateAcquireToken", {\r\n        get: function () { return "msal.state.acquireToken"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "stateRenew", {\r\n        get: function () { return "msal.state.renew"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "nonceIdToken", {\r\n        get: function () { return "msal.nonce.idtoken"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "userName", {\r\n        get: function () { return "msal.username"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "idTokenKey", {\r\n        get: function () { return "msal.idtoken"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "loginRequest", {\r\n        get: function () { return "msal.login.request"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "loginError", {\r\n        get: function () { return "msal.login.error"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "renewStatus", {\r\n        get: function () { return "msal.token.renew.status"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "urlHash", {\r\n        get: function () { return "msal.urlHash"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "angularLoginRequest", {\r\n        get: function () { return "msal.angular.login.request"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "msal", {\r\n        get: function () { return "msal"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "no_account", {\r\n        get: function () { return "NO_ACCOUNT"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "consumersUtid", {\r\n        get: function () { return "9188040d-6c67-4c5b-b112-36a304b66dad"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "upn", {\r\n        get: function () { return "upn"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "prompt_select_account", {\r\n        get: function () { return "&prompt=select_account"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "prompt_none", {\r\n        get: function () { return "&prompt=none"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "prompt", {\r\n        get: function () { return "prompt"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "response_mode_fragment", {\r\n        get: function () { return "&response_mode=fragment"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "resourceDelimiter", {\r\n        get: function () { return "|"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "tokenRenewStatusCancelled", {\r\n        get: function () { return "Canceled"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "tokenRenewStatusCompleted", {\r\n        get: function () { return "Completed"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "tokenRenewStatusInProgress", {\r\n        get: function () { return "In Progress"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "popUpWidth", {\r\n        get: function () { return this._popUpWidth; },\r\n        set: function (width) {\r\n            this._popUpWidth = width;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "popUpHeight", {\r\n        get: function () { return this._popUpHeight; },\r\n        set: function (height) {\r\n            this._popUpHeight = height;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "login", {\r\n        get: function () { return "LOGIN"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "renewToken", {\r\n        get: function () { return "RENEW_TOKEN"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "unknown", {\r\n        get: function () { return "UNKNOWN"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "homeAccountIdentifier", {\r\n        get: function () { return "homeAccountIdentifier"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "common", {\r\n        get: function () { return "common"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "openidScope", {\r\n        get: function () { return "openid"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "profileScope", {\r\n        get: function () { return "profile"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "cacheLocationLocal", {\r\n        get: function () { return "localStorage"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "cacheLocationSession", {\r\n        get: function () { return "sessionStorage"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "interactionTypeRedirect", {\r\n        get: function () { return "redirectInteraction"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Constants, "interactionTypePopup", {\r\n        get: function () { return "popupInteraction"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Constants._popUpWidth = 483;\r\n    Constants._popUpHeight = 600;\r\n    return Constants;\r\n}());\r\n\r\n/**\r\n * @hidden\r\n * CacheKeys for \'authority\' and \'account\'\r\n */\r\nvar CacheKeys = {\r\n    AUTHORITY: "msal.authority",\r\n    ACQUIRE_TOKEN_ACCOUNT: "msal.acquireTokenAccount"\r\n};\r\nvar AADTrustedHostList = {\r\n    "login.windows.net": "login.windows.net",\r\n    "login.chinacloudapi.cn": "login.chinacloudapi.cn",\r\n    "login.cloudgovapi.us": "login.cloudgovapi.us",\r\n    "login.microsoftonline.com": "login.microsoftonline.com",\r\n    "login.microsoftonline.de": "login.microsoftonline.de",\r\n    "login.microsoftonline.us": "login.microsoftonline.us"\r\n};\r\n/**\r\n * @hidden\r\n * SSO Types - generated to populate hints\r\n */\r\nvar SSOTypes = {\r\n    ACCOUNT: "account",\r\n    SID: "sid",\r\n    LOGIN_HINT: "login_hint",\r\n    ID_TOKEN: "id_token",\r\n    DOMAIN_HINT: "domain_hint",\r\n    ORGANIZATIONS: "organizations",\r\n    CONSUMERS: "consumers",\r\n    ACCOUNT_ID: "accountIdentifier",\r\n    HOMEACCOUNT_ID: "homeAccountIdentifier",\r\n    LOGIN_REQ: "login_req",\r\n    DOMAIN_REQ: "domain_req"\r\n};\r\n/**\r\n * @hidden\r\n */\r\nvar BlacklistedEQParams = [\r\n    SSOTypes.SID,\r\n    SSOTypes.LOGIN_HINT\r\n];\r\n/**\r\n * we considered making this "enum" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic "string" type instead of the "enum"\r\n * @hidden\r\n */\r\nvar PromptState = {\r\n    LOGIN: "login",\r\n    SELECT_ACCOUNT: "select_account",\r\n    CONSENT: "consent",\r\n    NONE: "none",\r\n};\r\n/**\r\n * MSAL JS Library Version\r\n */\r\nfunction libraryVersion() {\r\n    return "1.1.3";\r\n}\r\n//# sourceMappingURL=Constants.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/ScopeSet.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar ScopeSet = /** @class */ (function () {\r\n    function ScopeSet() {\r\n    }\r\n    /**\r\n   * Check if there are dup scopes in a given request\r\n   *\r\n   * @param cachedScopes\r\n   * @param scopes\r\n   */\r\n    // TODO: Rename this, intersecting scopes isn\'t a great name for duplicate checker\r\n    ScopeSet.isIntersectingScopes = function (cachedScopes, scopes) {\r\n        cachedScopes = this.convertToLowerCase(cachedScopes);\r\n        for (var i = 0; i < scopes.length; i++) {\r\n            if (cachedScopes.indexOf(scopes[i].toLowerCase()) > -1) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Check if a given scope is present in the request\r\n     *\r\n     * @param cachedScopes\r\n     * @param scopes\r\n     */\r\n    ScopeSet.containsScope = function (cachedScopes, scopes) {\r\n        cachedScopes = this.convertToLowerCase(cachedScopes);\r\n        return scopes.every(function (value) { return cachedScopes.indexOf(value.toString().toLowerCase()) >= 0; });\r\n    };\r\n    /**\r\n     * toLower\r\n     *\r\n     * @param scopes\r\n     */\r\n    // TODO: Rename this, too generic name for a function that only deals with scopes\r\n    ScopeSet.convertToLowerCase = function (scopes) {\r\n        return scopes.map(function (scope) { return scope.toLowerCase(); });\r\n    };\r\n    /**\r\n     * remove one element from a scope array\r\n     *\r\n     * @param scopes\r\n     * @param scope\r\n     */\r\n    // TODO: Rename this, too generic name for a function that only deals with scopes\r\n    ScopeSet.removeElement = function (scopes, scope) {\r\n        return scopes.filter(function (value) { return value !== scope; });\r\n    };\r\n    /**\r\n     * Parse the scopes into a formatted scopeList\r\n     * @param scopes\r\n     */\r\n    ScopeSet.parseScope = function (scopes) {\r\n        var scopeList = "";\r\n        if (scopes) {\r\n            for (var i = 0; i < scopes.length; ++i) {\r\n                scopeList += (i !== scopes.length - 1) ? scopes[i] + " " : scopes[i];\r\n            }\r\n        }\r\n        return scopeList;\r\n    };\r\n    return ScopeSet;\r\n}());\r\n\r\n//# sourceMappingURL=ScopeSet.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/utils/StringUtils.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n * @hidden\r\n */\r\nvar StringUtils = /** @class */ (function () {\r\n    function StringUtils() {\r\n    }\r\n    /**\r\n     * Check if a string is empty\r\n     *\r\n     * @param str\r\n     */\r\n    StringUtils.isEmpty = function (str) {\r\n        return (typeof str === "undefined" || !str || 0 === str.length);\r\n    };\r\n    return StringUtils;\r\n}());\r\n\r\n//# sourceMappingURL=StringUtils.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/utils/UrlUtils.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\n\r\n/**\r\n * @hidden\r\n */\r\nvar UrlUtils_UrlUtils = /** @class */ (function () {\r\n    function UrlUtils() {\r\n    }\r\n    /**\r\n     * generates the URL with QueryString Parameters\r\n     * @param scopes\r\n     */\r\n    UrlUtils.createNavigateUrl = function (serverRequestParams) {\r\n        var str = this.createNavigationUrlString(serverRequestParams);\r\n        var authEndpoint = serverRequestParams.authorityInstance.AuthorizationEndpoint;\r\n        // if the endpoint already has queryparams, lets add to it, otherwise add the first one\r\n        if (authEndpoint.indexOf("?") < 0) {\r\n            authEndpoint += "?";\r\n        }\r\n        else {\r\n            authEndpoint += "&";\r\n        }\r\n        var requestUrl = "" + authEndpoint + str.join("&");\r\n        return requestUrl;\r\n    };\r\n    /**\r\n     * Generate the array of all QueryStringParams to be sent to the server\r\n     * @param scopes\r\n     */\r\n    UrlUtils.createNavigationUrlString = function (serverRequestParams) {\r\n        var scopes = serverRequestParams.scopes;\r\n        if (scopes.indexOf(serverRequestParams.clientId) === -1) {\r\n            scopes.push(serverRequestParams.clientId);\r\n        }\r\n        var str = [];\r\n        str.push("response_type=" + serverRequestParams.responseType);\r\n        this.translateclientIdUsedInScope(scopes, serverRequestParams.clientId);\r\n        str.push("scope=" + encodeURIComponent(ScopeSet.parseScope(scopes)));\r\n        str.push("client_id=" + encodeURIComponent(serverRequestParams.clientId));\r\n        str.push("redirect_uri=" + encodeURIComponent(serverRequestParams.redirectUri));\r\n        str.push("state=" + encodeURIComponent(serverRequestParams.state));\r\n        str.push("nonce=" + encodeURIComponent(serverRequestParams.nonce));\r\n        str.push("client_info=1");\r\n        str.push("x-client-SKU=" + serverRequestParams.xClientSku);\r\n        str.push("x-client-Ver=" + serverRequestParams.xClientVer);\r\n        if (serverRequestParams.promptValue) {\r\n            str.push("prompt=" + encodeURIComponent(serverRequestParams.promptValue));\r\n        }\r\n        if (serverRequestParams.claimsValue) {\r\n            str.push("claims=" + encodeURIComponent(serverRequestParams.claimsValue));\r\n        }\r\n        if (serverRequestParams.queryParameters) {\r\n            str.push(serverRequestParams.queryParameters);\r\n        }\r\n        if (serverRequestParams.extraQueryParameters) {\r\n            str.push(serverRequestParams.extraQueryParameters);\r\n        }\r\n        str.push("client-request-id=" + encodeURIComponent(serverRequestParams.correlationId));\r\n        return str;\r\n    };\r\n    /**\r\n     * append the required scopes: https://openid.net/specs/openid-connect-basic-1_0.html#Scopes\r\n     * @param scopes\r\n     */\r\n    UrlUtils.translateclientIdUsedInScope = function (scopes, clientId) {\r\n        var clientIdIndex = scopes.indexOf(clientId);\r\n        if (clientIdIndex >= 0) {\r\n            scopes.splice(clientIdIndex, 1);\r\n            if (scopes.indexOf("openid") === -1) {\r\n                scopes.push("openid");\r\n            }\r\n            if (scopes.indexOf("profile") === -1) {\r\n                scopes.push("profile");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns current window URL as redirect uri\r\n     */\r\n    UrlUtils.getDefaultRedirectUri = function () {\r\n        return window.location.href.split("?")[0].split("#")[0];\r\n    };\r\n    /**\r\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n     * @param href The url\r\n     * @param tenantId The tenant id to replace\r\n     */\r\n    UrlUtils.replaceTenantPath = function (url, tenantId) {\r\n        url = url.toLowerCase();\r\n        var urlObject = this.GetUrlComponents(url);\r\n        var pathArray = urlObject.PathSegments;\r\n        if (tenantId && (pathArray.length !== 0 && (pathArray[0] === Constants.common || pathArray[0] === SSOTypes.ORGANIZATIONS))) {\r\n            pathArray[0] = tenantId;\r\n        }\r\n        return this.constructAuthorityUriFromObject(urlObject, pathArray);\r\n    };\r\n    UrlUtils.constructAuthorityUriFromObject = function (urlObject, pathArray) {\r\n        return this.CanonicalizeUri(urlObject.Protocol + "//" + urlObject.HostNameAndPort + "/" + pathArray.join("/"));\r\n    };\r\n    /**\r\n     * Parses out the components from a url string.\r\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n     */\r\n    UrlUtils.GetUrlComponents = function (url) {\r\n        if (!url) {\r\n            throw "Url required";\r\n        }\r\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\r\n        var regEx = RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?");\r\n        var match = url.match(regEx);\r\n        if (!match || match.length < 6) {\r\n            throw "Valid url required";\r\n        }\r\n        var urlComponents = {\r\n            Protocol: match[1],\r\n            HostNameAndPort: match[4],\r\n            AbsolutePath: match[5]\r\n        };\r\n        var pathSegments = urlComponents.AbsolutePath.split("/");\r\n        pathSegments = pathSegments.filter(function (val) { return val && val.length > 0; }); // remove empty elements\r\n        urlComponents.PathSegments = pathSegments;\r\n        return urlComponents;\r\n    };\r\n    /**\r\n     * Given a url or path, append a trailing slash if one doesnt exist\r\n     *\r\n     * @param url\r\n     */\r\n    UrlUtils.CanonicalizeUri = function (url) {\r\n        if (url) {\r\n            url = url.toLowerCase();\r\n        }\r\n        if (url && !UrlUtils.endsWith(url, "/")) {\r\n            url += "/";\r\n        }\r\n        return url;\r\n    };\r\n    /**\r\n     * Checks to see if the url ends with the suffix\r\n     * Required because we are compiling for es5 instead of es6\r\n     * @param url\r\n     * @param str\r\n     */\r\n    // TODO: Rename this, not clear what it is supposed to do\r\n    UrlUtils.endsWith = function (url, suffix) {\r\n        if (!url || !suffix) {\r\n            return false;\r\n        }\r\n        return url.indexOf(suffix, url.length - suffix.length) !== -1;\r\n    };\r\n    /**\r\n     * Utils function to remove the login_hint and domain_hint from the i/p extraQueryParameters\r\n     * @param url\r\n     * @param name\r\n     */\r\n    UrlUtils.urlRemoveQueryStringParameter = function (url, name) {\r\n        if (StringUtils.isEmpty(url)) {\r\n            return url;\r\n        }\r\n        var regex = new RegExp("(\\\\&" + name + "=)[^\\&]+");\r\n        url = url.replace(regex, "");\r\n        // name=value&\r\n        regex = new RegExp("(" + name + "=)[^\\&]+&");\r\n        url = url.replace(regex, "");\r\n        // name=value\r\n        regex = new RegExp("(" + name + "=)[^\\&]+");\r\n        url = url.replace(regex, "");\r\n        return url;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * Returns the anchor part(#) of the URL\r\n     */\r\n    UrlUtils.getHashFromUrl = function (urlStringOrFragment) {\r\n        var hashIndex1 = urlStringOrFragment.indexOf("#");\r\n        var hashIndex2 = urlStringOrFragment.indexOf("#/");\r\n        if (hashIndex2 > -1) {\r\n            return urlStringOrFragment.substring(hashIndex2 + 2);\r\n        }\r\n        else if (hashIndex1 > -1) {\r\n            return urlStringOrFragment.substring(hashIndex1 + 1);\r\n        }\r\n        return urlStringOrFragment;\r\n    };\r\n    return UrlUtils;\r\n}());\r\n\r\n//# sourceMappingURL=UrlUtils.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/AccessTokenKey.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\n/**\r\n * @hidden\r\n */\r\nvar AccessTokenKey_AccessTokenKey = /** @class */ (function () {\r\n    function AccessTokenKey(authority, clientId, scopes, uid, utid) {\r\n        this.authority = UrlUtils_UrlUtils.CanonicalizeUri(authority);\r\n        this.clientId = clientId;\r\n        this.scopes = scopes;\r\n        this.homeAccountIdentifier = CryptoUtils.base64Encode(uid) + "." + CryptoUtils.base64Encode(utid);\r\n    }\r\n    return AccessTokenKey;\r\n}());\r\n\r\n//# sourceMappingURL=AccessTokenKey.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/AccessTokenValue.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n * @hidden\r\n */\r\nvar AccessTokenValue = /** @class */ (function () {\r\n    function AccessTokenValue(accessToken, idToken, expiresIn, homeAccountIdentifier) {\r\n        this.accessToken = accessToken;\r\n        this.idToken = idToken;\r\n        this.expiresIn = expiresIn;\r\n        this.homeAccountIdentifier = homeAccountIdentifier;\r\n    }\r\n    return AccessTokenValue;\r\n}());\r\n\r\n//# sourceMappingURL=AccessTokenValue.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/error/AuthError.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nvar AuthErrorMessage = {\r\n    unexpectedError: {\r\n        code: "unexpected_error",\r\n        desc: "Unexpected error in authentication."\r\n    }\r\n};\r\n/**\r\n* General error class thrown by the MSAL.js library.\r\n*/\r\nvar AuthError_AuthError = /** @class */ (function (_super) {\r\n    __extends(AuthError, _super);\r\n    function AuthError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorMessage) || this;\r\n        Object.setPrototypeOf(_this, AuthError.prototype);\r\n        _this.errorCode = errorCode;\r\n        _this.errorMessage = errorMessage;\r\n        _this.name = "AuthError";\r\n        return _this;\r\n    }\r\n    AuthError.createUnexpectedError = function (errDesc) {\r\n        return new AuthError(AuthErrorMessage.unexpectedError.code, AuthErrorMessage.unexpectedError.desc + ": " + errDesc);\r\n    };\r\n    return AuthError;\r\n}(Error));\r\n\r\n//# sourceMappingURL=AuthError.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/error/ClientAuthError.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\n\r\nvar ClientAuthErrorMessage = {\r\n    multipleMatchingTokens: {\r\n        code: "multiple_matching_tokens",\r\n        desc: "The cache contains multiple tokens satisfying the requirements. " +\r\n            "Call AcquireToken again providing more requirements like authority."\r\n    },\r\n    multipleCacheAuthorities: {\r\n        code: "multiple_authorities",\r\n        desc: "Multiple authorities found in the cache. Pass authority in the API overload."\r\n    },\r\n    endpointResolutionError: {\r\n        code: "endpoints_resolution_error",\r\n        desc: "Error: could not resolve endpoints. Please check network and try again."\r\n    },\r\n    popUpWindowError: {\r\n        code: "popup_window_error",\r\n        desc: "Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser."\r\n    },\r\n    tokenRenewalError: {\r\n        code: "token_renewal_error",\r\n        desc: "Token renewal operation failed due to timeout."\r\n    },\r\n    invalidIdToken: {\r\n        code: "invalid_id_token",\r\n        desc: "Invalid ID token format."\r\n    },\r\n    invalidStateError: {\r\n        code: "invalid_state_error",\r\n        desc: "Invalid state."\r\n    },\r\n    nonceMismatchError: {\r\n        code: "nonce_mismatch_error",\r\n        desc: "Nonce is not matching, Nonce received: "\r\n    },\r\n    loginProgressError: {\r\n        code: "login_progress_error",\r\n        desc: "Login_In_Progress: Error during login call - login is already in progress."\r\n    },\r\n    acquireTokenProgressError: {\r\n        code: "acquiretoken_progress_error",\r\n        desc: "AcquireToken_In_Progress: Error during login call - login is already in progress."\r\n    },\r\n    userCancelledError: {\r\n        code: "user_cancelled",\r\n        desc: "User cancelled the flow."\r\n    },\r\n    callbackError: {\r\n        code: "callback_error",\r\n        desc: "Error occurred in token received callback function."\r\n    },\r\n    userLoginRequiredError: {\r\n        code: "user_login_error",\r\n        desc: "User login is required."\r\n    },\r\n    userDoesNotExistError: {\r\n        code: "user_non_existent",\r\n        desc: "User object does not exist. Please call a login API."\r\n    },\r\n    clientInfoDecodingError: {\r\n        code: "client_info_decoding_error",\r\n        desc: "The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause."\r\n    },\r\n    clientInfoNotPopulatedError: {\r\n        code: "client_info_not_populated_error",\r\n        desc: "The service did not populate client_info in the response, Please verify with the service team"\r\n    },\r\n    nullOrEmptyIdToken: {\r\n        code: "null_or_empty_id_token",\r\n        desc: "The idToken is null or empty. Please review the trace to determine the root cause."\r\n    },\r\n    idTokenNotParsed: {\r\n        code: "id_token_parsing_error",\r\n        desc: "ID token cannot be parsed. Please review stack trace to determine root cause."\r\n    },\r\n    tokenEncodingError: {\r\n        code: "token_encoding_error",\r\n        desc: "The token to be decoded is not encoded correctly."\r\n    },\r\n    invalidInteractionType: {\r\n        code: "invalid_interaction_type",\r\n        desc: "The interaction type passed to the handler was incorrect or unknown"\r\n    }\r\n};\r\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\r\nvar ClientAuthError_ClientAuthError = /** @class */ (function (_super) {\r\n    __extends(ClientAuthError, _super);\r\n    function ClientAuthError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorCode, errorMessage) || this;\r\n        _this.name = "ClientAuthError";\r\n        Object.setPrototypeOf(_this, ClientAuthError.prototype);\r\n        return _this;\r\n    }\r\n    ClientAuthError.createEndpointResolutionError = function (errDetail) {\r\n        var errorMessage = ClientAuthErrorMessage.endpointResolutionError.desc;\r\n        if (errDetail && !StringUtils.isEmpty(errDetail)) {\r\n            errorMessage += " Details: " + errDetail;\r\n        }\r\n        return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, errorMessage);\r\n    };\r\n    ClientAuthError.createMultipleMatchingTokensInCacheError = function (scope) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, "Cache error for scope " + scope + ": " + ClientAuthErrorMessage.multipleMatchingTokens.desc + ".");\r\n    };\r\n    ClientAuthError.createMultipleAuthoritiesInCacheError = function (scope) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleCacheAuthorities.code, "Cache error for scope " + scope + ": " + ClientAuthErrorMessage.multipleCacheAuthorities.desc + ".");\r\n    };\r\n    ClientAuthError.createPopupWindowError = function (errDetail) {\r\n        var errorMessage = ClientAuthErrorMessage.popUpWindowError.desc;\r\n        if (errDetail && !StringUtils.isEmpty(errDetail)) {\r\n            errorMessage += " Details: " + errDetail;\r\n        }\r\n        return new ClientAuthError(ClientAuthErrorMessage.popUpWindowError.code, errorMessage);\r\n    };\r\n    ClientAuthError.createTokenRenewalTimeoutError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRenewalError.code, ClientAuthErrorMessage.tokenRenewalError.desc);\r\n    };\r\n    ClientAuthError.createInvalidIdTokenError = function (idToken) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidIdToken.code, ClientAuthErrorMessage.invalidIdToken.desc + " Given token: " + idToken);\r\n    };\r\n    //TODO: Is this not a security flaw to send the user the state expected??\r\n    ClientAuthError.createInvalidStateError = function (invalidState, actualState) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code, ClientAuthErrorMessage.invalidStateError.desc + " " + invalidState + ", state expected : " + actualState + ".");\r\n    };\r\n    //TODO: Is this not a security flaw to send the user the Nonce expected??\r\n    ClientAuthError.createNonceMismatchError = function (invalidNonce, actualNonce) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc + " " + invalidNonce + ", nonce expected : " + actualNonce + ".");\r\n    };\r\n    ClientAuthError.createLoginInProgressError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.loginProgressError.code, ClientAuthErrorMessage.loginProgressError.desc);\r\n    };\r\n    ClientAuthError.createAcquireTokenInProgressError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.acquireTokenProgressError.code, ClientAuthErrorMessage.acquireTokenProgressError.desc);\r\n    };\r\n    ClientAuthError.createUserCancelledError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.userCancelledError.code, ClientAuthErrorMessage.userCancelledError.desc);\r\n    };\r\n    ClientAuthError.createErrorInCallbackFunction = function (errorDesc) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.callbackError.code, ClientAuthErrorMessage.callbackError.desc + " " + errorDesc + ".");\r\n    };\r\n    ClientAuthError.createUserLoginRequiredError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.userLoginRequiredError.code, ClientAuthErrorMessage.userLoginRequiredError.desc);\r\n    };\r\n    ClientAuthError.createUserDoesNotExistError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.userDoesNotExistError.code, ClientAuthErrorMessage.userDoesNotExistError.desc);\r\n    };\r\n    ClientAuthError.createClientInfoDecodingError = function (caughtError) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, ClientAuthErrorMessage.clientInfoDecodingError.desc + " Failed with error: " + caughtError);\r\n    };\r\n    ClientAuthError.createClientInfoNotPopulatedError = function (caughtError) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoNotPopulatedError.code, ClientAuthErrorMessage.clientInfoNotPopulatedError.desc + " Failed with error: " + caughtError);\r\n    };\r\n    ClientAuthError.createIdTokenNullOrEmptyError = function (invalidRawTokenString) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyIdToken.code, ClientAuthErrorMessage.nullOrEmptyIdToken.desc + " Raw ID Token Value: " + invalidRawTokenString);\r\n    };\r\n    ClientAuthError.createIdTokenParsingError = function (caughtParsingError) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.idTokenNotParsed.code, ClientAuthErrorMessage.idTokenNotParsed.desc + " Failed with error: " + caughtParsingError);\r\n    };\r\n    ClientAuthError.createTokenEncodingError = function (incorrectlyEncodedToken) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenEncodingError.code, ClientAuthErrorMessage.tokenEncodingError.desc + " Attempted to decode: " + incorrectlyEncodedToken);\r\n    };\r\n    ClientAuthError.createInvalidInteractionTypeError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidInteractionType.code, ClientAuthErrorMessage.invalidInteractionType.desc);\r\n    };\r\n    return ClientAuthError;\r\n}(AuthError_AuthError));\r\n\r\n//# sourceMappingURL=ClientAuthError.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/error/ClientConfigurationError.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\n\r\nvar ClientConfigurationErrorMessage = {\r\n    configurationNotSet: {\r\n        code: "no_config_set",\r\n        desc: "Configuration has not been set. Please call the UserAgentApplication constructor with a valid Configuration object."\r\n    },\r\n    invalidCacheLocation: {\r\n        code: "invalid_cache_location",\r\n        desc: "The cache location provided is not valid."\r\n    },\r\n    noStorageSupported: {\r\n        code: "browser_storage_not_supported",\r\n        desc: "localStorage and sessionStorage are not supported."\r\n    },\r\n    noRedirectCallbacksSet: {\r\n        code: "no_redirect_callbacks",\r\n        desc: "No redirect callbacks have been set. Please call setRedirectCallbacks() with the appropriate function arguments before continuing. " +\r\n            "More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."\r\n    },\r\n    invalidCallbackObject: {\r\n        code: "invalid_callback_object",\r\n        desc: "The object passed for the callback was invalid. " +\r\n            "More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."\r\n    },\r\n    scopesRequired: {\r\n        code: "scopes_required",\r\n        desc: "Scopes are required to obtain an access token."\r\n    },\r\n    emptyScopes: {\r\n        code: "empty_input_scopes_error",\r\n        desc: "Scopes cannot be passed as empty array."\r\n    },\r\n    nonArrayScopes: {\r\n        code: "nonarray_input_scopes_error",\r\n        desc: "Scopes cannot be passed as non-array."\r\n    },\r\n    clientScope: {\r\n        code: "clientid_input_scopes_error",\r\n        desc: "Client ID can only be provided as a single scope."\r\n    },\r\n    invalidPrompt: {\r\n        code: "invalid_prompt_value",\r\n        desc: "Supported prompt values are \'login\', \'select_account\', \'consent\' and \'none\'",\r\n    },\r\n    invalidAuthorityType: {\r\n        code: "invalid_authority_type",\r\n        desc: "The given authority is not a valid type of authority supported by MSAL. Please see here for valid authorities: <insert URL here>."\r\n    },\r\n    authorityUriInsecure: {\r\n        code: "authority_uri_insecure",\r\n        desc: "Authority URIs must use https."\r\n    },\r\n    authorityUriInvalidPath: {\r\n        code: "authority_uri_invalid_path",\r\n        desc: "Given authority URI is invalid."\r\n    },\r\n    unsupportedAuthorityValidation: {\r\n        code: "unsupported_authority_validation",\r\n        desc: "The authority validation is not supported for this authority type."\r\n    },\r\n    b2cAuthorityUriInvalidPath: {\r\n        code: "b2c_authority_uri_invalid_path",\r\n        desc: "The given URI for the B2C authority is invalid."\r\n    },\r\n    claimsRequestParsingError: {\r\n        code: "claims_request_parsing_error",\r\n        desc: "Could not parse the given claims request object."\r\n    },\r\n    emptyRequestError: {\r\n        code: "empty_request_error",\r\n        desc: "Request object is required."\r\n    },\r\n    telemetryConfigError: {\r\n        code: "telemetry_config_error",\r\n        desc: "Telemetry config is not configured with required values"\r\n    }\r\n};\r\n/**\r\n * Error thrown when there is an error in configuration of the .js library.\r\n */\r\nvar ClientConfigurationError_ClientConfigurationError = /** @class */ (function (_super) {\r\n    __extends(ClientConfigurationError, _super);\r\n    function ClientConfigurationError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorCode, errorMessage) || this;\r\n        _this.name = "ClientConfigurationError";\r\n        Object.setPrototypeOf(_this, ClientConfigurationError.prototype);\r\n        return _this;\r\n    }\r\n    ClientConfigurationError.createNoSetConfigurationError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.configurationNotSet.code, "" + ClientConfigurationErrorMessage.configurationNotSet.desc);\r\n    };\r\n    ClientConfigurationError.createInvalidCacheLocationConfigError = function (givenCacheLocation) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCacheLocation.code, ClientConfigurationErrorMessage.invalidCacheLocation.desc + " Provided value: " + givenCacheLocation + ". Possible values are: " + Constants.cacheLocationLocal + ", " + Constants.cacheLocationSession + ".");\r\n    };\r\n    ClientConfigurationError.createNoStorageSupportedError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.noStorageSupported.code, ClientConfigurationErrorMessage.noStorageSupported.desc);\r\n    };\r\n    ClientConfigurationError.createRedirectCallbacksNotSetError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.noRedirectCallbacksSet.code, ClientConfigurationErrorMessage.noRedirectCallbacksSet.desc);\r\n    };\r\n    ClientConfigurationError.createInvalidCallbackObjectError = function (callbackObject) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCallbackObject.code, ClientConfigurationErrorMessage.invalidCallbackObject.desc + " Given value for callback function: " + callbackObject);\r\n    };\r\n    ClientConfigurationError.createEmptyScopesArrayError = function (scopesValue) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopes.code, ClientConfigurationErrorMessage.emptyScopes.desc + " Given value: " + scopesValue + ".");\r\n    };\r\n    ClientConfigurationError.createScopesNonArrayError = function (scopesValue) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.nonArrayScopes.code, ClientConfigurationErrorMessage.nonArrayScopes.desc + " Given value: " + scopesValue + ".");\r\n    };\r\n    ClientConfigurationError.createClientIdSingleScopeError = function (scopesValue) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.clientScope.code, ClientConfigurationErrorMessage.clientScope.desc + " Given value: " + scopesValue + ".");\r\n    };\r\n    ClientConfigurationError.createScopesRequiredError = function (scopesValue) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.scopesRequired.code, ClientConfigurationErrorMessage.scopesRequired.desc + " Given value: " + scopesValue);\r\n    };\r\n    ClientConfigurationError.createInvalidPromptError = function (promptValue) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code, ClientConfigurationErrorMessage.invalidPrompt.desc + " Given value: " + promptValue);\r\n    };\r\n    ClientConfigurationError.createClaimsRequestParsingError = function (claimsRequestParseError) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code, ClientConfigurationErrorMessage.claimsRequestParsingError.desc + " Given value: " + claimsRequestParseError);\r\n    };\r\n    ClientConfigurationError.createEmptyRequestError = function () {\r\n        var _a = ClientConfigurationErrorMessage.emptyRequestError, code = _a.code, desc = _a.desc;\r\n        return new ClientConfigurationError(code, desc);\r\n    };\r\n    ClientConfigurationError.createTelemetryConfigError = function (config) {\r\n        var _a = ClientConfigurationErrorMessage.telemetryConfigError, code = _a.code, desc = _a.desc;\r\n        var requiredKeys = {\r\n            applicationName: "string",\r\n            applicationVersion: "string",\r\n            telemetryEmitter: "function"\r\n        };\r\n        var missingKeys = Object.keys(requiredKeys)\r\n            .reduce(function (keys, key) {\r\n            return config[key] ? keys : keys.concat([key + " (" + requiredKeys[key] + ")"]);\r\n        }, []);\r\n        return new ClientConfigurationError(code, desc + " mising values: " + missingKeys.join(","));\r\n    };\r\n    return ClientConfigurationError;\r\n}(ClientAuthError_ClientAuthError));\r\n\r\n//# sourceMappingURL=ClientConfigurationError.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/AuthenticationParameters.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nfunction validateClaimsRequest(request) {\r\n    if (!request.claimsRequest) {\r\n        return;\r\n    }\r\n    var claims;\r\n    try {\r\n        claims = JSON.parse(request.claimsRequest);\r\n    }\r\n    catch (e) {\r\n        throw ClientConfigurationError_ClientConfigurationError.createClaimsRequestParsingError(e);\r\n    }\r\n    // TODO: More validation will be added when the server team tells us how they have actually implemented claims\r\n}\r\n//# sourceMappingURL=AuthenticationParameters.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/ServerRequestParameters.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Nonce: OIDC Nonce definition: https://openid.net/specs/openid-connect-core-1_0.html#IDToken\r\n * State: OAuth Spec: https://tools.ietf.org/html/rfc6749#section-10.12\r\n * @hidden\r\n */\r\nvar ServerRequestParameters_ServerRequestParameters = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     * @param authority\r\n     * @param clientId\r\n     * @param scope\r\n     * @param responseType\r\n     * @param redirectUri\r\n     * @param state\r\n     */\r\n    function ServerRequestParameters(authority, clientId, scope, responseType, redirectUri, state) {\r\n        this.authorityInstance = authority;\r\n        this.clientId = clientId;\r\n        if (!scope) {\r\n            this.scopes = [clientId];\r\n        }\r\n        else {\r\n            this.scopes = scope.slice();\r\n        }\r\n        this.nonce = CryptoUtils.createNewGuid();\r\n        this.state = state && !StringUtils.isEmpty(state) ? CryptoUtils.createNewGuid() + "|" + state : CryptoUtils.createNewGuid();\r\n        // TODO: Change this to user passed vs generated with the new PR\r\n        this.correlationId = CryptoUtils.createNewGuid();\r\n        // telemetry information\r\n        this.xClientSku = "MSAL.JS";\r\n        this.xClientVer = libraryVersion();\r\n        this.responseType = responseType;\r\n        this.redirectUri = redirectUri;\r\n    }\r\n    Object.defineProperty(ServerRequestParameters.prototype, "authority", {\r\n        get: function () {\r\n            return this.authorityInstance ? this.authorityInstance.CanonicalAuthority : null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * Utility to populate QueryParameters and ExtraQueryParameters to ServerRequestParamerers\r\n     * @param request\r\n     * @param serverAuthenticationRequest\r\n     */\r\n    ServerRequestParameters.prototype.populateQueryParams = function (account, request, adalIdTokenObject) {\r\n        var queryParameters = {};\r\n        if (request) {\r\n            // add the prompt parameter to serverRequestParameters if passed\r\n            if (request.prompt) {\r\n                this.validatePromptParameter(request.prompt);\r\n                this.promptValue = request.prompt;\r\n            }\r\n            // Add claims challenge to serverRequestParameters if passed\r\n            if (request.claimsRequest) {\r\n                validateClaimsRequest(request);\r\n                this.claimsValue = request.claimsRequest;\r\n            }\r\n            // if the developer provides one of these, give preference to developer choice\r\n            if (ServerRequestParameters.isSSOParam(request)) {\r\n                queryParameters = this.constructUnifiedCacheQueryParameter(request, null);\r\n            }\r\n        }\r\n        if (adalIdTokenObject) {\r\n            queryParameters = this.constructUnifiedCacheQueryParameter(null, adalIdTokenObject);\r\n        }\r\n        // adds sid/login_hint if not populated; populates domain_req, login_req and domain_hint\r\n        // this.logger.verbose("Calling addHint parameters");\r\n        queryParameters = this.addHintParameters(account, queryParameters);\r\n        // sanity check for developer passed extraQueryParameters\r\n        var eQParams;\r\n        if (request) {\r\n            eQParams = this.sanitizeEQParams(request);\r\n        }\r\n        // Populate the extraQueryParameters to be sent to the server\r\n        this.queryParameters = ServerRequestParameters.generateQueryParametersString(queryParameters);\r\n        this.extraQueryParameters = ServerRequestParameters.generateQueryParametersString(eQParams);\r\n    };\r\n    //#region QueryParam helpers\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * Utility to test if valid prompt value is passed in the request\r\n     * @param request\r\n     */\r\n    ServerRequestParameters.prototype.validatePromptParameter = function (prompt) {\r\n        if (!([PromptState.LOGIN, PromptState.SELECT_ACCOUNT, PromptState.CONSENT, PromptState.NONE].indexOf(prompt) >= 0)) {\r\n            throw ClientConfigurationError_ClientConfigurationError.createInvalidPromptError(prompt);\r\n        }\r\n    };\r\n    /**\r\n     * Constructs extraQueryParameters to be sent to the server for the AuthenticationParameters set by the developer\r\n     * in any login() or acquireToken() calls\r\n     * @param idTokenObject\r\n     * @param extraQueryParameters\r\n     * @param sid\r\n     * @param loginHint\r\n     */\r\n    //TODO: check how this behaves when domain_hint only is sent in extraparameters and idToken has no upn.\r\n    ServerRequestParameters.prototype.constructUnifiedCacheQueryParameter = function (request, idTokenObject) {\r\n        // preference order: account > sid > login_hint\r\n        var ssoType;\r\n        var ssoData;\r\n        var serverReqParam = {};\r\n        // if account info is passed, account.sid > account.login_hint\r\n        if (request) {\r\n            if (request.account) {\r\n                var account = request.account;\r\n                if (account.sid) {\r\n                    ssoType = SSOTypes.SID;\r\n                    ssoData = account.sid;\r\n                }\r\n                else if (account.userName) {\r\n                    ssoType = SSOTypes.LOGIN_HINT;\r\n                    ssoData = account.userName;\r\n                }\r\n            }\r\n            // sid from request\r\n            else if (request.sid) {\r\n                ssoType = SSOTypes.SID;\r\n                ssoData = request.sid;\r\n            }\r\n            // loginHint from request\r\n            else if (request.loginHint) {\r\n                ssoType = SSOTypes.LOGIN_HINT;\r\n                ssoData = request.loginHint;\r\n            }\r\n        }\r\n        // adalIdToken retrieved from cache\r\n        else if (idTokenObject) {\r\n            if (idTokenObject.hasOwnProperty(Constants.upn)) {\r\n                ssoType = SSOTypes.ID_TOKEN;\r\n                ssoData = idTokenObject.upn;\r\n            }\r\n            else {\r\n                ssoType = SSOTypes.ORGANIZATIONS;\r\n                ssoData = null;\r\n            }\r\n        }\r\n        serverReqParam = this.addSSOParameter(ssoType, ssoData);\r\n        // add the HomeAccountIdentifier info/ domain_hint\r\n        if (request && request.account && request.account.homeAccountIdentifier) {\r\n            serverReqParam = this.addSSOParameter(SSOTypes.HOMEACCOUNT_ID, request.account.homeAccountIdentifier, serverReqParam);\r\n        }\r\n        return serverReqParam;\r\n    };\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Adds login_hint to authorization URL which is used to pre-fill the username field of sign in page for the user if known ahead of time\r\n     * domain_hint can be one of users/organizations which when added skips the email based discovery process of the user\r\n     * domain_req utid received as part of the clientInfo\r\n     * login_req uid received as part of clientInfo\r\n     * Also does a sanity check for extraQueryParameters passed by the user to ensure no repeat queryParameters\r\n     *\r\n     * @param {@link Account} account - Account for which the token is requested\r\n     * @param queryparams\r\n     * @param {@link ServerRequestParameters}\r\n     * @ignore\r\n     */\r\n    ServerRequestParameters.prototype.addHintParameters = function (account, qParams) {\r\n        // This is a final check for all queryParams added so far; preference order: sid > login_hint\r\n        // sid cannot be passed along with login_hint or domain_hint, hence we check both are not populated yet in queryParameters\r\n        if (account && !qParams[SSOTypes.SID]) {\r\n            // sid - populate only if login_hint is not already populated and the account has sid\r\n            var populateSID = !qParams[SSOTypes.LOGIN_HINT] && account.sid && this.promptValue === PromptState.NONE;\r\n            if (populateSID) {\r\n                qParams = this.addSSOParameter(SSOTypes.SID, account.sid, qParams);\r\n            }\r\n            // login_hint - account.userName\r\n            else {\r\n                var populateLoginHint = !qParams[SSOTypes.LOGIN_HINT] && account.userName && !StringUtils.isEmpty(account.userName);\r\n                if (populateLoginHint) {\r\n                    qParams = this.addSSOParameter(SSOTypes.LOGIN_HINT, account.userName, qParams);\r\n                }\r\n            }\r\n            var populateReqParams = !qParams[SSOTypes.DOMAIN_REQ] && !qParams[SSOTypes.LOGIN_REQ];\r\n            if (populateReqParams) {\r\n                qParams = this.addSSOParameter(SSOTypes.HOMEACCOUNT_ID, account.homeAccountIdentifier, qParams);\r\n            }\r\n        }\r\n        return qParams;\r\n    };\r\n    /**\r\n     * Add SID to extraQueryParameters\r\n     * @param sid\r\n     */\r\n    ServerRequestParameters.prototype.addSSOParameter = function (ssoType, ssoData, ssoParam) {\r\n        if (!ssoParam) {\r\n            ssoParam = {};\r\n        }\r\n        if (!ssoData) {\r\n            return ssoParam;\r\n        }\r\n        switch (ssoType) {\r\n            case SSOTypes.SID: {\r\n                ssoParam[SSOTypes.SID] = ssoData;\r\n                break;\r\n            }\r\n            case SSOTypes.ID_TOKEN: {\r\n                ssoParam[SSOTypes.LOGIN_HINT] = ssoData;\r\n                ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.ORGANIZATIONS;\r\n                break;\r\n            }\r\n            case SSOTypes.LOGIN_HINT: {\r\n                ssoParam[SSOTypes.LOGIN_HINT] = ssoData;\r\n                break;\r\n            }\r\n            case SSOTypes.ORGANIZATIONS: {\r\n                ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.ORGANIZATIONS;\r\n                break;\r\n            }\r\n            case SSOTypes.CONSUMERS: {\r\n                ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.CONSUMERS;\r\n                break;\r\n            }\r\n            case SSOTypes.HOMEACCOUNT_ID: {\r\n                var homeAccountId = ssoData.split(".");\r\n                var uid = CryptoUtils.base64Decode(homeAccountId[0]);\r\n                var utid = CryptoUtils.base64Decode(homeAccountId[1]);\r\n                // TODO: domain_req and login_req are not needed according to eSTS team\r\n                ssoParam[SSOTypes.LOGIN_REQ] = uid;\r\n                ssoParam[SSOTypes.DOMAIN_REQ] = utid;\r\n                if (utid === Constants.consumersUtid) {\r\n                    ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.CONSUMERS;\r\n                }\r\n                else {\r\n                    ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.ORGANIZATIONS;\r\n                }\r\n                break;\r\n            }\r\n            case SSOTypes.LOGIN_REQ: {\r\n                ssoParam[SSOTypes.LOGIN_REQ] = ssoData;\r\n                break;\r\n            }\r\n            case SSOTypes.DOMAIN_REQ: {\r\n                ssoParam[SSOTypes.DOMAIN_REQ] = ssoData;\r\n                break;\r\n            }\r\n        }\r\n        return ssoParam;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     * Removes unnecessary or duplicate query parameters from extraQueryParameters\r\n     * @param request\r\n     */\r\n    ServerRequestParameters.prototype.sanitizeEQParams = function (request) {\r\n        var eQParams = request.extraQueryParameters;\r\n        if (!eQParams) {\r\n            return null;\r\n        }\r\n        if (request.claimsRequest) {\r\n            // this.logger.warning("Removed duplicate claims from extraQueryParameters. Please use either the claimsRequest field OR pass as extraQueryParameter - not both.");\r\n            delete eQParams[Constants.claims];\r\n        }\r\n        BlacklistedEQParams.forEach(function (param) {\r\n            if (eQParams[param]) {\r\n                // this.logger.warning("Removed duplicate " + param + " from extraQueryParameters. Please use the " + param + " field in request object.");\r\n                delete eQParams[param];\r\n            }\r\n        });\r\n        return eQParams;\r\n    };\r\n    /**\r\n     * Utility to generate a QueryParameterString from a Key-Value mapping of extraQueryParameters passed\r\n     * @param extraQueryParameters\r\n     */\r\n    ServerRequestParameters.generateQueryParametersString = function (queryParameters) {\r\n        var paramsString = null;\r\n        if (queryParameters) {\r\n            Object.keys(queryParameters).forEach(function (key) {\r\n                if (paramsString == null) {\r\n                    paramsString = key + "=" + encodeURIComponent(queryParameters[key]);\r\n                }\r\n                else {\r\n                    paramsString += "&" + key + "=" + encodeURIComponent(queryParameters[key]);\r\n                }\r\n            });\r\n        }\r\n        return paramsString;\r\n    };\r\n    //#endregion\r\n    /**\r\n     * Check to see if there are SSO params set in the Request\r\n     * @param request\r\n     */\r\n    ServerRequestParameters.isSSOParam = function (request) {\r\n        return request && (request.account || request.sid || request.loginHint);\r\n    };\r\n    return ServerRequestParameters;\r\n}());\r\n\r\n//# sourceMappingURL=ServerRequestParameters.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/ClientInfo.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\n\r\n/**\r\n * @hidden\r\n */\r\nvar ClientInfo_ClientInfo = /** @class */ (function () {\r\n    function ClientInfo(rawClientInfo) {\r\n        if (!rawClientInfo || StringUtils.isEmpty(rawClientInfo)) {\r\n            this.uid = "";\r\n            this.utid = "";\r\n            return;\r\n        }\r\n        try {\r\n            var decodedClientInfo = CryptoUtils.base64Decode(rawClientInfo);\r\n            var clientInfo = JSON.parse(decodedClientInfo);\r\n            if (clientInfo) {\r\n                if (clientInfo.hasOwnProperty("uid")) {\r\n                    this.uid = clientInfo.uid;\r\n                }\r\n                if (clientInfo.hasOwnProperty("utid")) {\r\n                    this.utid = clientInfo.utid;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            throw ClientAuthError_ClientAuthError.createClientInfoDecodingError(e);\r\n        }\r\n    }\r\n    Object.defineProperty(ClientInfo.prototype, "uid", {\r\n        get: function () {\r\n            return this._uid ? this._uid : "";\r\n        },\r\n        set: function (uid) {\r\n            this._uid = uid;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClientInfo.prototype, "utid", {\r\n        get: function () {\r\n            return this._utid ? this._utid : "";\r\n        },\r\n        set: function (utid) {\r\n            this._utid = utid;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ClientInfo;\r\n}());\r\n\r\n//# sourceMappingURL=ClientInfo.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/utils/TokenUtils.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\n/**\r\n * @hidden\r\n */\r\nvar TokenUtils_TokenUtils = /** @class */ (function () {\r\n    function TokenUtils() {\r\n    }\r\n    /**\r\n     * decode a JWT\r\n     *\r\n     * @param jwtToken\r\n     */\r\n    TokenUtils.decodeJwt = function (jwtToken) {\r\n        if (StringUtils.isEmpty(jwtToken)) {\r\n            return null;\r\n        }\r\n        var idTokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\r\n        var matches = idTokenPartsRegex.exec(jwtToken);\r\n        if (!matches || matches.length < 4) {\r\n            //this._requestContext.logger.warn("The returned id_token is not parseable.");\r\n            return null;\r\n        }\r\n        var crackedToken = {\r\n            header: matches[1],\r\n            JWSPayload: matches[2],\r\n            JWSSig: matches[3]\r\n        };\r\n        return crackedToken;\r\n    };\r\n    /**\r\n     * Extract IdToken by decoding the RAWIdToken\r\n     *\r\n     * @param encodedIdToken\r\n     */\r\n    TokenUtils.extractIdToken = function (encodedIdToken) {\r\n        // id token will be decoded to get the username\r\n        var decodedToken = this.decodeJwt(encodedIdToken);\r\n        if (!decodedToken) {\r\n            return null;\r\n        }\r\n        try {\r\n            var base64IdToken = decodedToken.JWSPayload;\r\n            var base64Decoded = CryptoUtils.base64Decode(base64IdToken);\r\n            if (!base64Decoded) {\r\n                //this._requestContext.logger.info("The returned id_token could not be base64 url safe decoded.");\r\n                return null;\r\n            }\r\n            // ECMA script has JSON built-in support\r\n            return JSON.parse(base64Decoded);\r\n        }\r\n        catch (err) {\r\n            //this._requestContext.logger.error("The returned id_token could not be decoded" + err);\r\n        }\r\n        return null;\r\n    };\r\n    return TokenUtils;\r\n}());\r\n\r\n//# sourceMappingURL=TokenUtils.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/IdToken.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\n\r\n/**\r\n * @hidden\r\n */\r\nvar IdToken_IdToken = /** @class */ (function () {\r\n    /* tslint:disable:no-string-literal */\r\n    function IdToken(rawIdToken) {\r\n        if (StringUtils.isEmpty(rawIdToken)) {\r\n            throw ClientAuthError_ClientAuthError.createIdTokenNullOrEmptyError(rawIdToken);\r\n        }\r\n        try {\r\n            this.rawIdToken = rawIdToken;\r\n            this.claims = TokenUtils_TokenUtils.extractIdToken(rawIdToken);\r\n            if (this.claims) {\r\n                if (this.claims.hasOwnProperty("iss")) {\r\n                    this.issuer = this.claims["iss"];\r\n                }\r\n                if (this.claims.hasOwnProperty("oid")) {\r\n                    this.objectId = this.claims["oid"];\r\n                }\r\n                if (this.claims.hasOwnProperty("sub")) {\r\n                    this.subject = this.claims["sub"];\r\n                }\r\n                if (this.claims.hasOwnProperty("tid")) {\r\n                    this.tenantId = this.claims["tid"];\r\n                }\r\n                if (this.claims.hasOwnProperty("ver")) {\r\n                    this.version = this.claims["ver"];\r\n                }\r\n                if (this.claims.hasOwnProperty("preferred_username")) {\r\n                    this.preferredName = this.claims["preferred_username"];\r\n                }\r\n                if (this.claims.hasOwnProperty("name")) {\r\n                    this.name = this.claims["name"];\r\n                }\r\n                if (this.claims.hasOwnProperty("nonce")) {\r\n                    this.nonce = this.claims["nonce"];\r\n                }\r\n                if (this.claims.hasOwnProperty("exp")) {\r\n                    this.expiration = this.claims["exp"];\r\n                }\r\n                if (this.claims.hasOwnProperty("home_oid")) {\r\n                    this.homeObjectId = this.claims["home_oid"];\r\n                }\r\n                if (this.claims.hasOwnProperty("sid")) {\r\n                    this.sid = this.claims["sid"];\r\n                }\r\n                /* tslint:enable:no-string-literal */\r\n            }\r\n        }\r\n        catch (e) {\r\n            // TODO: This error here won\'t really every be thrown, since extractIdToken() returns null if the decodeJwt() fails.\r\n            // Need to add better error handling here to account for being unable to decode jwts.\r\n            throw ClientAuthError_ClientAuthError.createIdTokenParsingError(e);\r\n        }\r\n    }\r\n    return IdToken;\r\n}());\r\n\r\n//# sourceMappingURL=IdToken.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/AccessTokenCacheItem.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n * @hidden\r\n */\r\nvar AccessTokenCacheItem = /** @class */ (function () {\r\n    function AccessTokenCacheItem(key, value) {\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n    return AccessTokenCacheItem;\r\n}());\r\n\r\n//# sourceMappingURL=AccessTokenCacheItem.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/Storage.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\n\r\n/**\r\n * @hidden\r\n */\r\nvar Storage_Storage = /** @class */ (function () {\r\n    function Storage(cacheLocation) {\r\n        if (Storage.instance) {\r\n            return Storage.instance;\r\n        }\r\n        this.cacheLocation = cacheLocation;\r\n        this.localStorageSupported = typeof window[this.cacheLocation] !== "undefined" && window[this.cacheLocation] != null;\r\n        this.sessionStorageSupported = typeof window[cacheLocation] !== "undefined" && window[cacheLocation] != null;\r\n        Storage.instance = this;\r\n        if (!this.localStorageSupported && !this.sessionStorageSupported) {\r\n            throw ClientConfigurationError_ClientConfigurationError.createNoStorageSupportedError();\r\n        }\r\n        return Storage.instance;\r\n    }\r\n    // add value to storage\r\n    Storage.prototype.setItem = function (key, value, enableCookieStorage) {\r\n        if (window[this.cacheLocation]) {\r\n            window[this.cacheLocation].setItem(key, value);\r\n        }\r\n        if (enableCookieStorage) {\r\n            this.setItemCookie(key, value);\r\n        }\r\n    };\r\n    // get one item by key from storage\r\n    Storage.prototype.getItem = function (key, enableCookieStorage) {\r\n        if (enableCookieStorage && this.getItemCookie(key)) {\r\n            return this.getItemCookie(key);\r\n        }\r\n        if (window[this.cacheLocation]) {\r\n            return window[this.cacheLocation].getItem(key);\r\n        }\r\n        return null;\r\n    };\r\n    // remove value from storage\r\n    Storage.prototype.removeItem = function (key) {\r\n        if (window[this.cacheLocation]) {\r\n            return window[this.cacheLocation].removeItem(key);\r\n        }\r\n    };\r\n    // clear storage (remove all items from it)\r\n    Storage.prototype.clear = function () {\r\n        if (window[this.cacheLocation]) {\r\n            return window[this.cacheLocation].clear();\r\n        }\r\n    };\r\n    Storage.prototype.getAllAccessTokens = function (clientId, homeAccountIdentifier) {\r\n        var results = [];\r\n        var accessTokenCacheItem;\r\n        var storage = window[this.cacheLocation];\r\n        if (storage) {\r\n            var key = void 0;\r\n            for (key in storage) {\r\n                if (storage.hasOwnProperty(key)) {\r\n                    if (key.match(clientId) && key.match(homeAccountIdentifier)) {\r\n                        var value = this.getItem(key);\r\n                        if (value) {\r\n                            accessTokenCacheItem = new AccessTokenCacheItem(JSON.parse(key), JSON.parse(value));\r\n                            results.push(accessTokenCacheItem);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return results;\r\n    };\r\n    Storage.prototype.removeAcquireTokenEntries = function (state) {\r\n        var storage = window[this.cacheLocation];\r\n        if (storage) {\r\n            var key = void 0;\r\n            for (key in storage) {\r\n                if (storage.hasOwnProperty(key)) {\r\n                    if ((key.indexOf(CacheKeys.AUTHORITY) !== -1 || key.indexOf(CacheKeys.ACQUIRE_TOKEN_ACCOUNT) !== 1) && (!state || key.indexOf(state) !== -1)) {\r\n                        var splitKey = key.split(Constants.resourceDelimiter);\r\n                        var state_1 = void 0;\r\n                        if (splitKey.length > 1) {\r\n                            state_1 = splitKey[1];\r\n                        }\r\n                        if (state_1 && !this.tokenRenewalInProgress(state_1)) {\r\n                            this.removeItem(key);\r\n                            this.removeItem(Constants.renewStatus + state_1);\r\n                            this.removeItem(Constants.stateLogin);\r\n                            this.removeItem(Constants.stateAcquireToken);\r\n                            this.setItemCookie(key, "", -1);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.clearCookie();\r\n    };\r\n    Storage.prototype.tokenRenewalInProgress = function (stateValue) {\r\n        var storage = window[this.cacheLocation];\r\n        var renewStatus = storage[Constants.renewStatus + stateValue];\r\n        return !(!renewStatus || renewStatus !== Constants.tokenRenewStatusInProgress);\r\n    };\r\n    Storage.prototype.resetCacheItems = function () {\r\n        var storage = window[this.cacheLocation];\r\n        if (storage) {\r\n            var key = void 0;\r\n            for (key in storage) {\r\n                if (storage.hasOwnProperty(key)) {\r\n                    if (key.indexOf(Constants.msal) !== -1) {\r\n                        this.removeItem(key);\r\n                    }\r\n                }\r\n            }\r\n            this.removeAcquireTokenEntries();\r\n        }\r\n    };\r\n    Storage.prototype.setItemCookie = function (cName, cValue, expires) {\r\n        var cookieStr = cName + "=" + cValue + ";";\r\n        if (expires) {\r\n            var expireTime = this.getCookieExpirationTime(expires);\r\n            cookieStr += "expires=" + expireTime + ";";\r\n        }\r\n        document.cookie = cookieStr;\r\n    };\r\n    Storage.prototype.getItemCookie = function (cName) {\r\n        var name = cName + "=";\r\n        var ca = document.cookie.split(";");\r\n        for (var i = 0; i < ca.length; i++) {\r\n            var c = ca[i];\r\n            while (c.charAt(0) === " ") {\r\n                c = c.substring(1);\r\n            }\r\n            if (c.indexOf(name) === 0) {\r\n                return c.substring(name.length, c.length);\r\n            }\r\n        }\r\n        return "";\r\n    };\r\n    Storage.prototype.getCookieExpirationTime = function (cookieLifeDays) {\r\n        var today = new Date();\r\n        var expr = new Date(today.getTime() + cookieLifeDays * 24 * 60 * 60 * 1000);\r\n        return expr.toUTCString();\r\n    };\r\n    Storage.prototype.clearCookie = function () {\r\n        this.setItemCookie(Constants.nonceIdToken, "", -1);\r\n        this.setItemCookie(Constants.stateLogin, "", -1);\r\n        this.setItemCookie(Constants.loginRequest, "", -1);\r\n        this.setItemCookie(Constants.stateAcquireToken, "", -1);\r\n    };\r\n    /**\r\n     * Create acquireTokenAccountKey to cache account object\r\n     * @param accountId\r\n     * @param state\r\n     */\r\n    Storage.generateAcquireTokenAccountKey = function (accountId, state) {\r\n        return CacheKeys.ACQUIRE_TOKEN_ACCOUNT + Constants.resourceDelimiter +\r\n            ("" + accountId) + Constants.resourceDelimiter + ("" + state);\r\n    };\r\n    /**\r\n     * Create authorityKey to cache authority\r\n     * @param state\r\n     */\r\n    Storage.generateAuthorityKey = function (state) {\r\n        return CacheKeys.AUTHORITY + Constants.resourceDelimiter + ("" + state);\r\n    };\r\n    return Storage;\r\n}());\r\n\r\n//# sourceMappingURL=Storage.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/Account.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\n/**\r\n * accountIdentifier       combination of idToken.uid and idToken.utid\r\n * homeAccountIdentifier   combination of clientInfo.uid and clientInfo.utid\r\n * userName                idToken.preferred_username\r\n * name                    idToken.name\r\n * idToken                 idToken\r\n * sid                     idToken.sid - session identifier\r\n * environment             idtoken.issuer (the authority that issues the token)\r\n */\r\nvar Account_Account = /** @class */ (function () {\r\n    /**\r\n     * Creates an Account Object\r\n     * @praram accountIdentifier\r\n     * @param homeAccountIdentifier\r\n     * @param userName\r\n     * @param name\r\n     * @param idToken\r\n     * @param sid\r\n     * @param environment\r\n     */\r\n    function Account(accountIdentifier, homeAccountIdentifier, userName, name, idTokenClaims, sid, environment) {\r\n        this.accountIdentifier = accountIdentifier;\r\n        this.homeAccountIdentifier = homeAccountIdentifier;\r\n        this.userName = userName;\r\n        this.name = name;\r\n        // will be deprecated soon\r\n        this.idToken = idTokenClaims;\r\n        this.idTokenClaims = idTokenClaims;\r\n        this.sid = sid;\r\n        this.environment = environment;\r\n    }\r\n    /**\r\n     * @hidden\r\n     * @param idToken\r\n     * @param clientInfo\r\n     */\r\n    Account.createAccount = function (idToken, clientInfo) {\r\n        // create accountIdentifier\r\n        var accountIdentifier = idToken.objectId || idToken.subject;\r\n        // create homeAccountIdentifier\r\n        var uid = clientInfo ? clientInfo.uid : "";\r\n        var utid = clientInfo ? clientInfo.utid : "";\r\n        var homeAccountIdentifier;\r\n        if (!StringUtils.isEmpty(uid) && !StringUtils.isEmpty(utid)) {\r\n            homeAccountIdentifier = CryptoUtils.base64Encode(uid) + "." + CryptoUtils.base64Encode(utid);\r\n        }\r\n        return new Account(accountIdentifier, homeAccountIdentifier, idToken.preferredName, idToken.name, idToken.claims, idToken.sid, idToken.issuer);\r\n    };\r\n    /**\r\n     * Utils function to compare two Account objects - used to check if the same user account is logged in\r\n     *\r\n     * @param a1: Account object\r\n     * @param a2: Account object\r\n     */\r\n    Account.compareAccounts = function (a1, a2) {\r\n        if (!a1 || !a2) {\r\n            return false;\r\n        }\r\n        if (a1.homeAccountIdentifier && a2.homeAccountIdentifier) {\r\n            if (a1.homeAccountIdentifier === a2.homeAccountIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    return Account;\r\n}());\r\n\r\n//# sourceMappingURL=Account.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/utils/TimeUtils.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n * @hidden\r\n */\r\nvar TimeUtils = /** @class */ (function () {\r\n    function TimeUtils() {\r\n    }\r\n    /**\r\n     * Returns time in seconds for expiration based on string value passed in.\r\n     *\r\n     * @param expiresIn\r\n     */\r\n    TimeUtils.parseExpiresIn = function (expiresIn) {\r\n        // if AAD did not send "expires_in" property, use default expiration of 3599 seconds, for some reason AAD sends 3599 as "expires_in" value instead of 3600\r\n        if (!expiresIn) {\r\n            expiresIn = "3599";\r\n        }\r\n        return parseInt(expiresIn, 10);\r\n    };\r\n    /**\r\n     * return the current time in Unix time. Date.getTime() returns in milliseconds.\r\n     */\r\n    TimeUtils.now = function () {\r\n        return Math.round(new Date().getTime() / 1000.0);\r\n    };\r\n    return TimeUtils;\r\n}());\r\n\r\n//# sourceMappingURL=TimeUtils.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/utils/ResponseUtils.js\n\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n * @hidden\r\n */\r\nvar ResponseUtils_ResponseUtils = /** @class */ (function () {\r\n    function ResponseUtils() {\r\n    }\r\n    ResponseUtils.setResponseIdToken = function (originalResponse, idTokenObj) {\r\n        if (!originalResponse) {\r\n            return null;\r\n        }\r\n        else if (!idTokenObj) {\r\n            return originalResponse;\r\n        }\r\n        var exp = Number(idTokenObj.expiration);\r\n        if (exp && !originalResponse.expiresOn) {\r\n            originalResponse.expiresOn = new Date(exp * 1000);\r\n        }\r\n        return __assign({}, originalResponse, { idToken: idTokenObj, idTokenClaims: idTokenObj.claims, uniqueId: idTokenObj.objectId || idTokenObj.subject, tenantId: idTokenObj.tenantId });\r\n    };\r\n    return ResponseUtils;\r\n}());\r\n\r\n//# sourceMappingURL=ResponseUtils.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/XHRClient.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n * XHR client for JSON endpoints\r\n * https://www.npmjs.com/package/async-promise\r\n * @hidden\r\n */\r\nvar XhrClient = /** @class */ (function () {\r\n    function XhrClient() {\r\n    }\r\n    XhrClient.prototype.sendRequestAsync = function (url, method, enableCaching) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open(method, url, /*async: */ true);\r\n            if (enableCaching) {\r\n                // TODO: (shivb) ensure that this can be cached\r\n                // xhr.setRequestHeader("Cache-Control", "Public");\r\n            }\r\n            xhr.onload = function (ev) {\r\n                if (xhr.status < 200 || xhr.status >= 300) {\r\n                    reject(_this.handleError(xhr.responseText));\r\n                }\r\n                try {\r\n                    var jsonResponse = JSON.parse(xhr.responseText);\r\n                }\r\n                catch (e) {\r\n                    reject(_this.handleError(xhr.responseText));\r\n                }\r\n                resolve(jsonResponse);\r\n            };\r\n            xhr.onerror = function (ev) {\r\n                reject(xhr.status);\r\n            };\r\n            if (method === "GET") {\r\n                xhr.send();\r\n            }\r\n            else {\r\n                throw "not implemented";\r\n            }\r\n        });\r\n    };\r\n    XhrClient.prototype.handleError = function (responseText) {\r\n        var jsonResponse;\r\n        try {\r\n            jsonResponse = JSON.parse(responseText);\r\n            if (jsonResponse.error) {\r\n                return jsonResponse.error;\r\n            }\r\n            else {\r\n                throw responseText;\r\n            }\r\n        }\r\n        catch (e) {\r\n            return responseText;\r\n        }\r\n    };\r\n    return XhrClient;\r\n}());\r\n\r\n//# sourceMappingURL=XHRClient.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/Authority.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\n\r\n/**\r\n * @hidden\r\n */\r\nvar AuthorityType;\r\n(function (AuthorityType) {\r\n    AuthorityType[AuthorityType["Aad"] = 0] = "Aad";\r\n    AuthorityType[AuthorityType["Adfs"] = 1] = "Adfs";\r\n    AuthorityType[AuthorityType["B2C"] = 2] = "B2C";\r\n})(AuthorityType || (AuthorityType = {}));\r\n/**\r\n * @hidden\r\n */\r\nvar Authority_Authority = /** @class */ (function () {\r\n    function Authority(authority, validateAuthority) {\r\n        this.IsValidationEnabled = validateAuthority;\r\n        this.CanonicalAuthority = authority;\r\n        this.validateAsUri();\r\n    }\r\n    Object.defineProperty(Authority.prototype, "Tenant", {\r\n        get: function () {\r\n            return this.CanonicalAuthorityUrlComponents.PathSegments[0];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, "AuthorizationEndpoint", {\r\n        get: function () {\r\n            this.validateResolved();\r\n            return this.tenantDiscoveryResponse.AuthorizationEndpoint.replace("{tenant}", this.Tenant);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, "EndSessionEndpoint", {\r\n        get: function () {\r\n            this.validateResolved();\r\n            return this.tenantDiscoveryResponse.EndSessionEndpoint.replace("{tenant}", this.Tenant);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, "SelfSignedJwtAudience", {\r\n        get: function () {\r\n            this.validateResolved();\r\n            return this.tenantDiscoveryResponse.Issuer.replace("{tenant}", this.Tenant);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Authority.prototype.validateResolved = function () {\r\n        if (!this.tenantDiscoveryResponse) {\r\n            throw "Please call ResolveEndpointsAsync first";\r\n        }\r\n    };\r\n    Object.defineProperty(Authority.prototype, "CanonicalAuthority", {\r\n        /**\r\n         * A URL that is the authority set by the developer\r\n         */\r\n        get: function () {\r\n            return this.canonicalAuthority;\r\n        },\r\n        set: function (url) {\r\n            this.canonicalAuthority = UrlUtils_UrlUtils.CanonicalizeUri(url);\r\n            this.canonicalAuthorityUrlComponents = null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, "CanonicalAuthorityUrlComponents", {\r\n        get: function () {\r\n            if (!this.canonicalAuthorityUrlComponents) {\r\n                this.canonicalAuthorityUrlComponents = UrlUtils_UrlUtils.GetUrlComponents(this.CanonicalAuthority);\r\n            }\r\n            return this.canonicalAuthorityUrlComponents;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, "DefaultOpenIdConfigurationEndpoint", {\r\n        /**\r\n         * // http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\r\n         */\r\n        get: function () {\r\n            return this.CanonicalAuthority + "v2.0/.well-known/openid-configuration";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Given a string, validate that it is of the form https://domain/path\r\n     */\r\n    Authority.prototype.validateAsUri = function () {\r\n        var components;\r\n        try {\r\n            components = this.CanonicalAuthorityUrlComponents;\r\n        }\r\n        catch (e) {\r\n            throw ClientConfigurationErrorMessage.invalidAuthorityType;\r\n        }\r\n        if (!components.Protocol || components.Protocol.toLowerCase() !== "https:") {\r\n            throw ClientConfigurationErrorMessage.authorityUriInsecure;\r\n        }\r\n        if (!components.PathSegments || components.PathSegments.length < 1) {\r\n            throw ClientConfigurationErrorMessage.authorityUriInvalidPath;\r\n        }\r\n    };\r\n    /**\r\n     * Calls the OIDC endpoint and returns the response\r\n     */\r\n    Authority.prototype.DiscoverEndpoints = function (openIdConfigurationEndpoint) {\r\n        var client = new XhrClient();\r\n        return client.sendRequestAsync(openIdConfigurationEndpoint, "GET", /*enableCaching: */ true)\r\n            .then(function (response) {\r\n            return {\r\n                AuthorizationEndpoint: response.authorization_endpoint,\r\n                EndSessionEndpoint: response.end_session_endpoint,\r\n                Issuer: response.issuer\r\n            };\r\n        });\r\n    };\r\n    /**\r\n     * Returns a promise.\r\n     * Checks to see if the authority is in the cache\r\n     * Discover endpoints via openid-configuration\r\n     * If successful, caches the endpoint for later use in OIDC\r\n     */\r\n    Authority.prototype.resolveEndpointsAsync = function () {\r\n        var _this = this;\r\n        var openIdConfigurationEndpoint = "";\r\n        return this.GetOpenIdConfigurationEndpointAsync().then(function (openIdConfigurationEndpointResponse) {\r\n            openIdConfigurationEndpoint = openIdConfigurationEndpointResponse;\r\n            return _this.DiscoverEndpoints(openIdConfigurationEndpoint);\r\n        }).then(function (tenantDiscoveryResponse) {\r\n            _this.tenantDiscoveryResponse = tenantDiscoveryResponse;\r\n            return _this;\r\n        });\r\n    };\r\n    return Authority;\r\n}());\r\n\r\n//# sourceMappingURL=Authority.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/AadAuthority.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\n\r\n\r\n/**\r\n * @hidden\r\n */\r\nvar AadAuthority_AadAuthority = /** @class */ (function (_super) {\r\n    __extends(AadAuthority, _super);\r\n    function AadAuthority(authority, validateAuthority) {\r\n        return _super.call(this, authority, validateAuthority) || this;\r\n    }\r\n    Object.defineProperty(AadAuthority.prototype, "AadInstanceDiscoveryEndpointUrl", {\r\n        get: function () {\r\n            return AadAuthority.AadInstanceDiscoveryEndpoint + "?api-version=1.0&authorization_endpoint=" + this.CanonicalAuthority + "oauth2/v2.0/authorize";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AadAuthority.prototype, "AuthorityType", {\r\n        get: function () {\r\n            return AuthorityType.Aad;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise which resolves to the OIDC endpoint\r\n     * Only responds with the endpoint\r\n     */\r\n    AadAuthority.prototype.GetOpenIdConfigurationEndpointAsync = function () {\r\n        var _this = this;\r\n        var resultPromise = new Promise(function (resolve, reject) {\r\n            return resolve(_this.DefaultOpenIdConfigurationEndpoint);\r\n        });\r\n        if (!this.IsValidationEnabled) {\r\n            return resultPromise;\r\n        }\r\n        var host = this.CanonicalAuthorityUrlComponents.HostNameAndPort;\r\n        if (this.IsInTrustedHostList(host)) {\r\n            return resultPromise;\r\n        }\r\n        var client = new XhrClient();\r\n        return client.sendRequestAsync(this.AadInstanceDiscoveryEndpointUrl, "GET", true)\r\n            .then(function (response) {\r\n            return response.tenant_discovery_endpoint;\r\n        });\r\n    };\r\n    /**\r\n     * Checks to see if the host is in a list of trusted hosts\r\n     * @param {string} The host to look up\r\n     */\r\n    AadAuthority.prototype.IsInTrustedHostList = function (host) {\r\n        return AADTrustedHostList[host.toLowerCase()];\r\n    };\r\n    AadAuthority.AadInstanceDiscoveryEndpoint = "https://login.microsoftonline.com/common/discovery/instance";\r\n    return AadAuthority;\r\n}(Authority_Authority));\r\n\r\n//# sourceMappingURL=AadAuthority.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/B2cAuthority.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @hidden\r\n */\r\nvar B2cAuthority_B2cAuthority = /** @class */ (function (_super) {\r\n    __extends(B2cAuthority, _super);\r\n    function B2cAuthority(authority, validateAuthority) {\r\n        var _this = _super.call(this, authority, validateAuthority) || this;\r\n        var urlComponents = UrlUtils_UrlUtils.GetUrlComponents(authority);\r\n        var pathSegments = urlComponents.PathSegments;\r\n        if (pathSegments.length < 3) {\r\n            throw ClientConfigurationErrorMessage.b2cAuthorityUriInvalidPath;\r\n        }\r\n        _this.CanonicalAuthority = "https://" + urlComponents.HostNameAndPort + "/" + pathSegments[0] + "/" + pathSegments[1] + "/" + pathSegments[2] + "/";\r\n        return _this;\r\n    }\r\n    Object.defineProperty(B2cAuthority.prototype, "AuthorityType", {\r\n        get: function () {\r\n            return AuthorityType.B2C;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise with the TenantDiscoveryEndpoint\r\n     */\r\n    B2cAuthority.prototype.GetOpenIdConfigurationEndpointAsync = function () {\r\n        var _this = this;\r\n        var resultPromise = new Promise(function (resolve, reject) {\r\n            return resolve(_this.DefaultOpenIdConfigurationEndpoint);\r\n        });\r\n        if (!this.IsValidationEnabled) {\r\n            return resultPromise;\r\n        }\r\n        if (this.IsInTrustedHostList(this.CanonicalAuthorityUrlComponents.HostNameAndPort)) {\r\n            return resultPromise;\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            return reject(ClientConfigurationErrorMessage.unsupportedAuthorityValidation);\r\n        });\r\n    };\r\n    B2cAuthority.B2C_PREFIX = "tfp";\r\n    return B2cAuthority;\r\n}(AadAuthority_AadAuthority));\r\n\r\n//# sourceMappingURL=B2cAuthority.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/AuthorityFactory.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n * @hidden\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar AuthorityFactory_AuthorityFactory = /** @class */ (function () {\r\n    function AuthorityFactory() {\r\n    }\r\n    /**\r\n    * Parse the url and determine the type of authority\r\n    */\r\n    AuthorityFactory.DetectAuthorityFromUrl = function (authorityUrl) {\r\n        authorityUrl = UrlUtils_UrlUtils.CanonicalizeUri(authorityUrl);\r\n        var components = UrlUtils_UrlUtils.GetUrlComponents(authorityUrl);\r\n        var pathSegments = components.PathSegments;\r\n        switch (pathSegments[0]) {\r\n            case "tfp":\r\n                return AuthorityType.B2C;\r\n            case "adfs":\r\n                return AuthorityType.Adfs;\r\n            default:\r\n                return AuthorityType.Aad;\r\n        }\r\n    };\r\n    /**\r\n    * Create an authority object of the correct type based on the url\r\n    * Performs basic authority validation - checks to see if the authority is of a valid type (eg aad, b2c)\r\n    */\r\n    AuthorityFactory.CreateInstance = function (authorityUrl, validateAuthority) {\r\n        if (StringUtils.isEmpty(authorityUrl)) {\r\n            return null;\r\n        }\r\n        var type = AuthorityFactory.DetectAuthorityFromUrl(authorityUrl);\r\n        // Depending on above detection, create the right type.\r\n        switch (type) {\r\n            case AuthorityType.B2C:\r\n                return new B2cAuthority_B2cAuthority(authorityUrl, validateAuthority);\r\n            case AuthorityType.Aad:\r\n                return new AadAuthority_AadAuthority(authorityUrl, validateAuthority);\r\n            default:\r\n                throw ClientConfigurationErrorMessage.invalidAuthorityType;\r\n        }\r\n    };\r\n    return AuthorityFactory;\r\n}());\r\n\r\n//# sourceMappingURL=AuthorityFactory.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/Logger.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel["Error"] = 0] = "Error";\r\n    LogLevel[LogLevel["Warning"] = 1] = "Warning";\r\n    LogLevel[LogLevel["Info"] = 2] = "Info";\r\n    LogLevel[LogLevel["Verbose"] = 3] = "Verbose";\r\n})(LogLevel || (LogLevel = {}));\r\nvar Logger_Logger = /** @class */ (function () {\r\n    function Logger(localCallback, options) {\r\n        if (options === void 0) { options = {}; }\r\n        /**\r\n         * @hidden\r\n         */\r\n        this.level = LogLevel.Info;\r\n        var _a = options.correlationId, correlationId = _a === void 0 ? "" : _a, _b = options.level, level = _b === void 0 ? LogLevel.Info : _b, _c = options.piiLoggingEnabled, piiLoggingEnabled = _c === void 0 ? false : _c;\r\n        this.localCallback = localCallback;\r\n        this.correlationId = correlationId;\r\n        this.level = level;\r\n        this.piiLoggingEnabled = piiLoggingEnabled;\r\n    }\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.logMessage = function (logLevel, logMessage, containsPii) {\r\n        if ((logLevel > this.level) || (!this.piiLoggingEnabled && containsPii)) {\r\n            return;\r\n        }\r\n        var timestamp = new Date().toUTCString();\r\n        var log;\r\n        if (!StringUtils.isEmpty(this.correlationId)) {\r\n            log = timestamp + ":" + this.correlationId + "-" + libraryVersion() + "-" + LogLevel[logLevel] + " " + logMessage;\r\n        }\r\n        else {\r\n            log = timestamp + ":" + libraryVersion() + "-" + LogLevel[logLevel] + " " + logMessage;\r\n        }\r\n        this.executeCallback(logLevel, log, containsPii);\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.executeCallback = function (level, message, containsPii) {\r\n        if (this.localCallback) {\r\n            this.localCallback(level, message, containsPii);\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.error = function (message) {\r\n        this.logMessage(LogLevel.Error, message, false);\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.errorPii = function (message) {\r\n        this.logMessage(LogLevel.Error, message, true);\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.warning = function (message) {\r\n        this.logMessage(LogLevel.Warning, message, false);\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.warningPii = function (message) {\r\n        this.logMessage(LogLevel.Warning, message, true);\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.info = function (message) {\r\n        this.logMessage(LogLevel.Info, message, false);\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.infoPii = function (message) {\r\n        this.logMessage(LogLevel.Info, message, true);\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.verbose = function (message) {\r\n        this.logMessage(LogLevel.Verbose, message, false);\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Logger.prototype.verbosePii = function (message) {\r\n        this.logMessage(LogLevel.Verbose, message, true);\r\n    };\r\n    Logger.prototype.isPiiLoggingEnabled = function () {\r\n        return this.piiLoggingEnabled;\r\n    };\r\n    return Logger;\r\n}());\r\n\r\n//# sourceMappingURL=Logger.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/Configuration.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\n\r\n/**\r\n * Defaults for the Configuration Options\r\n */\r\nvar FRAME_TIMEOUT = 6000;\r\nvar OFFSET = 300;\r\nvar NAVIGATE_FRAME_WAIT = 500;\r\nvar DEFAULT_AUTH_OPTIONS = {\r\n    clientId: "",\r\n    authority: null,\r\n    validateAuthority: true,\r\n    redirectUri: function () { return UrlUtils_UrlUtils.getDefaultRedirectUri(); },\r\n    postLogoutRedirectUri: function () { return UrlUtils_UrlUtils.getDefaultRedirectUri(); },\r\n    navigateToLoginRequestUrl: true\r\n};\r\nvar DEFAULT_CACHE_OPTIONS = {\r\n    cacheLocation: "sessionStorage",\r\n    storeAuthStateInCookie: false\r\n};\r\nvar DEFAULT_SYSTEM_OPTIONS = {\r\n    logger: new Logger_Logger(null),\r\n    loadFrameTimeout: FRAME_TIMEOUT,\r\n    tokenRenewalOffsetSeconds: OFFSET,\r\n    navigateFrameWait: NAVIGATE_FRAME_WAIT\r\n};\r\nvar DEFAULT_FRAMEWORK_OPTIONS = {\r\n    isAngular: false,\r\n    unprotectedResources: new Array(),\r\n    protectedResourceMap: new Map()\r\n};\r\n/**\r\n * MSAL function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param TAuthOptions\r\n * @param TCacheOptions\r\n * @param TSystemOptions\r\n * @param TFrameworkOptions\r\n *\r\n * @returns TConfiguration object\r\n */\r\nfunction buildConfiguration(_a) {\r\n    var auth = _a.auth, _b = _a.cache, cache = _b === void 0 ? {} : _b, _c = _a.system, system = _c === void 0 ? {} : _c, _d = _a.framework, framework = _d === void 0 ? {} : _d;\r\n    var overlayedConfig = {\r\n        auth: __assign({}, DEFAULT_AUTH_OPTIONS, auth),\r\n        cache: __assign({}, DEFAULT_CACHE_OPTIONS, cache),\r\n        system: __assign({}, DEFAULT_SYSTEM_OPTIONS, system),\r\n        framework: __assign({}, DEFAULT_FRAMEWORK_OPTIONS, framework)\r\n    };\r\n    return overlayedConfig;\r\n}\r\n//# sourceMappingURL=Configuration.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/error/ServerError.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\nvar ServerErrorMessage = {\r\n    serverUnavailable: {\r\n        code: "server_unavailable",\r\n        desc: "Server is temporarily unavailable."\r\n    },\r\n    unknownServerError: {\r\n        code: "unknown_server_error"\r\n    },\r\n};\r\n/**\r\n * Error thrown when there is an error with the server code, for example, unavailability.\r\n */\r\nvar ServerError_ServerError = /** @class */ (function (_super) {\r\n    __extends(ServerError, _super);\r\n    function ServerError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorCode, errorMessage) || this;\r\n        _this.name = "ServerError";\r\n        Object.setPrototypeOf(_this, ServerError.prototype);\r\n        return _this;\r\n    }\r\n    ServerError.createServerUnavailableError = function () {\r\n        return new ServerError(ServerErrorMessage.serverUnavailable.code, ServerErrorMessage.serverUnavailable.desc);\r\n    };\r\n    ServerError.createUnknownServerError = function (errorDesc) {\r\n        return new ServerError(ServerErrorMessage.unknownServerError.code, errorDesc);\r\n    };\r\n    return ServerError;\r\n}(AuthError_AuthError));\r\n\r\n//# sourceMappingURL=ServerError.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/error/InteractionRequiredAuthError.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\nvar InteractionRequiredAuthErrorMessage = {\r\n    interactionRequired: {\r\n        code: "interaction_required"\r\n    },\r\n    consentRequired: {\r\n        code: "consent_required"\r\n    },\r\n    loginRequired: {\r\n        code: "login_required"\r\n    },\r\n};\r\n/**\r\n * Error thrown when the user is required to perform an interactive token request.\r\n */\r\nvar InteractionRequiredAuthError_InteractionRequiredAuthError = /** @class */ (function (_super) {\r\n    __extends(InteractionRequiredAuthError, _super);\r\n    function InteractionRequiredAuthError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorCode, errorMessage) || this;\r\n        _this.name = "InteractionRequiredAuthError";\r\n        Object.setPrototypeOf(_this, InteractionRequiredAuthError.prototype);\r\n        return _this;\r\n    }\r\n    InteractionRequiredAuthError.isInteractionRequiredError = function (errorString) {\r\n        var interactionRequiredCodes = [\r\n            InteractionRequiredAuthErrorMessage.interactionRequired.code,\r\n            InteractionRequiredAuthErrorMessage.consentRequired.code,\r\n            InteractionRequiredAuthErrorMessage.loginRequired.code\r\n        ];\r\n        return errorString && interactionRequiredCodes.indexOf(errorString) > -1;\r\n    };\r\n    InteractionRequiredAuthError.createLoginRequiredAuthError = function (errorDesc) {\r\n        return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.loginRequired.code, errorDesc);\r\n    };\r\n    InteractionRequiredAuthError.createInteractionRequiredAuthError = function (errorDesc) {\r\n        return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.interactionRequired.code, errorDesc);\r\n    };\r\n    InteractionRequiredAuthError.createConsentRequiredAuthError = function (errorDesc) {\r\n        return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.consentRequired.code, errorDesc);\r\n    };\r\n    return InteractionRequiredAuthError;\r\n}(ServerError_ServerError));\r\n\r\n//# sourceMappingURL=InteractionRequiredAuthError.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/AuthResponse.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nfunction buildResponseStateOnly(state) {\r\n    return {\r\n        uniqueId: "",\r\n        tenantId: "",\r\n        tokenType: "",\r\n        idToken: null,\r\n        idTokenClaims: null,\r\n        accessToken: "",\r\n        scopes: null,\r\n        expiresOn: null,\r\n        account: null,\r\n        accountState: state\r\n    };\r\n}\r\n//# sourceMappingURL=AuthResponse.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/telemetry/TelemetryConstants.js\nvar EVENT_NAME_PREFIX = "msal.";\r\nvar EVENT_NAME_KEY = "event_name";\r\nvar START_TIME_KEY = "start_time";\r\nvar ELAPSED_TIME_KEY = "elapsed_time";\r\nvar TELEMETRY_BLOB_EVENT_NAMES = {\r\n    MsalCorrelationIdConstStrKey: "Microsoft.MSAL.correlation_id",\r\n    ApiTelemIdConstStrKey: "msal.api_telem_id",\r\n    ApiIdConstStrKey: "msal.api_id",\r\n    BrokerAppConstStrKey: "Microsoft_MSAL_broker_app",\r\n    CacheEventCountConstStrKey: "Microsoft_MSAL_cache_event_count",\r\n    HttpEventCountTelemetryBatchKey: "Microsoft_MSAL_http_event_count",\r\n    IdpConstStrKey: "Microsoft_MSAL_idp",\r\n    IsSilentTelemetryBatchKey: "",\r\n    IsSuccessfulConstStrKey: "Microsoft_MSAL_is_successful",\r\n    ResponseTimeConstStrKey: "Microsoft_MSAL_response_time",\r\n    TenantIdConstStrKey: "Microsoft_MSAL_tenant_id",\r\n    UiEventCountTelemetryBatchKey: "Microsoft_MSAL_ui_event_count"\r\n};\r\n// This is used to replace the real tenant in telemetry info\r\nvar TENANT_PLACEHOLDER = "<tenant>";\r\n//# sourceMappingURL=TelemetryConstants.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/telemetry/TelemetryUtils.js\n\r\n\r\n\r\n\r\n\r\nvar scrubTenantFromUri = function (uri) {\r\n    var url = UrlUtils_UrlUtils.GetUrlComponents(uri);\r\n    // validate trusted host\r\n    if (!AADTrustedHostList[url.HostNameAndPort.toLocaleLowerCase()]) {\r\n        // Should this return null or what was passed?\r\n        return null;\r\n    }\r\n    var pathParams = url.PathSegments;\r\n    if (pathParams && pathParams.length >= 2) {\r\n        var tenantPosition = pathParams[1] === B2cAuthority_B2cAuthority.B2C_PREFIX ? 2 : 1;\r\n        if (tenantPosition < pathParams.length) {\r\n            pathParams[tenantPosition] = TENANT_PLACEHOLDER;\r\n        }\r\n    }\r\n    return url.Protocol + "//" + url.HostNameAndPort + "/" + pathParams.join("/");\r\n};\r\nvar hashPersonalIdentifier = function (valueToHash) {\r\n    // TODO sha256 this\r\n    // Current test runner is being funny with node libs that are webpacked anyway\r\n    // need a different solution\r\n    return CryptoUtils.base64Encode(valueToHash);\r\n};\r\nvar prependEventNamePrefix = function (suffix) { return "" + EVENT_NAME_PREFIX + (suffix || ""); };\r\n//# sourceMappingURL=TelemetryUtils.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/telemetry/TelemetryEvent.js\n\r\n\r\n\r\n\r\n\r\nvar TelemetryEvent_TelemetryEvent = /** @class */ (function () {\r\n    function TelemetryEvent(eventName, correlationId) {\r\n        var _a;\r\n        this.startTimestamp = Date.now();\r\n        this.eventId = CryptoUtils.createNewGuid();\r\n        this.event = (_a = {},\r\n            _a[prependEventNamePrefix(EVENT_NAME_KEY)] = eventName,\r\n            _a[prependEventNamePrefix(START_TIME_KEY)] = this.startTimestamp,\r\n            _a[prependEventNamePrefix(ELAPSED_TIME_KEY)] = -1,\r\n            _a["" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = correlationId,\r\n            _a);\r\n    }\r\n    TelemetryEvent.prototype.setElapsedTime = function (time) {\r\n        this.event[prependEventNamePrefix(ELAPSED_TIME_KEY)] = time;\r\n    };\r\n    TelemetryEvent.prototype.stop = function () {\r\n        // Set duration of event\r\n        this.setElapsedTime(+Date.now() - +this.startTimestamp);\r\n    };\r\n    Object.defineProperty(TelemetryEvent.prototype, "telemetryCorrelationId", {\r\n        get: function () {\r\n            return this.event["" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey];\r\n        },\r\n        set: function (value) {\r\n            this.event["" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TelemetryEvent.prototype, "eventName", {\r\n        get: function () {\r\n            return this.event[prependEventNamePrefix(EVENT_NAME_KEY)];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    TelemetryEvent.prototype.get = function () {\r\n        return __assign({}, this.event, { eventId: this.eventId });\r\n    };\r\n    return TelemetryEvent;\r\n}());\r\n/* harmony default export */ var telemetry_TelemetryEvent = (TelemetryEvent_TelemetryEvent);\r\n//# sourceMappingURL=TelemetryEvent.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/telemetry/DefaultEvent.js\n\r\n\r\n\r\n\r\nvar DefaultEvent_DefaultEvent = /** @class */ (function (_super) {\r\n    __extends(DefaultEvent, _super);\r\n    // TODO Platform Type\r\n    function DefaultEvent(platform, correlationId, clientId, eventCount) {\r\n        var _this = _super.call(this, prependEventNamePrefix("default_event"), correlationId) || this;\r\n        _this.event[prependEventNamePrefix("client_id")] = clientId;\r\n        _this.event[prependEventNamePrefix("sdk_plaform")] = platform.sdk;\r\n        _this.event[prependEventNamePrefix("sdk_version")] = platform.sdkVersion;\r\n        _this.event[prependEventNamePrefix("application_name")] = platform.applicationName;\r\n        _this.event[prependEventNamePrefix("application_version")] = platform.applicationVersion;\r\n        _this.event["" + TELEMETRY_BLOB_EVENT_NAMES.UiEventCountTelemetryBatchKey] = _this.getEventCount(prependEventNamePrefix("ui_event"), eventCount);\r\n        _this.event["" + TELEMETRY_BLOB_EVENT_NAMES.HttpEventCountTelemetryBatchKey] = _this.getEventCount(prependEventNamePrefix("http_event"), eventCount);\r\n        _this.event["" + TELEMETRY_BLOB_EVENT_NAMES.CacheEventCountConstStrKey] = _this.getEventCount(prependEventNamePrefix("cache_event"), eventCount);\r\n        return _this;\r\n        /// Device id?\r\n    }\r\n    DefaultEvent.prototype.getEventCount = function (eventName, eventCount) {\r\n        if (!eventCount[eventName]) {\r\n            return 0;\r\n        }\r\n        return eventCount[eventName];\r\n    };\r\n    return DefaultEvent;\r\n}(telemetry_TelemetryEvent));\r\n/* harmony default export */ var telemetry_DefaultEvent = (DefaultEvent_DefaultEvent);\r\n//# sourceMappingURL=DefaultEvent.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/telemetry/TelemetryManager.js\n\r\n// for use in cache events\r\nvar MSAL_CACHE_EVENT_VALUE_PREFIX = "msal.token";\r\nvar MSAL_CACHE_EVENT_NAME = "msal.cache_event";\r\nvar createEventKey = function (event) { return (event.telemetryCorrelationId + "-" + event.eventId + "-" + event.eventName); };\r\nvar TelemetryManager_TelemetryManager = /** @class */ (function () {\r\n    function TelemetryManager(config, telemetryEmitter) {\r\n        // correlation Id to list of events\r\n        this.completedEvents = {};\r\n        // event key to event\r\n        this.inProgressEvents = {};\r\n        // correlation id to map of eventname to count\r\n        this.eventCountByCorrelationId = {};\r\n        //Implement after API EVENT\r\n        this.onlySendFailureTelemetry = false;\r\n        // TODO THROW if bad options\r\n        this.telemetryPlatform = config.platform;\r\n        this.clientId = config.clientId;\r\n        this.onlySendFailureTelemetry = config.onlySendFailureTelemetry;\r\n        // TODO, when i get to wiring this through, think about what it means if\r\n        // a developer does not implement telem at all, we still instrument, but telemetryEmitter can be\r\n        // optional?\r\n        this.telemetryEmitter = telemetryEmitter;\r\n    }\r\n    TelemetryManager.prototype.startEvent = function (event) {\r\n        if (!this.telemetryEmitter) {\r\n            return;\r\n        }\r\n        var eventKey = createEventKey(event);\r\n        this.inProgressEvents[eventKey] = event;\r\n    };\r\n    TelemetryManager.prototype.stopEvent = function (event) {\r\n        var eventKey = createEventKey(event);\r\n        if (!this.telemetryEmitter || !this.inProgressEvents[eventKey]) {\r\n            return;\r\n        }\r\n        event.stop();\r\n        this.incrementEventCount(event);\r\n        var completedEvents = this.completedEvents[event.telemetryCorrelationId];\r\n        this.completedEvents[event.telemetryCorrelationId] = (completedEvents || []).concat([event]);\r\n        delete this.inProgressEvents[eventKey];\r\n    };\r\n    TelemetryManager.prototype.flush = function (correlationId) {\r\n        var _this = this;\r\n        // If there is only unfinished events should this still return them?\r\n        if (!this.telemetryEmitter || !this.completedEvents[correlationId]) {\r\n            return;\r\n        }\r\n        var orphanedEvents = this.getOrphanedEvents(correlationId);\r\n        orphanedEvents.forEach(function (event) { return _this.incrementEventCount(event); });\r\n        var eventsToFlush = this.completedEvents[correlationId].concat(orphanedEvents);\r\n        delete this.completedEvents[correlationId];\r\n        var eventCountsToFlush = this.eventCountByCorrelationId[correlationId];\r\n        delete this.eventCountByCorrelationId[correlationId];\r\n        // TODO add funcitonality for onlyFlushFailures after implementing api event? ??\r\n        if (!eventsToFlush || !eventsToFlush.length) {\r\n            return;\r\n        }\r\n        var defaultEvent = new telemetry_DefaultEvent(this.telemetryPlatform, correlationId, this.clientId, eventCountsToFlush);\r\n        var eventsWithDefaultEvent = eventsToFlush.concat([defaultEvent]);\r\n        this.telemetryEmitter(eventsWithDefaultEvent.map(function (e) { return e.get(); }));\r\n    };\r\n    TelemetryManager.prototype.incrementEventCount = function (event) {\r\n        var _a;\r\n        // TODO, name cache event different?\r\n        // if type is cache event, change name\r\n        var eventName = event.eventName;\r\n        var eventCount = this.eventCountByCorrelationId[event.telemetryCorrelationId];\r\n        if (!eventCount) {\r\n            this.eventCountByCorrelationId[event.telemetryCorrelationId] = (_a = {},\r\n                _a[eventName] = 1,\r\n                _a);\r\n        }\r\n        else {\r\n            eventCount[eventName] = eventCount[eventName] ? eventCount[eventName] + 1 : 1;\r\n        }\r\n    };\r\n    TelemetryManager.prototype.getOrphanedEvents = function (correlationId) {\r\n        var _this = this;\r\n        return Object.keys(this.inProgressEvents)\r\n            .reduce(function (memo, eventKey) {\r\n            if (eventKey.indexOf(correlationId) !== -1) {\r\n                var event_1 = _this.inProgressEvents[eventKey];\r\n                delete _this.inProgressEvents[eventKey];\r\n                return memo.concat([event_1]);\r\n            }\r\n            return memo;\r\n        }, []);\r\n    };\r\n    return TelemetryManager;\r\n}());\r\n/* harmony default export */ var telemetry_TelemetryManager = (TelemetryManager_TelemetryManager);\r\n//# sourceMappingURL=TelemetryManager.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/UserAgentApplication.js\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// default authority\r\nvar DEFAULT_AUTHORITY = "https://login.microsoftonline.com/common";\r\n/**\r\n * @hidden\r\n * @ignore\r\n * response_type from OpenIDConnect\r\n * References: https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html & https://tools.ietf.org/html/rfc6749#section-4.2.1\r\n * Since we support only implicit flow in this library, we restrict the response_type support to only \'token\' and \'id_token\'\r\n *\r\n */\r\nvar ResponseTypes = {\r\n    id_token: "id_token",\r\n    token: "token",\r\n    id_token_token: "id_token token"\r\n};\r\n/**\r\n * @hidden\r\n * @ignore\r\n * A wrapper to handle the token response/error within the iFrame always\r\n *\r\n * @param target\r\n * @param propertyKey\r\n * @param descriptor\r\n */\r\nvar resolveTokenOnlyIfOutOfIframe = function (target, propertyKey, descriptor) {\r\n    var tokenAcquisitionMethod = descriptor.value;\r\n    descriptor.value = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return this.isInIframe()\r\n            ? new Promise(function () {\r\n                return;\r\n            })\r\n            : tokenAcquisitionMethod.apply(this, args);\r\n    };\r\n    return descriptor;\r\n};\r\n/**\r\n * UserAgentApplication class\r\n *\r\n * Object Instance that the developer can use to make loginXX OR acquireTokenXX functions\r\n */\r\nvar UserAgentApplication_UserAgentApplication = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * Constructor for the UserAgentApplication used to instantiate the UserAgentApplication object\r\n     *\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application.\r\n     * You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n     * - authority: the authority URL for your application.\r\n     *\r\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n     * It is of the form https://login.microsoftonline.com/&lt;Enter_the_Tenant_Info_Here&gt;.\r\n     * If your application supports Accounts in one organizational directory, replace "Enter_the_Tenant_Info_Here" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace "Enter_the_Tenant_Info_Here" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace "Enter_the_Tenant_Info_Here" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace "Enter_the_Tenant_Info_Here" value with consumers.\r\n     *\r\n     *\r\n     * In Azure B2C, authority is of the form https://&lt;instance&gt;/tfp/&lt;tenant&gt;/&lt;policyName&gt;/\r\n  \r\n     * @param {@link (Configuration:type)} configuration object for the MSAL UserAgentApplication instance\r\n     */\r\n    function UserAgentApplication(configuration) {\r\n        // callbacks for token/error\r\n        this.authResponseCallback = null;\r\n        this.tokenReceivedCallback = null;\r\n        this.errorReceivedCallback = null;\r\n        // Set the Configuration\r\n        this.config = buildConfiguration(configuration);\r\n        // Set the callback boolean\r\n        this.redirectCallbacksSet = false;\r\n        this.logger = this.config.system.logger;\r\n        this.clientId = this.config.auth.clientId;\r\n        this.inCookie = this.config.cache.storeAuthStateInCookie;\r\n        this.telemetryManager = this.getTelemetryManagerFromConfig(this.config.system.telemetry, this.clientId);\r\n        // if no authority is passed, set the default: "https://login.microsoftonline.com/common"\r\n        this.authority = this.config.auth.authority || DEFAULT_AUTHORITY;\r\n        // track login and acquireToken in progress\r\n        this.loginInProgress = false;\r\n        this.acquireTokenInProgress = false;\r\n        // cache keys msal - typescript throws an error if any value other than "localStorage" or "sessionStorage" is passed\r\n        try {\r\n            this.cacheStorage = new Storage_Storage(this.config.cache.cacheLocation);\r\n        }\r\n        catch (e) {\r\n            throw ClientConfigurationError_ClientConfigurationError.createInvalidCacheLocationConfigError(this.config.cache.cacheLocation);\r\n        }\r\n        // Initialize window handling code\r\n        window.openedWindows = [];\r\n        window.activeRenewals = {};\r\n        window.renewStates = [];\r\n        window.callbackMappedToRenewStates = {};\r\n        window.promiseMappedToRenewStates = {};\r\n        window.msal = this;\r\n        var urlHash = window.location.hash;\r\n        var urlContainsHash = this.urlContainsHash(urlHash);\r\n        // On the server 302 - Redirect, handle this\r\n        if (!this.config.framework.isAngular) {\r\n            if (urlContainsHash) {\r\n                this.handleAuthenticationResponse(urlHash);\r\n            }\r\n        }\r\n    }\r\n    Object.defineProperty(UserAgentApplication.prototype, "authority", {\r\n        /**\r\n         * Method to manage the authority URL.\r\n         *\r\n         * @returns {string} authority\r\n         */\r\n        get: function () {\r\n            return this.authorityInstance.CanonicalAuthority;\r\n        },\r\n        /**\r\n         * setter for the authority URL\r\n         * @param {string} authority\r\n         */\r\n        // If the developer passes an authority, create an instance\r\n        set: function (val) {\r\n            this.authorityInstance = AuthorityFactory_AuthorityFactory.CreateInstance(val, this.config.auth.validateAuthority);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Get the current authority instance from the MSAL configuration object\r\n     *\r\n     * @returns {@link Authority} authority instance\r\n     */\r\n    UserAgentApplication.prototype.getAuthorityInstance = function () {\r\n        return this.authorityInstance;\r\n    };\r\n    UserAgentApplication.prototype.handleRedirectCallback = function (authOrTokenCallback, errorReceivedCallback) {\r\n        if (!authOrTokenCallback) {\r\n            this.redirectCallbacksSet = false;\r\n            throw ClientConfigurationError_ClientConfigurationError.createInvalidCallbackObjectError(authOrTokenCallback);\r\n        }\r\n        // Set callbacks\r\n        if (errorReceivedCallback) {\r\n            this.tokenReceivedCallback = authOrTokenCallback;\r\n            this.errorReceivedCallback = errorReceivedCallback;\r\n            this.logger.warning("This overload for callback is deprecated - please change the format of the callbacks to a single callback as shown: (err: AuthError, response: AuthResponse).");\r\n        }\r\n        else {\r\n            this.authResponseCallback = authOrTokenCallback;\r\n        }\r\n        this.redirectCallbacksSet = true;\r\n        // On the server 302 - Redirect, handle this\r\n        if (!this.config.framework.isAngular) {\r\n            var cachedHash = this.cacheStorage.getItem(Constants.urlHash);\r\n            if (cachedHash) {\r\n                this.processCallBack(cachedHash, null);\r\n            }\r\n        }\r\n    };\r\n    UserAgentApplication.prototype.authResponseHandler = function (interactionType, response, resolve) {\r\n        if (interactionType === Constants.interactionTypeRedirect) {\r\n            if (this.errorReceivedCallback) {\r\n                this.tokenReceivedCallback(response);\r\n            }\r\n            else if (this.authResponseCallback) {\r\n                this.authResponseCallback(null, response);\r\n            }\r\n        }\r\n        else if (interactionType === Constants.interactionTypePopup) {\r\n            resolve(response);\r\n        }\r\n        else {\r\n            throw ClientAuthError_ClientAuthError.createInvalidInteractionTypeError();\r\n        }\r\n    };\r\n    UserAgentApplication.prototype.authErrorHandler = function (interactionType, authErr, response, reject) {\r\n        if (interactionType === Constants.interactionTypeRedirect) {\r\n            if (this.errorReceivedCallback) {\r\n                this.errorReceivedCallback(authErr, response.accountState);\r\n            }\r\n            else {\r\n                this.authResponseCallback(authErr, response);\r\n            }\r\n        }\r\n        else if (interactionType === Constants.interactionTypePopup) {\r\n            reject(authErr);\r\n        }\r\n        else {\r\n            throw ClientAuthError_ClientAuthError.createInvalidInteractionTypeError();\r\n        }\r\n    };\r\n    //#endregion\r\n    /**\r\n     * Use when initiating the login process by redirecting the user\'s browser to the authorization endpoint.\r\n     * @param {@link (AuthenticationParameters:type)}\r\n     */\r\n    UserAgentApplication.prototype.loginRedirect = function (request) {\r\n        // Throw error if callbacks are not set before redirect\r\n        if (!this.redirectCallbacksSet) {\r\n            throw ClientConfigurationError_ClientConfigurationError.createRedirectCallbacksNotSetError();\r\n        }\r\n        this.acquireTokenInteractive(Constants.interactionTypeRedirect, true, request);\r\n    };\r\n    /**\r\n     * Use when you want to obtain an access_token for your API by redirecting the user\'s browser window to the authorization endpoint.\r\n     * @param {@link (AuthenticationParameters:type)}\r\n     *\r\n     * To renew idToken, please pass clientId as the only scope in the Authentication Parameters\r\n     */\r\n    UserAgentApplication.prototype.acquireTokenRedirect = function (request) {\r\n        if (!request) {\r\n            throw ClientConfigurationError_ClientConfigurationError.createEmptyRequestError();\r\n        }\r\n        // Throw error if callbacks are not set before redirect\r\n        if (!this.redirectCallbacksSet) {\r\n            throw ClientConfigurationError_ClientConfigurationError.createRedirectCallbacksNotSetError();\r\n        }\r\n        this.acquireTokenInteractive(Constants.interactionTypeRedirect, false, request);\r\n    };\r\n    /**\r\n     * Use when initiating the login process via opening a popup window in the user\'s browser\r\n     *\r\n     * @param {@link (AuthenticationParameters:type)}\r\n     *\r\n     * @returns {Promise.<AuthResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     */\r\n    UserAgentApplication.prototype.loginPopup = function (request) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            _this.acquireTokenInteractive(Constants.interactionTypePopup, true, request, resolve, reject);\r\n        });\r\n    };\r\n    /**\r\n     * Use when you want to obtain an access_token for your API via opening a popup window in the user\'s browser\r\n     * @param {@link AuthenticationParameters}\r\n     *\r\n     * To renew idToken, please pass clientId as the only scope in the Authentication Parameters\r\n     * @returns {Promise.<AuthResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     */\r\n    UserAgentApplication.prototype.acquireTokenPopup = function (request) {\r\n        var _this = this;\r\n        if (!request) {\r\n            throw ClientConfigurationError_ClientConfigurationError.createEmptyRequestError();\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            _this.acquireTokenInteractive(Constants.interactionTypePopup, false, request, resolve, reject);\r\n        });\r\n    };\r\n    //#region Acquire Token\r\n    /**\r\n     * Use when initiating the login process or when you want to obtain an access_token for your API,\r\n     * either by redirecting the user\'s browser window to the authorization endpoint or via opening a popup window in the user\'s browser.\r\n     * @param {@link (AuthenticationParameters:type)}\r\n     *\r\n     * To renew idToken, please pass clientId as the only scope in the Authentication Parameters\r\n     */\r\n    UserAgentApplication.prototype.acquireTokenInteractive = function (interactionType, isLoginCall, request, resolve, reject) {\r\n        var _this = this;\r\n        // If already in progress, do not proceed\r\n        if (this.loginInProgress || this.acquireTokenInProgress) {\r\n            var thrownError = this.loginInProgress ? ClientAuthError_ClientAuthError.createLoginInProgressError() : ClientAuthError_ClientAuthError.createAcquireTokenInProgressError();\r\n            var stateOnlyResponse = buildResponseStateOnly(this.getAccountState(request && request.state));\r\n            this.authErrorHandler(interactionType, thrownError, stateOnlyResponse, reject);\r\n            return;\r\n        }\r\n        // if extraScopesToConsent is passed in loginCall, append them to the login request\r\n        var scopes = isLoginCall ? this.appendScopes(request) : request.scopes;\r\n        // Validate and filter scopes (the validate function will throw if validation fails)\r\n        this.validateInputScope(scopes, !isLoginCall);\r\n        // Get the account object if a session exists\r\n        var account = (request && request.account && !isLoginCall) ? request.account : this.getAccount();\r\n        // If no session exists, prompt the user to login.\r\n        if (!account && !ServerRequestParameters_ServerRequestParameters.isSSOParam(request)) {\r\n            if (isLoginCall) {\r\n                // extract ADAL id_token if exists\r\n                var adalIdToken = this.extractADALIdToken();\r\n                // silent login if ADAL id_token is retrieved successfully - SSO\r\n                if (adalIdToken && !scopes) {\r\n                    this.logger.info("ADAL\'s idToken exists. Extracting login information from ADAL\'s idToken ");\r\n                    var tokenRequest = this.buildIDTokenRequest(request);\r\n                    this.silentLogin = true;\r\n                    this.acquireTokenSilent(tokenRequest).then(function (response) {\r\n                        _this.silentLogin = false;\r\n                        _this.logger.info("Unified cache call is successful");\r\n                        _this.authResponseHandler(interactionType, response, resolve);\r\n                        return;\r\n                    }, function (error) {\r\n                        _this.silentLogin = false;\r\n                        _this.logger.error("Error occurred during unified cache ATS: " + error);\r\n                        // proceed to login since ATS failed\r\n                        _this.acquireTokenHelper(null, interactionType, isLoginCall, request, scopes, resolve, reject);\r\n                    });\r\n                }\r\n                // No ADAL token found, proceed to login\r\n                else {\r\n                    this.acquireTokenHelper(null, interactionType, isLoginCall, request, scopes, resolve, reject);\r\n                }\r\n            }\r\n            // AcquireToken call, but no account or context given, so throw error\r\n            else {\r\n                this.logger.info("User login is required");\r\n                throw ClientAuthError_ClientAuthError.createUserLoginRequiredError();\r\n            }\r\n        }\r\n        // User session exists\r\n        else {\r\n            this.acquireTokenHelper(account, interactionType, isLoginCall, request, scopes, resolve, reject);\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     * Helper function to acquireToken\r\n     *\r\n     */\r\n    UserAgentApplication.prototype.acquireTokenHelper = function (account, interactionType, isLoginCall, request, scopes, resolve, reject) {\r\n        var _this = this;\r\n        // Track the acquireToken progress\r\n        if (isLoginCall) {\r\n            this.loginInProgress = true;\r\n        }\r\n        else {\r\n            this.acquireTokenInProgress = true;\r\n        }\r\n        var scope = scopes ? scopes.join(" ").toLowerCase() : this.clientId.toLowerCase();\r\n        var serverAuthenticationRequest;\r\n        var acquireTokenAuthority = (!isLoginCall && request && request.authority) ? AuthorityFactory_AuthorityFactory.CreateInstance(request.authority, this.config.auth.validateAuthority) : this.authorityInstance;\r\n        var popUpWindow;\r\n        if (interactionType === Constants.interactionTypePopup) {\r\n            // Generate a popup window\r\n            popUpWindow = this.openWindow("about:blank", "_blank", 1, this, resolve, reject);\r\n            if (!popUpWindow) {\r\n                // We pass reject in openWindow, we reject there during an error\r\n                return;\r\n            }\r\n        }\r\n        acquireTokenAuthority.resolveEndpointsAsync().then(function () {\r\n            // On Fulfillment\r\n            var responseType = isLoginCall ? ResponseTypes.id_token : _this.getTokenType(account, scopes, false);\r\n            var loginStartPage;\r\n            if (isLoginCall) {\r\n                // if the user sets the login start page - angular only??\r\n                loginStartPage = _this.cacheStorage.getItem(Constants.angularLoginRequest);\r\n                if (!loginStartPage || loginStartPage === "") {\r\n                    loginStartPage = window.location.href;\r\n                }\r\n                else {\r\n                    _this.cacheStorage.setItem(Constants.angularLoginRequest, "");\r\n                }\r\n            }\r\n            serverAuthenticationRequest = new ServerRequestParameters_ServerRequestParameters(acquireTokenAuthority, _this.clientId, scopes, responseType, _this.getRedirectUri(), request && request.state);\r\n            _this.updateCacheEntries(serverAuthenticationRequest, account, loginStartPage);\r\n            // populate QueryParameters (sid/login_hint/domain_hint) and any other extraQueryParameters set by the developer\r\n            serverAuthenticationRequest.populateQueryParams(account, request);\r\n            // Construct urlNavigate\r\n            var urlNavigate = UrlUtils_UrlUtils.createNavigateUrl(serverAuthenticationRequest) + Constants.response_mode_fragment;\r\n            // set state in cache\r\n            if (interactionType === Constants.interactionTypeRedirect) {\r\n                if (!isLoginCall) {\r\n                    _this.cacheStorage.setItem(Constants.stateAcquireToken, serverAuthenticationRequest.state, _this.inCookie);\r\n                }\r\n            }\r\n            else if (interactionType === Constants.interactionTypePopup) {\r\n                window.renewStates.push(serverAuthenticationRequest.state);\r\n                window.requestType = isLoginCall ? Constants.login : Constants.renewToken;\r\n                // Register callback to capture results from server\r\n                _this.registerCallback(serverAuthenticationRequest.state, scope, resolve, reject);\r\n            }\r\n            else {\r\n                throw ClientAuthError_ClientAuthError.createInvalidInteractionTypeError();\r\n            }\r\n            // prompt user for interaction\r\n            _this.navigateWindow(urlNavigate, popUpWindow);\r\n        }).catch(function (err) {\r\n            _this.logger.warning("could not resolve endpoints");\r\n            _this.authErrorHandler(interactionType, ClientAuthError_ClientAuthError.createEndpointResolutionError(err.toString), buildResponseStateOnly(request.state), reject);\r\n            if (popUpWindow) {\r\n                popUpWindow.close();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Use this function to obtain a token before every call to the API / resource provider\r\n     *\r\n     * MSAL return\'s a cached token when available\r\n     * Or it send\'s a request to the STS to obtain a new token using a hidden iframe.\r\n     *\r\n     * @param {@link AuthenticationParameters}\r\n     *\r\n     * To renew idToken, please pass clientId as the only scope in the Authentication Parameters\r\n     * @returns {Promise.<AuthResponse>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     *\r\n     */\r\n    UserAgentApplication.prototype.acquireTokenSilent = function (request) {\r\n        var _this = this;\r\n        if (!request) {\r\n            throw ClientConfigurationError_ClientConfigurationError.createEmptyRequestError();\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            // Validate and filter scopes (the validate function will throw if validation fails)\r\n            _this.validateInputScope(request.scopes, true);\r\n            var scope = request.scopes.join(" ").toLowerCase();\r\n            // if the developer passes an account, give that account the priority\r\n            var account = request.account || _this.getAccount();\r\n            // extract if there is an adalIdToken stashed in the cache\r\n            var adalIdToken = _this.cacheStorage.getItem(Constants.adalIdToken);\r\n            //if there is no account logged in and no login_hint/sid is passed in the request\r\n            if (!account && !(request.sid || request.loginHint) && StringUtils.isEmpty(adalIdToken)) {\r\n                _this.logger.info("User login is required");\r\n                return reject(ClientAuthError_ClientAuthError.createUserLoginRequiredError());\r\n            }\r\n            var responseType = _this.getTokenType(account, request.scopes, true);\r\n            var serverAuthenticationRequest = new ServerRequestParameters_ServerRequestParameters(AuthorityFactory_AuthorityFactory.CreateInstance(request.authority, _this.config.auth.validateAuthority), _this.clientId, request.scopes, responseType, _this.getRedirectUri(), request && request.state);\r\n            // populate QueryParameters (sid/login_hint/domain_hint) and any other extraQueryParameters set by the developer\r\n            if (ServerRequestParameters_ServerRequestParameters.isSSOParam(request) || account) {\r\n                serverAuthenticationRequest.populateQueryParams(account, request);\r\n            }\r\n            //if user didn\'t pass login_hint/sid and adal\'s idtoken is present, extract the login_hint from the adalIdToken\r\n            else if (!account && !StringUtils.isEmpty(adalIdToken)) {\r\n                // if adalIdToken exists, extract the SSO info from the same\r\n                var adalIdTokenObject = TokenUtils_TokenUtils.extractIdToken(adalIdToken);\r\n                _this.logger.verbose("ADAL\'s idToken exists. Extracting login information from ADAL\'s idToken ");\r\n                serverAuthenticationRequest.populateQueryParams(account, null, adalIdTokenObject);\r\n            }\r\n            var userContainedClaims = request.claimsRequest || serverAuthenticationRequest.claimsValue;\r\n            var authErr;\r\n            var cacheResultResponse;\r\n            if (!userContainedClaims && !request.forceRefresh) {\r\n                try {\r\n                    cacheResultResponse = _this.getCachedToken(serverAuthenticationRequest, account);\r\n                }\r\n                catch (e) {\r\n                    authErr = e;\r\n                }\r\n            }\r\n            // resolve/reject based on cacheResult\r\n            if (cacheResultResponse) {\r\n                _this.logger.info("Token is already in cache for scope:" + scope);\r\n                resolve(cacheResultResponse);\r\n                return null;\r\n            }\r\n            else if (authErr) {\r\n                _this.logger.infoPii(authErr.errorCode + ":" + authErr.errorMessage);\r\n                reject(authErr);\r\n                return null;\r\n            }\r\n            // else proceed with login\r\n            else {\r\n                var logMessage = void 0;\r\n                if (userContainedClaims) {\r\n                    logMessage = "Skipped cache lookup since claims were given.";\r\n                }\r\n                else if (request.forceRefresh) {\r\n                    logMessage = "Skipped cache lookup since request.forceRefresh option was set to true";\r\n                }\r\n                else {\r\n                    logMessage = "Token is not in cache for scope:" + scope;\r\n                }\r\n                _this.logger.verbose(logMessage);\r\n                // Cache result can return null if cache is empty. In that case, set authority to default value if no authority is passed to the api.\r\n                if (!serverAuthenticationRequest.authorityInstance) {\r\n                    serverAuthenticationRequest.authorityInstance = request.authority ? AuthorityFactory_AuthorityFactory.CreateInstance(request.authority, _this.config.auth.validateAuthority) : _this.authorityInstance;\r\n                }\r\n                // cache miss\r\n                return serverAuthenticationRequest.authorityInstance.resolveEndpointsAsync()\r\n                    .then(function () {\r\n                    // refresh attempt with iframe\r\n                    // Already renewing for this scope, callback when we get the token.\r\n                    if (window.activeRenewals[scope]) {\r\n                        _this.logger.verbose("Renew token for scope: " + scope + " is in progress. Registering callback");\r\n                        // Active renewals contains the state for each renewal.\r\n                        _this.registerCallback(window.activeRenewals[scope], scope, resolve, reject);\r\n                    }\r\n                    else {\r\n                        if (request.scopes && request.scopes.indexOf(_this.clientId) > -1 && request.scopes.length === 1) {\r\n                            // App uses idToken to send to api endpoints\r\n                            // Default scope is tracked as clientId to store this token\r\n                            _this.logger.verbose("renewing idToken");\r\n                            _this.silentLogin = true;\r\n                            _this.renewIdToken(request.scopes, resolve, reject, account, serverAuthenticationRequest);\r\n                        }\r\n                        else {\r\n                            // renew access token\r\n                            _this.logger.verbose("renewing accesstoken");\r\n                            _this.renewToken(request.scopes, resolve, reject, account, serverAuthenticationRequest);\r\n                        }\r\n                    }\r\n                }).catch(function (err) {\r\n                    _this.logger.warning("could not resolve endpoints");\r\n                    reject(ClientAuthError_ClientAuthError.createEndpointResolutionError(err.toString()));\r\n                    return null;\r\n                });\r\n            }\r\n        });\r\n    };\r\n    //#endregion\r\n    //#region Popup Window Creation\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Used to send the user to the redirect_uri after authentication is complete. The user\'s bearer token is attached to the URI fragment as an id_token/access_token field.\r\n     * This function also closes the popup window after redirection.\r\n     *\r\n     * @param urlNavigate\r\n     * @param title\r\n     * @param interval\r\n     * @param instance\r\n     * @param resolve\r\n     * @param reject\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.openWindow = function (urlNavigate, title, interval, instance, resolve, reject) {\r\n        var _this = this;\r\n        // Generate a popup window\r\n        var popupWindow;\r\n        try {\r\n            popupWindow = this.openPopup(urlNavigate, title, Constants.popUpWidth, Constants.popUpHeight);\r\n        }\r\n        catch (e) {\r\n            instance.loginInProgress = false;\r\n            instance.acquireTokenInProgress = false;\r\n            this.logger.info(ClientAuthErrorMessage.popUpWindowError.code + ":" + ClientAuthErrorMessage.popUpWindowError.desc);\r\n            this.cacheStorage.setItem(Constants.msalError, ClientAuthErrorMessage.popUpWindowError.code);\r\n            this.cacheStorage.setItem(Constants.msalErrorDescription, ClientAuthErrorMessage.popUpWindowError.desc);\r\n            if (reject) {\r\n                reject(ClientAuthError_ClientAuthError.createPopupWindowError());\r\n            }\r\n            return null;\r\n        }\r\n        // Push popup window handle onto stack for tracking\r\n        window.openedWindows.push(popupWindow);\r\n        var pollTimer = window.setInterval(function () {\r\n            // If popup closed or login in progress, cancel login\r\n            if (popupWindow && popupWindow.closed && (instance.loginInProgress || instance.acquireTokenInProgress)) {\r\n                if (reject) {\r\n                    reject(ClientAuthError_ClientAuthError.createUserCancelledError());\r\n                }\r\n                window.clearInterval(pollTimer);\r\n                if (_this.config.framework.isAngular) {\r\n                    _this.broadcast("msal:popUpClosed", ClientAuthErrorMessage.userCancelledError.code + Constants.resourceDelimiter + ClientAuthErrorMessage.userCancelledError.desc);\r\n                    return;\r\n                }\r\n                instance.loginInProgress = false;\r\n                instance.acquireTokenInProgress = false;\r\n            }\r\n            try {\r\n                var popUpWindowLocation = popupWindow.location;\r\n                // If the popup hash changes, close the popup window\r\n                if (popUpWindowLocation.href.indexOf(_this.getRedirectUri()) !== -1) {\r\n                    window.clearInterval(pollTimer);\r\n                    instance.loginInProgress = false;\r\n                    instance.acquireTokenInProgress = false;\r\n                    _this.logger.info("Closing popup window");\r\n                    // TODO: Check how this can be extracted for any framework specific code?\r\n                    if (_this.config.framework.isAngular) {\r\n                        _this.broadcast("msal:popUpHashChanged", popUpWindowLocation.hash);\r\n                        for (var i = 0; i < window.openedWindows.length; i++) {\r\n                            window.openedWindows[i].close();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n                // Cross Domain url check error.\r\n                // Will be thrown until AAD redirects the user back to the app"s root page with the token.\r\n                // No need to log or throw this error as it will create unnecessary traffic.\r\n            }\r\n        }, interval);\r\n        return popupWindow;\r\n    };\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Configures popup window for login.\r\n     *\r\n     * @param urlNavigate\r\n     * @param title\r\n     * @param popUpWidth\r\n     * @param popUpHeight\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    UserAgentApplication.prototype.openPopup = function (urlNavigate, title, popUpWidth, popUpHeight) {\r\n        try {\r\n            /**\r\n             * adding winLeft and winTop to account for dual monitor\r\n             * using screenLeft and screenTop for IE8 and earlier\r\n             */\r\n            var winLeft = window.screenLeft ? window.screenLeft : window.screenX;\r\n            var winTop = window.screenTop ? window.screenTop : window.screenY;\r\n            /**\r\n             * window.innerWidth displays browser window"s height and width excluding toolbars\r\n             * using document.documentElement.clientWidth for IE8 and earlier\r\n             */\r\n            var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n            var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\r\n            var left = ((width / 2) - (popUpWidth / 2)) + winLeft;\r\n            var top_1 = ((height / 2) - (popUpHeight / 2)) + winTop;\r\n            // open the window\r\n            var popupWindow = window.open(urlNavigate, title, "width=" + popUpWidth + ", height=" + popUpHeight + ", top=" + top_1 + ", left=" + left);\r\n            if (!popupWindow) {\r\n                throw ClientAuthError_ClientAuthError.createPopupWindowError();\r\n            }\r\n            if (popupWindow.focus) {\r\n                popupWindow.focus();\r\n            }\r\n            return popupWindow;\r\n        }\r\n        catch (e) {\r\n            this.logger.error("error opening popup " + e.message);\r\n            this.loginInProgress = false;\r\n            this.acquireTokenInProgress = false;\r\n            throw ClientAuthError_ClientAuthError.createPopupWindowError(e.toString());\r\n        }\r\n    };\r\n    //#endregion\r\n    //#region Iframe Management\r\n    /**\r\n     * @hidden\r\n     * Returns whether current window is in ifram for token renewal\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.isInIframe = function () {\r\n        return window.parent !== window;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Returns whether parent window exists and has msal\r\n     */\r\n    UserAgentApplication.prototype.parentIsMsal = function () {\r\n        return window.parent !== window && window.parent.msal;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Calling _loadFrame but with a timeout to signal failure in loadframeStatus. Callbacks are left.\r\n     * registered when network errors occur and subsequent token requests for same resource are registered to the pending request.\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.loadIframeTimeout = function (urlNavigate, frameName, scope) {\r\n        var _this = this;\r\n        //set iframe session to pending\r\n        var expectedState = window.activeRenewals[scope];\r\n        this.logger.verbose("Set loading state to pending for: " + scope + ":" + expectedState);\r\n        this.cacheStorage.setItem(Constants.renewStatus + expectedState, Constants.tokenRenewStatusInProgress);\r\n        this.loadFrame(urlNavigate, frameName);\r\n        setTimeout(function () {\r\n            if (_this.cacheStorage.getItem(Constants.renewStatus + expectedState) === Constants.tokenRenewStatusInProgress) {\r\n                // fail the iframe session if it"s in pending state\r\n                _this.logger.verbose("Loading frame has timed out after: " + (_this.config.system.loadFrameTimeout / 1000) + " seconds for scope " + scope + ":" + expectedState);\r\n                // Error after timeout\r\n                if (expectedState && window.callbackMappedToRenewStates[expectedState]) {\r\n                    window.callbackMappedToRenewStates[expectedState](null, ClientAuthError_ClientAuthError.createTokenRenewalTimeoutError());\r\n                }\r\n                _this.cacheStorage.setItem(Constants.renewStatus + expectedState, Constants.tokenRenewStatusCancelled);\r\n            }\r\n        }, this.config.system.loadFrameTimeout);\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Loads iframe with authorization endpoint URL\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.loadFrame = function (urlNavigate, frameName) {\r\n        var _this = this;\r\n        // This trick overcomes iframe navigation in IE\r\n        // IE does not load the page consistently in iframe\r\n        this.logger.info("LoadFrame: " + frameName);\r\n        var frameCheck = frameName;\r\n        setTimeout(function () {\r\n            var frameHandle = _this.addHiddenIFrame(frameCheck);\r\n            if (frameHandle.src === "" || frameHandle.src === "about:blank") {\r\n                frameHandle.src = urlNavigate;\r\n                _this.logger.infoPii("Frame Name : " + frameName + " Navigated to: " + urlNavigate);\r\n            }\r\n        }, this.config.system.navigateFrameWait);\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Adds the hidden iframe for silent token renewal.\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.addHiddenIFrame = function (iframeId) {\r\n        if (typeof iframeId === "undefined") {\r\n            return null;\r\n        }\r\n        this.logger.info("Add msal frame to document:" + iframeId);\r\n        var adalFrame = document.getElementById(iframeId);\r\n        if (!adalFrame) {\r\n            if (document.createElement &&\r\n                document.documentElement &&\r\n                (window.navigator.userAgent.indexOf("MSIE 5.0") === -1)) {\r\n                var ifr = document.createElement("iframe");\r\n                ifr.setAttribute("id", iframeId);\r\n                ifr.style.visibility = "hidden";\r\n                ifr.style.position = "absolute";\r\n                ifr.style.width = ifr.style.height = "0";\r\n                ifr.style.border = "0";\r\n                adalFrame = document.getElementsByTagName("body")[0].appendChild(ifr);\r\n            }\r\n            else if (document.body && document.body.insertAdjacentHTML) {\r\n                document.body.insertAdjacentHTML("beforeend", "<iframe name=\'" + iframeId + "\' id=\'" + iframeId + "\' style=\'display:none\'></iframe>");\r\n            }\r\n            if (window.frames && window.frames[iframeId]) {\r\n                adalFrame = window.frames[iframeId];\r\n            }\r\n        }\r\n        return adalFrame;\r\n    };\r\n    //#endregion\r\n    //#region General Helpers\r\n    /**\r\n     * @hidden\r\n     * Used to redirect the browser to the STS authorization endpoint\r\n     * @param {string} urlNavigate - URL of the authorization endpoint\r\n     */\r\n    UserAgentApplication.prototype.navigateWindow = function (urlNavigate, popupWindow) {\r\n        // Navigate if valid URL\r\n        if (urlNavigate && !StringUtils.isEmpty(urlNavigate)) {\r\n            var navigateWindow = popupWindow ? popupWindow : window;\r\n            var logMessage = popupWindow ? "Navigated Popup window to:" + urlNavigate : "Navigate to:" + urlNavigate;\r\n            this.logger.infoPii(logMessage);\r\n            navigateWindow.location.replace(urlNavigate);\r\n        }\r\n        else {\r\n            this.logger.info("Navigate url is empty");\r\n            throw AuthError_AuthError.createUnexpectedError("Navigate url is empty");\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Used to add the developer requested callback to the array of callbacks for the specified scopes. The updated array is stored on the window object\r\n     * @param {string} expectedState - Unique state identifier (guid).\r\n     * @param {string} scope - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n     * @param {Function} resolve - The resolve function of the promise object.\r\n     * @param {Function} reject - The reject function of the promise object.\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.registerCallback = function (expectedState, scope, resolve, reject) {\r\n        var _this = this;\r\n        // track active renewals\r\n        window.activeRenewals[scope] = expectedState;\r\n        // initialize callbacks mapped array\r\n        if (!window.promiseMappedToRenewStates[expectedState]) {\r\n            window.promiseMappedToRenewStates[expectedState] = [];\r\n        }\r\n        // indexing on the current state, push the callback params to callbacks mapped\r\n        window.promiseMappedToRenewStates[expectedState].push({ resolve: resolve, reject: reject });\r\n        // Store the server esponse in the current window??\r\n        if (!window.callbackMappedToRenewStates[expectedState]) {\r\n            window.callbackMappedToRenewStates[expectedState] =\r\n                function (response, error) {\r\n                    // reset active renewals\r\n                    window.activeRenewals[scope] = null;\r\n                    // for all promiseMappedtoRenewStates for a given \'state\' - call the reject/resolve with error/token respectively\r\n                    for (var i = 0; i < window.promiseMappedToRenewStates[expectedState].length; ++i) {\r\n                        try {\r\n                            if (error) {\r\n                                window.promiseMappedToRenewStates[expectedState][i].reject(error);\r\n                            }\r\n                            else if (response) {\r\n                                window.promiseMappedToRenewStates[expectedState][i].resolve(response);\r\n                            }\r\n                            else {\r\n                                throw AuthError_AuthError.createUnexpectedError("Error and response are both null");\r\n                            }\r\n                        }\r\n                        catch (e) {\r\n                            _this.logger.warning(e);\r\n                        }\r\n                    }\r\n                    // reset\r\n                    window.promiseMappedToRenewStates[expectedState] = null;\r\n                    window.callbackMappedToRenewStates[expectedState] = null;\r\n                };\r\n        }\r\n    };\r\n    //#endregion\r\n    //#region Logout\r\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     */\r\n    UserAgentApplication.prototype.logout = function () {\r\n        var _this = this;\r\n        this.clearCache();\r\n        this.account = null;\r\n        var logout = "";\r\n        if (this.getPostLogoutRedirectUri()) {\r\n            logout = "post_logout_redirect_uri=" + encodeURIComponent(this.getPostLogoutRedirectUri());\r\n        }\r\n        this.authorityInstance.resolveEndpointsAsync().then(function (authority) {\r\n            var urlNavigate = authority.EndSessionEndpoint\r\n                ? authority.EndSessionEndpoint + "?" + logout\r\n                : _this.authority + "oauth2/v2.0/logout?" + logout;\r\n            _this.navigateWindow(urlNavigate);\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Clear all access tokens in the cache.\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.clearCache = function () {\r\n        window.renewStates = [];\r\n        var accessTokenItems = this.cacheStorage.getAllAccessTokens(Constants.clientId, Constants.homeAccountIdentifier);\r\n        for (var i = 0; i < accessTokenItems.length; i++) {\r\n            this.cacheStorage.removeItem(JSON.stringify(accessTokenItems[i].key));\r\n        }\r\n        this.cacheStorage.resetCacheItems();\r\n        this.cacheStorage.clearCookie();\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Clear a given access token from the cache.\r\n     *\r\n     * @param accessToken\r\n     */\r\n    UserAgentApplication.prototype.clearCacheForScope = function (accessToken) {\r\n        var accessTokenItems = this.cacheStorage.getAllAccessTokens(Constants.clientId, Constants.homeAccountIdentifier);\r\n        for (var i = 0; i < accessTokenItems.length; i++) {\r\n            var token = accessTokenItems[i];\r\n            if (token.value.accessToken === accessToken) {\r\n                this.cacheStorage.removeItem(JSON.stringify(token.key));\r\n            }\r\n        }\r\n    };\r\n    //#endregion\r\n    //#region Response\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     * Checks if the redirect response is received from the STS. In case of redirect, the url fragment has either id_token, access_token or error.\r\n     * @param {string} hash - Hash passed from redirect page.\r\n     * @returns {Boolean} - true if response contains id_token, access_token or error, false otherwise.\r\n     */\r\n    UserAgentApplication.prototype.isCallback = function (hash) {\r\n        this.logger.info("isCallback will be deprecated in favor of urlContainsHash in MSAL.js v2.0.");\r\n        return this.urlContainsHash(hash);\r\n    };\r\n    UserAgentApplication.prototype.urlContainsHash = function (urlString) {\r\n        var parameters = this.deserializeHash(urlString);\r\n        return (parameters.hasOwnProperty(Constants.errorDescription) ||\r\n            parameters.hasOwnProperty(Constants.error) ||\r\n            parameters.hasOwnProperty(Constants.accessToken) ||\r\n            parameters.hasOwnProperty(Constants.idToken));\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Used to call the constructor callback with the token/error\r\n     * @param {string} [hash=window.location.hash] - Hash fragment of Url.\r\n     */\r\n    UserAgentApplication.prototype.processCallBack = function (hash, stateInfo, parentCallback) {\r\n        this.logger.info("Processing the callback from redirect response");\r\n        // get the state info from the hash\r\n        if (!stateInfo) {\r\n            stateInfo = this.getResponseState(hash);\r\n        }\r\n        var response;\r\n        var authErr;\r\n        // Save the token info from the hash\r\n        try {\r\n            response = this.saveTokenFromHash(hash, stateInfo);\r\n        }\r\n        catch (err) {\r\n            authErr = err;\r\n        }\r\n        // remove hash from the cache\r\n        this.cacheStorage.removeItem(Constants.urlHash);\r\n        try {\r\n            // Clear the cookie in the hash\r\n            this.cacheStorage.clearCookie();\r\n            var accountState = this.getAccountState(stateInfo.state);\r\n            if (response) {\r\n                if ((stateInfo.requestType === Constants.renewToken) || response.accessToken) {\r\n                    if (window.parent !== window) {\r\n                        this.logger.verbose("Window is in iframe, acquiring token silently");\r\n                    }\r\n                    else {\r\n                        this.logger.verbose("acquiring token interactive in progress");\r\n                    }\r\n                    response.tokenType = Constants.accessToken;\r\n                }\r\n                else if (stateInfo.requestType === Constants.login) {\r\n                    response.tokenType = Constants.idToken;\r\n                }\r\n                if (!parentCallback) {\r\n                    this.authResponseHandler(Constants.interactionTypeRedirect, response);\r\n                    return;\r\n                }\r\n            }\r\n            else if (!parentCallback) {\r\n                this.authErrorHandler(Constants.interactionTypeRedirect, authErr, buildResponseStateOnly(accountState));\r\n                return;\r\n            }\r\n            parentCallback(response, authErr);\r\n        }\r\n        catch (err) {\r\n            this.logger.error("Error occurred in token received callback function: " + err);\r\n            throw ClientAuthError_ClientAuthError.createErrorInCallbackFunction(err.toString());\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     * This method must be called for processing the response received from the STS. It extracts the hash, processes the token or error information and saves it in the cache. It then\r\n     * calls the registered callbacks in case of redirect or resolves the promises with the result.\r\n     * @param {string} [hash=window.location.hash] - Hash fragment of Url.\r\n     */\r\n    UserAgentApplication.prototype.handleAuthenticationResponse = function (hash) {\r\n        // retrieve the hash\r\n        if (hash == null) {\r\n            hash = window.location.hash;\r\n        }\r\n        var self = null;\r\n        var isPopup = false;\r\n        var isWindowOpenerMsal = false;\r\n        // Check if the current window opened the iFrame/popup\r\n        try {\r\n            isWindowOpenerMsal = window.opener && window.opener.msal && window.opener.msal !== window.msal;\r\n        }\r\n        catch (err) {\r\n            // err = SecurityError: Blocked a frame with origin "[url]" from accessing a cross-origin frame.\r\n            isWindowOpenerMsal = false;\r\n        }\r\n        // Set the self to the window that created the popup/iframe\r\n        if (isWindowOpenerMsal) {\r\n            self = window.opener.msal;\r\n            isPopup = true;\r\n        }\r\n        else if (window.parent && window.parent.msal) {\r\n            self = window.parent.msal;\r\n        }\r\n        // if (window.parent !== window), by using self, window.parent becomes equal to window in getResponseState method specifically\r\n        var stateInfo = self.getResponseState(hash);\r\n        var tokenResponseCallback = null;\r\n        self.logger.info("Returned from redirect url");\r\n        // If parent window is the msal instance which opened the current window (iframe)\r\n        if (this.parentIsMsal()) {\r\n            tokenResponseCallback = window.parent.callbackMappedToRenewStates[stateInfo.state];\r\n        }\r\n        // Current window is window opener (popup)\r\n        else if (isWindowOpenerMsal) {\r\n            tokenResponseCallback = window.opener.callbackMappedToRenewStates[stateInfo.state];\r\n        }\r\n        // Redirect cases\r\n        else {\r\n            tokenResponseCallback = null;\r\n            // if set to navigate to loginRequest page post login\r\n            if (self.config.auth.navigateToLoginRequestUrl) {\r\n                self.cacheStorage.setItem(Constants.urlHash, hash);\r\n                if (window.parent === window && !isPopup) {\r\n                    window.location.href = self.cacheStorage.getItem(Constants.loginRequest, self.inCookie);\r\n                }\r\n                return;\r\n            }\r\n            else {\r\n                window.location.hash = "";\r\n            }\r\n            if (!this.redirectCallbacksSet) {\r\n                // We reached this point too early - cache hash, return and process in handleRedirectCallbacks\r\n                self.cacheStorage.setItem(Constants.urlHash, hash);\r\n                return;\r\n            }\r\n        }\r\n        self.processCallBack(hash, stateInfo, tokenResponseCallback);\r\n        // If current window is opener, close all windows\r\n        if (isWindowOpenerMsal) {\r\n            for (var i = 0; i < window.opener.openedWindows.length; i++) {\r\n                window.opener.openedWindows[i].close();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Returns deserialized portion of URL hash\r\n     * @param hash\r\n     */\r\n    UserAgentApplication.prototype.deserializeHash = function (urlFragment) {\r\n        var hash = UrlUtils_UrlUtils.getHashFromUrl(urlFragment);\r\n        return CryptoUtils.deserialize(hash);\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Creates a stateInfo object from the URL fragment and returns it.\r\n     * @param {string} hash  -  Hash passed from redirect page\r\n     * @returns {TokenResponse} an object created from the redirect response from AAD comprising of the keys - parameters, requestType, stateMatch, stateResponse and valid.\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.getResponseState = function (hash) {\r\n        var parameters = this.deserializeHash(hash);\r\n        var stateResponse;\r\n        if (!parameters) {\r\n            throw AuthError_AuthError.createUnexpectedError("Hash was not parsed correctly.");\r\n        }\r\n        if (parameters.hasOwnProperty("state")) {\r\n            stateResponse = {\r\n                requestType: Constants.unknown,\r\n                state: parameters.state,\r\n                stateMatch: false\r\n            };\r\n        }\r\n        else {\r\n            throw AuthError_AuthError.createUnexpectedError("Hash does not contain state.");\r\n        }\r\n        // async calls can fire iframe and login request at the same time if developer does not use the API as expected\r\n        // incoming callback needs to be looked up to find the request type\r\n        // loginRedirect\r\n        if (stateResponse.state === this.cacheStorage.getItem(Constants.stateLogin, this.inCookie) || stateResponse.state === this.silentAuthenticationState) { // loginRedirect\r\n            stateResponse.requestType = Constants.login;\r\n            stateResponse.stateMatch = true;\r\n            return stateResponse;\r\n        }\r\n        // acquireTokenRedirect\r\n        else if (stateResponse.state === this.cacheStorage.getItem(Constants.stateAcquireToken, this.inCookie)) { //acquireTokenRedirect\r\n            stateResponse.requestType = Constants.renewToken;\r\n            stateResponse.stateMatch = true;\r\n            return stateResponse;\r\n        }\r\n        // external api requests may have many renewtoken requests for different resource\r\n        if (!stateResponse.stateMatch) {\r\n            stateResponse.requestType = window.requestType;\r\n            var statesInParentContext = window.renewStates;\r\n            for (var i = 0; i < statesInParentContext.length; i++) {\r\n                if (statesInParentContext[i] === stateResponse.state) {\r\n                    stateResponse.stateMatch = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return stateResponse;\r\n    };\r\n    //#endregion\r\n    //#region Token Processing (Extract to TokenProcessing.ts)\r\n    /**\r\n     * @hidden\r\n     * Used to get token for the specified set of scopes from the cache\r\n     * @param {@link ServerRequestParameters} - Request sent to the STS to obtain an id_token/access_token\r\n     * @param {Account} account - Account for which the scopes were requested\r\n     */\r\n    UserAgentApplication.prototype.getCachedToken = function (serverAuthenticationRequest, account) {\r\n        var accessTokenCacheItem = null;\r\n        var scopes = serverAuthenticationRequest.scopes;\r\n        // filter by clientId and account\r\n        var tokenCacheItems = this.cacheStorage.getAllAccessTokens(this.clientId, account ? account.homeAccountIdentifier : null);\r\n        // No match found after initial filtering\r\n        if (tokenCacheItems.length === 0) {\r\n            return null;\r\n        }\r\n        var filteredItems = [];\r\n        // if no authority passed\r\n        if (!serverAuthenticationRequest.authority) {\r\n            // filter by scope\r\n            for (var i = 0; i < tokenCacheItems.length; i++) {\r\n                var cacheItem = tokenCacheItems[i];\r\n                var cachedScopes = cacheItem.key.scopes.split(" ");\r\n                if (ScopeSet.containsScope(cachedScopes, scopes)) {\r\n                    filteredItems.push(cacheItem);\r\n                }\r\n            }\r\n            // if only one cached token found\r\n            if (filteredItems.length === 1) {\r\n                accessTokenCacheItem = filteredItems[0];\r\n                serverAuthenticationRequest.authorityInstance = AuthorityFactory_AuthorityFactory.CreateInstance(accessTokenCacheItem.key.authority, this.config.auth.validateAuthority);\r\n            }\r\n            // if more than one cached token is found\r\n            else if (filteredItems.length > 1) {\r\n                throw ClientAuthError_ClientAuthError.createMultipleMatchingTokensInCacheError(scopes.toString());\r\n            }\r\n            // if no match found, check if there was a single authority used\r\n            else {\r\n                var authorityList = this.getUniqueAuthority(tokenCacheItems, "authority");\r\n                if (authorityList.length > 1) {\r\n                    throw ClientAuthError_ClientAuthError.createMultipleAuthoritiesInCacheError(scopes.toString());\r\n                }\r\n                serverAuthenticationRequest.authorityInstance = AuthorityFactory_AuthorityFactory.CreateInstance(authorityList[0], this.config.auth.validateAuthority);\r\n            }\r\n        }\r\n        // if an authority is passed in the API\r\n        else {\r\n            // filter by authority and scope\r\n            for (var i = 0; i < tokenCacheItems.length; i++) {\r\n                var cacheItem = tokenCacheItems[i];\r\n                var cachedScopes = cacheItem.key.scopes.split(" ");\r\n                if (ScopeSet.containsScope(cachedScopes, scopes) && UrlUtils_UrlUtils.CanonicalizeUri(cacheItem.key.authority) === serverAuthenticationRequest.authority) {\r\n                    filteredItems.push(cacheItem);\r\n                }\r\n            }\r\n            // no match\r\n            if (filteredItems.length === 0) {\r\n                return null;\r\n            }\r\n            // if only one cachedToken Found\r\n            else if (filteredItems.length === 1) {\r\n                accessTokenCacheItem = filteredItems[0];\r\n            }\r\n            else {\r\n                // if more than cached token is found\r\n                throw ClientAuthError_ClientAuthError.createMultipleMatchingTokensInCacheError(scopes.toString());\r\n            }\r\n        }\r\n        if (accessTokenCacheItem != null) {\r\n            var expired = Number(accessTokenCacheItem.value.expiresIn);\r\n            // If expiration is within offset, it will force renew\r\n            var offset = this.config.system.tokenRenewalOffsetSeconds || 300;\r\n            if (expired && (expired > TimeUtils.now() + offset)) {\r\n                var idTokenObj = new IdToken_IdToken(accessTokenCacheItem.value.idToken);\r\n                if (!account) {\r\n                    account = this.getAccount();\r\n                    if (!account) {\r\n                        throw AuthError_AuthError.createUnexpectedError("Account should not be null here.");\r\n                    }\r\n                }\r\n                var aState = this.getAccountState(serverAuthenticationRequest.state);\r\n                var response = {\r\n                    uniqueId: "",\r\n                    tenantId: "",\r\n                    tokenType: (accessTokenCacheItem.value.idToken === accessTokenCacheItem.value.accessToken) ? Constants.idToken : Constants.accessToken,\r\n                    idToken: idTokenObj,\r\n                    idTokenClaims: idTokenObj.claims,\r\n                    accessToken: accessTokenCacheItem.value.accessToken,\r\n                    scopes: accessTokenCacheItem.key.scopes.split(" "),\r\n                    expiresOn: new Date(expired * 1000),\r\n                    account: account,\r\n                    accountState: aState,\r\n                };\r\n                ResponseUtils_ResponseUtils.setResponseIdToken(response, idTokenObj);\r\n                return response;\r\n            }\r\n            else {\r\n                this.cacheStorage.removeItem(JSON.stringify(filteredItems[0].key));\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Used to get a unique list of authoritues from the cache\r\n     * @param {Array<AccessTokenCacheItem>}  accessTokenCacheItems - accessTokenCacheItems saved in the cache\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.getUniqueAuthority = function (accessTokenCacheItems, property) {\r\n        var authorityList = [];\r\n        var flags = [];\r\n        accessTokenCacheItems.forEach(function (element) {\r\n            if (element.key.hasOwnProperty(property) && (flags.indexOf(element.key[property]) === -1)) {\r\n                flags.push(element.key[property]);\r\n                authorityList.push(element.key[property]);\r\n            }\r\n        });\r\n        return authorityList;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Check if ADAL id_token exists and return if exists.\r\n     *\r\n     */\r\n    UserAgentApplication.prototype.extractADALIdToken = function () {\r\n        var adalIdToken = this.cacheStorage.getItem(Constants.adalIdToken);\r\n        if (!StringUtils.isEmpty(adalIdToken)) {\r\n            return TokenUtils_TokenUtils.extractIdToken(adalIdToken);\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Acquires access token using a hidden iframe.\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.renewToken = function (scopes, resolve, reject, account, serverAuthenticationRequest) {\r\n        var scope = scopes.join(" ").toLowerCase();\r\n        this.logger.verbose("renewToken is called for scope:" + scope);\r\n        var frameHandle = this.addHiddenIFrame("msalRenewFrame" + scope);\r\n        this.updateCacheEntries(serverAuthenticationRequest, account);\r\n        this.logger.verbose("Renew token Expected state: " + serverAuthenticationRequest.state);\r\n        // Build urlNavigate with "prompt=none" and navigate to URL in hidden iFrame\r\n        var urlNavigate = UrlUtils_UrlUtils.urlRemoveQueryStringParameter(UrlUtils_UrlUtils.createNavigateUrl(serverAuthenticationRequest), Constants.prompt) + Constants.prompt_none;\r\n        window.renewStates.push(serverAuthenticationRequest.state);\r\n        window.requestType = Constants.renewToken;\r\n        this.registerCallback(serverAuthenticationRequest.state, scope, resolve, reject);\r\n        this.logger.infoPii("Navigate to:" + urlNavigate);\r\n        frameHandle.src = "about:blank";\r\n        this.loadIframeTimeout(urlNavigate, "msalRenewFrame" + scope, scope);\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Renews idtoken for app"s own backend when clientId is passed as a single scope in the scopes array.\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.renewIdToken = function (scopes, resolve, reject, account, serverAuthenticationRequest) {\r\n        this.logger.info("renewidToken is called");\r\n        var frameHandle = this.addHiddenIFrame("msalIdTokenFrame");\r\n        this.updateCacheEntries(serverAuthenticationRequest, account);\r\n        this.logger.verbose("Renew Idtoken Expected state: " + serverAuthenticationRequest.state);\r\n        // Build urlNavigate with "prompt=none" and navigate to URL in hidden iFrame\r\n        var urlNavigate = UrlUtils_UrlUtils.urlRemoveQueryStringParameter(UrlUtils_UrlUtils.createNavigateUrl(serverAuthenticationRequest), Constants.prompt) + Constants.prompt_none;\r\n        if (this.silentLogin) {\r\n            window.requestType = Constants.login;\r\n            this.silentAuthenticationState = serverAuthenticationRequest.state;\r\n        }\r\n        else {\r\n            window.requestType = Constants.renewToken;\r\n            window.renewStates.push(serverAuthenticationRequest.state);\r\n        }\r\n        // note: scope here is clientId\r\n        this.registerCallback(serverAuthenticationRequest.state, this.clientId, resolve, reject);\r\n        this.logger.infoPii("Navigate to:" + urlNavigate);\r\n        frameHandle.src = "about:blank";\r\n        this.loadIframeTimeout(urlNavigate, "msalIdTokenFrame", this.clientId);\r\n    };\r\n    /**\r\n     * @hidden\r\n     *\r\n     * This method must be called for processing the response received from AAD. It extracts the hash, processes the token or error, saves it in the cache and calls the registered callbacks with the result.\r\n     * @param {string} authority authority received in the redirect response from AAD.\r\n     * @param {TokenResponse} requestInfo an object created from the redirect response from AAD comprising of the keys - parameters, requestType, stateMatch, stateResponse and valid.\r\n     * @param {Account} account account object for which scopes are consented for. The default account is the logged in account.\r\n     * @param {ClientInfo} clientInfo clientInfo received as part of the response comprising of fields uid and utid.\r\n     * @param {IdToken} idToken idToken received as part of the response.\r\n     * @ignore\r\n     * @private\r\n     */\r\n    /* tslint:disable:no-string-literal */\r\n    UserAgentApplication.prototype.saveAccessToken = function (response, authority, parameters, clientInfo, idTokenObj) {\r\n        var scope;\r\n        var accessTokenResponse = __assign({}, response);\r\n        var clientObj = new ClientInfo_ClientInfo(clientInfo);\r\n        var expiration;\r\n        // if the response contains "scope"\r\n        if (parameters.hasOwnProperty("scope")) {\r\n            // read the scopes\r\n            scope = parameters["scope"];\r\n            var consentedScopes = scope.split(" ");\r\n            // retrieve all access tokens from the cache, remove the dup scores\r\n            var accessTokenCacheItems = this.cacheStorage.getAllAccessTokens(this.clientId, authority);\r\n            for (var i = 0; i < accessTokenCacheItems.length; i++) {\r\n                var accessTokenCacheItem = accessTokenCacheItems[i];\r\n                if (accessTokenCacheItem.key.homeAccountIdentifier === response.account.homeAccountIdentifier) {\r\n                    var cachedScopes = accessTokenCacheItem.key.scopes.split(" ");\r\n                    if (ScopeSet.isIntersectingScopes(cachedScopes, consentedScopes)) {\r\n                        this.cacheStorage.removeItem(JSON.stringify(accessTokenCacheItem.key));\r\n                    }\r\n                }\r\n            }\r\n            // Generate and cache accessTokenKey and accessTokenValue\r\n            var expiresIn = TimeUtils.parseExpiresIn(parameters[Constants.expiresIn]);\r\n            expiration = TimeUtils.now() + expiresIn;\r\n            var accessTokenKey = new AccessTokenKey_AccessTokenKey(authority, this.clientId, scope, clientObj.uid, clientObj.utid);\r\n            var accessTokenValue = new AccessTokenValue(parameters[Constants.accessToken], idTokenObj.rawIdToken, expiration.toString(), clientInfo);\r\n            this.cacheStorage.setItem(JSON.stringify(accessTokenKey), JSON.stringify(accessTokenValue));\r\n            accessTokenResponse.accessToken = parameters[Constants.accessToken];\r\n            accessTokenResponse.scopes = consentedScopes;\r\n        }\r\n        // if the response does not contain "scope" - scope is usually client_id and the token will be id_token\r\n        else {\r\n            scope = this.clientId;\r\n            // Generate and cache accessTokenKey and accessTokenValue\r\n            var accessTokenKey = new AccessTokenKey_AccessTokenKey(authority, this.clientId, scope, clientObj.uid, clientObj.utid);\r\n            expiration = Number(idTokenObj.expiration);\r\n            var accessTokenValue = new AccessTokenValue(parameters[Constants.idToken], parameters[Constants.idToken], expiration.toString(), clientInfo);\r\n            this.cacheStorage.setItem(JSON.stringify(accessTokenKey), JSON.stringify(accessTokenValue));\r\n            accessTokenResponse.scopes = [scope];\r\n            accessTokenResponse.accessToken = parameters[Constants.idToken];\r\n        }\r\n        if (expiration) {\r\n            accessTokenResponse.expiresOn = new Date(expiration * 1000);\r\n        }\r\n        else {\r\n            this.logger.error("Could not parse expiresIn parameter");\r\n        }\r\n        return accessTokenResponse;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * Saves token or error received in the response from AAD in the cache. In case of id_token, it also creates the account object.\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.saveTokenFromHash = function (hash, stateInfo) {\r\n        this.logger.info("State status:" + stateInfo.stateMatch + "; Request type:" + stateInfo.requestType);\r\n        this.cacheStorage.setItem(Constants.msalError, "");\r\n        this.cacheStorage.setItem(Constants.msalErrorDescription, "");\r\n        var response = {\r\n            uniqueId: "",\r\n            tenantId: "",\r\n            tokenType: "",\r\n            idToken: null,\r\n            idTokenClaims: null,\r\n            accessToken: null,\r\n            scopes: [],\r\n            expiresOn: null,\r\n            account: null,\r\n            accountState: "",\r\n        };\r\n        var error;\r\n        var hashParams = this.deserializeHash(hash);\r\n        var authorityKey = "";\r\n        var acquireTokenAccountKey = "";\r\n        var idTokenObj = null;\r\n        // If server returns an error\r\n        if (hashParams.hasOwnProperty(Constants.errorDescription) || hashParams.hasOwnProperty(Constants.error)) {\r\n            this.logger.infoPii("Error :" + hashParams[Constants.error] + "; Error description:" + hashParams[Constants.errorDescription]);\r\n            this.cacheStorage.setItem(Constants.msalError, hashParams[Constants.error]);\r\n            this.cacheStorage.setItem(Constants.msalErrorDescription, hashParams[Constants.errorDescription]);\r\n            // login\r\n            if (stateInfo.requestType === Constants.login) {\r\n                this.loginInProgress = false;\r\n                this.cacheStorage.setItem(Constants.loginError, hashParams[Constants.errorDescription] + ":" + hashParams[Constants.error]);\r\n                authorityKey = Storage_Storage.generateAuthorityKey(stateInfo.state);\r\n            }\r\n            // acquireToken\r\n            if (stateInfo.requestType === Constants.renewToken) {\r\n                this.acquireTokenInProgress = false;\r\n                authorityKey = Storage_Storage.generateAuthorityKey(stateInfo.state);\r\n                var account = this.getAccount();\r\n                var accountId = void 0;\r\n                if (account && !StringUtils.isEmpty(account.homeAccountIdentifier)) {\r\n                    accountId = account.homeAccountIdentifier;\r\n                }\r\n                else {\r\n                    accountId = Constants.no_account;\r\n                }\r\n                acquireTokenAccountKey = Storage_Storage.generateAcquireTokenAccountKey(accountId, stateInfo.state);\r\n            }\r\n            var _a = Constants.error, hashErr = hashParams[_a], _b = Constants.errorDescription, hashErrDesc = hashParams[_b];\r\n            if (InteractionRequiredAuthError_InteractionRequiredAuthError.isInteractionRequiredError(hashErr) ||\r\n                InteractionRequiredAuthError_InteractionRequiredAuthError.isInteractionRequiredError(hashErrDesc)) {\r\n                error = new InteractionRequiredAuthError_InteractionRequiredAuthError(hashParams[Constants.error], hashParams[Constants.errorDescription]);\r\n            }\r\n            else {\r\n                error = new ServerError_ServerError(hashParams[Constants.error], hashParams[Constants.errorDescription]);\r\n            }\r\n        }\r\n        // If the server returns "Success"\r\n        else {\r\n            // Verify the state from redirect and record tokens to storage if exists\r\n            if (stateInfo.stateMatch) {\r\n                this.logger.info("State is right");\r\n                if (hashParams.hasOwnProperty(Constants.sessionState)) {\r\n                    this.cacheStorage.setItem(Constants.msalSessionState, hashParams[Constants.sessionState]);\r\n                }\r\n                response.accountState = this.getAccountState(stateInfo.state);\r\n                var clientInfo = "";\r\n                // Process access_token\r\n                if (hashParams.hasOwnProperty(Constants.accessToken)) {\r\n                    this.logger.info("Fragment has access token");\r\n                    this.acquireTokenInProgress = false;\r\n                    // retrieve the id_token from response if present\r\n                    if (hashParams.hasOwnProperty(Constants.idToken)) {\r\n                        idTokenObj = new IdToken_IdToken(hashParams[Constants.idToken]);\r\n                        response.idToken = idTokenObj;\r\n                        response.idTokenClaims = idTokenObj.claims;\r\n                    }\r\n                    else {\r\n                        idTokenObj = new IdToken_IdToken(this.cacheStorage.getItem(Constants.idTokenKey));\r\n                        response = ResponseUtils_ResponseUtils.setResponseIdToken(response, idTokenObj);\r\n                    }\r\n                    // retrieve the authority from cache and replace with tenantID\r\n                    var authorityKey_1 = Storage_Storage.generateAuthorityKey(stateInfo.state);\r\n                    var authority = this.cacheStorage.getItem(authorityKey_1, this.inCookie);\r\n                    if (!StringUtils.isEmpty(authority)) {\r\n                        authority = UrlUtils_UrlUtils.replaceTenantPath(authority, response.tenantId);\r\n                    }\r\n                    // retrieve client_info - if it is not found, generate the uid and utid from idToken\r\n                    if (hashParams.hasOwnProperty(Constants.clientInfo)) {\r\n                        clientInfo = hashParams[Constants.clientInfo];\r\n                    }\r\n                    else {\r\n                        this.logger.warning("ClientInfo not received in the response from AAD");\r\n                        throw ClientAuthError_ClientAuthError.createClientInfoNotPopulatedError("ClientInfo not received in the response from the server");\r\n                    }\r\n                    response.account = Account_Account.createAccount(idTokenObj, new ClientInfo_ClientInfo(clientInfo));\r\n                    var accountKey = void 0;\r\n                    if (response.account && !StringUtils.isEmpty(response.account.homeAccountIdentifier)) {\r\n                        accountKey = response.account.homeAccountIdentifier;\r\n                    }\r\n                    else {\r\n                        accountKey = Constants.no_account;\r\n                    }\r\n                    acquireTokenAccountKey = Storage_Storage.generateAcquireTokenAccountKey(accountKey, stateInfo.state);\r\n                    var acquireTokenAccountKey_noaccount = Storage_Storage.generateAcquireTokenAccountKey(Constants.no_account, stateInfo.state);\r\n                    var cachedAccount = this.cacheStorage.getItem(acquireTokenAccountKey);\r\n                    var acquireTokenAccount = void 0;\r\n                    // Check with the account in the Cache\r\n                    if (!StringUtils.isEmpty(cachedAccount)) {\r\n                        acquireTokenAccount = JSON.parse(cachedAccount);\r\n                        if (response.account && acquireTokenAccount && Account_Account.compareAccounts(response.account, acquireTokenAccount)) {\r\n                            response = this.saveAccessToken(response, authority, hashParams, clientInfo, idTokenObj);\r\n                            this.logger.info("The user object received in the response is the same as the one passed in the acquireToken request");\r\n                        }\r\n                        else {\r\n                            this.logger.warning("The account object created from the response is not the same as the one passed in the acquireToken request");\r\n                        }\r\n                    }\r\n                    else if (!StringUtils.isEmpty(this.cacheStorage.getItem(acquireTokenAccountKey_noaccount))) {\r\n                        response = this.saveAccessToken(response, authority, hashParams, clientInfo, idTokenObj);\r\n                    }\r\n                }\r\n                // Process id_token\r\n                if (hashParams.hasOwnProperty(Constants.idToken)) {\r\n                    this.logger.info("Fragment has id token");\r\n                    // login no longer in progress\r\n                    this.loginInProgress = false;\r\n                    // set the idToken\r\n                    idTokenObj = new IdToken_IdToken(hashParams[Constants.idToken]);\r\n                    response = ResponseUtils_ResponseUtils.setResponseIdToken(response, idTokenObj);\r\n                    if (hashParams.hasOwnProperty(Constants.clientInfo)) {\r\n                        clientInfo = hashParams[Constants.clientInfo];\r\n                    }\r\n                    else {\r\n                        this.logger.warning("ClientInfo not received in the response from AAD");\r\n                    }\r\n                    authorityKey = Storage_Storage.generateAuthorityKey(stateInfo.state);\r\n                    var authority = this.cacheStorage.getItem(authorityKey, this.inCookie);\r\n                    if (!StringUtils.isEmpty(authority)) {\r\n                        authority = UrlUtils_UrlUtils.replaceTenantPath(authority, idTokenObj.tenantId);\r\n                    }\r\n                    this.account = Account_Account.createAccount(idTokenObj, new ClientInfo_ClientInfo(clientInfo));\r\n                    response.account = this.account;\r\n                    if (idTokenObj && idTokenObj.nonce) {\r\n                        // check nonce integrity if idToken has nonce - throw an error if not matched\r\n                        if (idTokenObj.nonce !== this.cacheStorage.getItem(Constants.nonceIdToken, this.inCookie)) {\r\n                            this.account = null;\r\n                            this.cacheStorage.setItem(Constants.loginError, "Nonce Mismatch. Expected Nonce: " + this.cacheStorage.getItem(Constants.nonceIdToken, this.inCookie) + "," + "Actual Nonce: " + idTokenObj.nonce);\r\n                            this.logger.error("Nonce Mismatch.Expected Nonce: " + this.cacheStorage.getItem(Constants.nonceIdToken, this.inCookie) + "," + "Actual Nonce: " + idTokenObj.nonce);\r\n                            error = ClientAuthError_ClientAuthError.createNonceMismatchError(this.cacheStorage.getItem(Constants.nonceIdToken, this.inCookie), idTokenObj.nonce);\r\n                        }\r\n                        // Save the token\r\n                        else {\r\n                            this.cacheStorage.setItem(Constants.idTokenKey, hashParams[Constants.idToken]);\r\n                            this.cacheStorage.setItem(Constants.msalClientInfo, clientInfo);\r\n                            // Save idToken as access token for app itself\r\n                            this.saveAccessToken(response, authority, hashParams, clientInfo, idTokenObj);\r\n                        }\r\n                    }\r\n                    else {\r\n                        authorityKey = stateInfo.state;\r\n                        acquireTokenAccountKey = stateInfo.state;\r\n                        this.logger.error("Invalid id_token received in the response");\r\n                        error = ClientAuthError_ClientAuthError.createInvalidIdTokenError(idTokenObj);\r\n                        this.cacheStorage.setItem(Constants.msalError, error.errorCode);\r\n                        this.cacheStorage.setItem(Constants.msalErrorDescription, error.errorMessage);\r\n                    }\r\n                }\r\n            }\r\n            // State mismatch - unexpected/invalid state\r\n            else {\r\n                authorityKey = stateInfo.state;\r\n                acquireTokenAccountKey = stateInfo.state;\r\n                var expectedState = this.cacheStorage.getItem(Constants.stateLogin, this.inCookie);\r\n                this.logger.error("State Mismatch.Expected State: " + expectedState + "," + "Actual State: " + stateInfo.state);\r\n                error = ClientAuthError_ClientAuthError.createInvalidStateError(stateInfo.state, expectedState);\r\n                this.cacheStorage.setItem(Constants.msalError, error.errorCode);\r\n                this.cacheStorage.setItem(Constants.msalErrorDescription, error.errorMessage);\r\n            }\r\n        }\r\n        this.cacheStorage.setItem(Constants.renewStatus + stateInfo.state, Constants.tokenRenewStatusCompleted);\r\n        this.cacheStorage.removeAcquireTokenEntries(stateInfo.state);\r\n        // this is required if navigateToLoginRequestUrl=false\r\n        if (this.inCookie) {\r\n            this.cacheStorage.setItemCookie(authorityKey, "", -1);\r\n            this.cacheStorage.clearCookie();\r\n        }\r\n        if (error) {\r\n            throw error;\r\n        }\r\n        if (!response) {\r\n            throw AuthError_AuthError.createUnexpectedError("Response is null");\r\n        }\r\n        return response;\r\n    };\r\n    /* tslint:enable:no-string-literal */\r\n    //#endregion\r\n    //#region Account\r\n    /**\r\n     * Returns the signed in account\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no state is found\r\n     * @returns {@link Account} - the account object stored in MSAL\r\n     */\r\n    UserAgentApplication.prototype.getAccount = function () {\r\n        // if a session already exists, get the account from the session\r\n        if (this.account) {\r\n            return this.account;\r\n        }\r\n        // frame is used to get idToken and populate the account for the given session\r\n        var rawIdToken = this.cacheStorage.getItem(Constants.idTokenKey);\r\n        var rawClientInfo = this.cacheStorage.getItem(Constants.msalClientInfo);\r\n        if (!StringUtils.isEmpty(rawIdToken) && !StringUtils.isEmpty(rawClientInfo)) {\r\n            var idToken = new IdToken_IdToken(rawIdToken);\r\n            var clientInfo = new ClientInfo_ClientInfo(rawClientInfo);\r\n            this.account = Account_Account.createAccount(idToken, clientInfo);\r\n            return this.account;\r\n        }\r\n        // if login not yet done, return null\r\n        return null;\r\n    };\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Extracts state value from the accountState sent with the authentication request.\r\n     * @returns {string} scope.\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.getAccountState = function (state) {\r\n        if (state) {\r\n            var splitIndex = state.indexOf("|");\r\n            if (splitIndex > -1 && splitIndex + 1 < state.length) {\r\n                return state.substring(splitIndex + 1);\r\n            }\r\n        }\r\n        return state;\r\n    };\r\n    /**\r\n     * Use to get a list of unique accounts in MSAL cache based on homeAccountIdentifier.\r\n     *\r\n     * @param {@link Array<Account>} Account - all unique accounts in MSAL cache.\r\n     */\r\n    UserAgentApplication.prototype.getAllAccounts = function () {\r\n        var accounts = [];\r\n        var accessTokenCacheItems = this.cacheStorage.getAllAccessTokens(Constants.clientId, Constants.homeAccountIdentifier);\r\n        for (var i = 0; i < accessTokenCacheItems.length; i++) {\r\n            var idToken = new IdToken_IdToken(accessTokenCacheItems[i].value.idToken);\r\n            var clientInfo = new ClientInfo_ClientInfo(accessTokenCacheItems[i].value.homeAccountIdentifier);\r\n            var account = Account_Account.createAccount(idToken, clientInfo);\r\n            accounts.push(account);\r\n        }\r\n        return this.getUniqueAccounts(accounts);\r\n    };\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Used to filter accounts based on homeAccountIdentifier\r\n     * @param {Array<Account>}  Accounts - accounts saved in the cache\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.getUniqueAccounts = function (accounts) {\r\n        if (!accounts || accounts.length <= 1) {\r\n            return accounts;\r\n        }\r\n        var flags = [];\r\n        var uniqueAccounts = [];\r\n        for (var index = 0; index < accounts.length; ++index) {\r\n            if (accounts[index].homeAccountIdentifier && flags.indexOf(accounts[index].homeAccountIdentifier) === -1) {\r\n                flags.push(accounts[index].homeAccountIdentifier);\r\n                uniqueAccounts.push(accounts[index]);\r\n            }\r\n        }\r\n        return uniqueAccounts;\r\n    };\r\n    //#endregion\r\n    //#region Scopes (Extract to Scopes.ts)\r\n    // Note: "this" dependency in this section is minimal.\r\n    // If pCacheStorage is separated from the class object, or passed as a fn param, scopesUtils.ts can be created\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Used to validate the scopes input parameter requested  by the developer.\r\n     * @param {Array<string>} scopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.validateInputScope = function (scopes, scopesRequired) {\r\n        if (!scopes) {\r\n            if (scopesRequired) {\r\n                throw ClientConfigurationError_ClientConfigurationError.createScopesRequiredError(scopes);\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n        }\r\n        // Check that scopes is an array object (also throws error if scopes == null)\r\n        if (!Array.isArray(scopes)) {\r\n            throw ClientConfigurationError_ClientConfigurationError.createScopesNonArrayError(scopes);\r\n        }\r\n        // Check that scopes is not an empty array\r\n        if (scopes.length < 1) {\r\n            throw ClientConfigurationError_ClientConfigurationError.createEmptyScopesArrayError(scopes.toString());\r\n        }\r\n        // Check that clientId is passed as single scope\r\n        if (scopes.indexOf(this.clientId) > -1) {\r\n            if (scopes.length > 1) {\r\n                throw ClientConfigurationError_ClientConfigurationError.createClientIdSingleScopeError(scopes.toString());\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Extracts scope value from the state sent with the authentication request.\r\n     * @param {string} state\r\n     * @returns {string} scope.\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.getScopeFromState = function (state) {\r\n        if (state) {\r\n            var splitIndex = state.indexOf("|");\r\n            if (splitIndex > -1 && splitIndex + 1 < state.length) {\r\n                return state.substring(splitIndex + 1);\r\n            }\r\n        }\r\n        return "";\r\n    };\r\n    /**\r\n     * @ignore\r\n     * Appends extraScopesToConsent if passed\r\n     * @param {@link AuthenticationParameters}\r\n     */\r\n    UserAgentApplication.prototype.appendScopes = function (request) {\r\n        var scopes;\r\n        if (request && request.scopes) {\r\n            if (request.extraScopesToConsent) {\r\n                scopes = request.scopes.concat(request.extraScopesToConsent);\r\n            }\r\n            else {\r\n                scopes = request.scopes;\r\n            }\r\n        }\r\n        return scopes;\r\n    };\r\n    //#endregion\r\n    //#region Angular\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Broadcast messages - Used only for Angular?  *\r\n     * @param eventName\r\n     * @param data\r\n     */\r\n    UserAgentApplication.prototype.broadcast = function (eventName, data) {\r\n        var evt = new CustomEvent(eventName, { detail: data });\r\n        window.dispatchEvent(evt);\r\n    };\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Helper function to retrieve the cached token\r\n     *\r\n     * @param scopes\r\n     * @param {@link Account} account\r\n     * @param state\r\n     * @return {@link AuthResponse} AuthResponse\r\n     */\r\n    UserAgentApplication.prototype.getCachedTokenInternal = function (scopes, account, state) {\r\n        // Get the current session\'s account object\r\n        var accountObject = account || this.getAccount();\r\n        if (!accountObject) {\r\n            return null;\r\n        }\r\n        // Construct AuthenticationRequest based on response type\r\n        var newAuthority = this.authorityInstance ? this.authorityInstance : AuthorityFactory_AuthorityFactory.CreateInstance(this.authority, this.config.auth.validateAuthority);\r\n        var responseType = this.getTokenType(accountObject, scopes, true);\r\n        var serverAuthenticationRequest = new ServerRequestParameters_ServerRequestParameters(newAuthority, this.clientId, scopes, responseType, this.getRedirectUri(), state);\r\n        // get cached token\r\n        return this.getCachedToken(serverAuthenticationRequest, account);\r\n    };\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Get scopes for the Endpoint - Used in Angular to track protected and unprotected resources without interaction from the developer app\r\n     *\r\n     * @param endpoint\r\n     */\r\n    UserAgentApplication.prototype.getScopesForEndpoint = function (endpoint) {\r\n        // if user specified list of unprotectedResources, no need to send token to these endpoints, return null.\r\n        if (this.config.framework.unprotectedResources.length > 0) {\r\n            for (var i = 0; i < this.config.framework.unprotectedResources.length; i++) {\r\n                if (endpoint.indexOf(this.config.framework.unprotectedResources[i]) > -1) {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        // process all protected resources and send the matched one\r\n        if (this.config.framework.protectedResourceMap.size > 0) {\r\n            for (var _i = 0, _a = Array.from(this.config.framework.protectedResourceMap.keys()); _i < _a.length; _i++) {\r\n                var key = _a[_i];\r\n                // configEndpoint is like /api/Todo requested endpoint can be /api/Todo/1\r\n                if (endpoint.indexOf(key) > -1) {\r\n                    return this.config.framework.protectedResourceMap.get(key);\r\n                }\r\n            }\r\n        }\r\n        // default resource will be clientid if nothing specified\r\n        // App will use idtoken for calls to itself\r\n        // check if it\'s staring from http or https, needs to match with app host\r\n        if (endpoint.indexOf("http://") > -1 || endpoint.indexOf("https://") > -1) {\r\n            if (this.getHostFromUri(endpoint) === this.getHostFromUri(this.getRedirectUri())) {\r\n                return new Array(this.clientId);\r\n            }\r\n        }\r\n        else {\r\n            // in angular level, the url for $http interceptor call could be relative url,\r\n            // if it\'s relative call, we\'ll treat it as app backend call.\r\n            return new Array(this.clientId);\r\n        }\r\n        // if not the app\'s own backend or not a domain listed in the endpoints structure\r\n        return null;\r\n    };\r\n    /**\r\n     * Return boolean flag to developer to help inform if login is in progress\r\n     * @returns {boolean} true/false\r\n     */\r\n    UserAgentApplication.prototype.getLoginInProgress = function () {\r\n        var pendingCallback = this.cacheStorage.getItem(Constants.urlHash);\r\n        if (pendingCallback) {\r\n            return true;\r\n        }\r\n        return this.loginInProgress;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * @param loginInProgress\r\n     */\r\n    UserAgentApplication.prototype.setloginInProgress = function (loginInProgress) {\r\n        this.loginInProgress = loginInProgress;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * returns the status of acquireTokenInProgress\r\n     */\r\n    UserAgentApplication.prototype.getAcquireTokenInProgress = function () {\r\n        return this.acquireTokenInProgress;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * @param acquireTokenInProgress\r\n     */\r\n    UserAgentApplication.prototype.setAcquireTokenInProgress = function (acquireTokenInProgress) {\r\n        this.acquireTokenInProgress = acquireTokenInProgress;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * returns the logger handle\r\n     */\r\n    UserAgentApplication.prototype.getLogger = function () {\r\n        return this.config.system.logger;\r\n    };\r\n    //#endregion\r\n    //#region Getters and Setters\r\n    /**\r\n     *\r\n     * Use to get the redirect uri configured in MSAL or null.\r\n     * Evaluates redirectUri if its a function, otherwise simply returns its value.\r\n     * @returns {string} redirect URL\r\n     *\r\n     */\r\n    UserAgentApplication.prototype.getRedirectUri = function () {\r\n        if (typeof this.config.auth.redirectUri === "function") {\r\n            return this.config.auth.redirectUri();\r\n        }\r\n        return this.config.auth.redirectUri;\r\n    };\r\n    /**\r\n     * Use to get the post logout redirect uri configured in MSAL or null.\r\n     * Evaluates postLogoutredirectUri if its a function, otherwise simply returns its value.\r\n     *\r\n     * @returns {string} post logout redirect URL\r\n     */\r\n    UserAgentApplication.prototype.getPostLogoutRedirectUri = function () {\r\n        if (typeof this.config.auth.postLogoutRedirectUri === "function") {\r\n            return this.config.auth.postLogoutRedirectUri();\r\n        }\r\n        return this.config.auth.postLogoutRedirectUri;\r\n    };\r\n    /**\r\n     * Use to get the current {@link Configuration} object in MSAL\r\n     *\r\n     * @returns {@link Configuration}\r\n     */\r\n    UserAgentApplication.prototype.getCurrentConfiguration = function () {\r\n        if (!this.config) {\r\n            throw ClientConfigurationError_ClientConfigurationError.createNoSetConfigurationError();\r\n        }\r\n        return this.config;\r\n    };\r\n    //#endregion\r\n    //#region String Util (Should be extracted to Utils.ts)\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * extract URI from the host\r\n     *\r\n     * @param {string} URI\r\n     * @returns {string} host from the URI\r\n     */\r\n    UserAgentApplication.prototype.getHostFromUri = function (uri) {\r\n        // remove http:// or https:// from uri\r\n        var extractedUri = String(uri).replace(/^(https?:)\\/\\//, "");\r\n        extractedUri = extractedUri.split("/")[0];\r\n        return extractedUri;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * Utils function to create the Authentication\r\n     * @param {@link account} account object\r\n     * @param scopes\r\n     * @param silentCall\r\n     *\r\n     * @returns {string} token type: id_token or access_token\r\n     *\r\n     */\r\n    UserAgentApplication.prototype.getTokenType = function (accountObject, scopes, silentCall) {\r\n        // if account is passed and matches the account object/or set to getAccount() from cache\r\n        // if client-id is passed as scope, get id_token else token/id_token_token (in case no session exists)\r\n        var tokenType;\r\n        // acquireTokenSilent\r\n        if (silentCall) {\r\n            if (Account_Account.compareAccounts(accountObject, this.getAccount())) {\r\n                tokenType = (scopes.indexOf(this.config.auth.clientId) > -1) ? ResponseTypes.id_token : ResponseTypes.token;\r\n            }\r\n            else {\r\n                tokenType = (scopes.indexOf(this.config.auth.clientId) > -1) ? ResponseTypes.id_token : ResponseTypes.id_token_token;\r\n            }\r\n            return tokenType;\r\n        }\r\n        // all other cases\r\n        else {\r\n            if (!Account_Account.compareAccounts(accountObject, this.getAccount())) {\r\n                tokenType = ResponseTypes.id_token_token;\r\n            }\r\n            else {\r\n                tokenType = (scopes.indexOf(this.clientId) > -1) ? ResponseTypes.id_token : ResponseTypes.token;\r\n            }\r\n            return tokenType;\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * Sets the cachekeys for and stores the account information in cache\r\n     * @param account\r\n     * @param state\r\n     * @hidden\r\n     */\r\n    UserAgentApplication.prototype.setAccountCache = function (account, state) {\r\n        // Cache acquireTokenAccountKey\r\n        var accountId = account ? this.getAccountId(account) : Constants.no_account;\r\n        var acquireTokenAccountKey = Storage_Storage.generateAcquireTokenAccountKey(accountId, state);\r\n        this.cacheStorage.setItem(acquireTokenAccountKey, JSON.stringify(account));\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * Sets the cacheKey for and stores the authority information in cache\r\n     * @param state\r\n     * @param authority\r\n     * @hidden\r\n     */\r\n    UserAgentApplication.prototype.setAuthorityCache = function (state, authority) {\r\n        // Cache authorityKey\r\n        var authorityKey = Storage_Storage.generateAuthorityKey(state);\r\n        this.cacheStorage.setItem(authorityKey, UrlUtils_UrlUtils.CanonicalizeUri(authority), this.inCookie);\r\n    };\r\n    /**\r\n     * Updates account, authority, and nonce in cache\r\n     * @param serverAuthenticationRequest\r\n     * @param account\r\n     * @hidden\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.updateCacheEntries = function (serverAuthenticationRequest, account, loginStartPage) {\r\n        // Cache account and authority\r\n        if (loginStartPage) {\r\n            // Cache the state, nonce, and login request data\r\n            this.cacheStorage.setItem(Constants.loginRequest, loginStartPage, this.inCookie);\r\n            this.cacheStorage.setItem(Constants.loginError, "");\r\n            this.cacheStorage.setItem(Constants.stateLogin, serverAuthenticationRequest.state, this.inCookie);\r\n            this.cacheStorage.setItem(Constants.msalError, "");\r\n            this.cacheStorage.setItem(Constants.msalErrorDescription, "");\r\n        }\r\n        else {\r\n            this.setAccountCache(account, serverAuthenticationRequest.state);\r\n        }\r\n        // Cache authorityKey\r\n        this.setAuthorityCache(serverAuthenticationRequest.state, serverAuthenticationRequest.authority);\r\n        // Cache nonce\r\n        this.cacheStorage.setItem(Constants.nonceIdToken, serverAuthenticationRequest.nonce, this.inCookie);\r\n    };\r\n    /**\r\n     * Returns the unique identifier for the logged in account\r\n     * @param account\r\n     * @hidden\r\n     * @ignore\r\n     */\r\n    UserAgentApplication.prototype.getAccountId = function (account) {\r\n        //return `${account.accountIdentifier}` + Constants.resourceDelimiter + `${account.homeAccountIdentifier}`;\r\n        var accountId;\r\n        if (!StringUtils.isEmpty(account.homeAccountIdentifier)) {\r\n            accountId = account.homeAccountIdentifier;\r\n        }\r\n        else {\r\n            accountId = Constants.no_account;\r\n        }\r\n        return accountId;\r\n    };\r\n    /**\r\n     * @hidden\r\n     * @ignore\r\n     *\r\n     * Construct \'tokenRequest\' from the available data in adalIdToken\r\n     * @param extraQueryParameters\r\n     * @hidden\r\n     */\r\n    UserAgentApplication.prototype.buildIDTokenRequest = function (request) {\r\n        var tokenRequest = {\r\n            scopes: [this.clientId],\r\n            authority: this.authority,\r\n            account: this.getAccount(),\r\n            extraQueryParameters: request.extraQueryParameters\r\n        };\r\n        return tokenRequest;\r\n    };\r\n    //#endregion\r\n    UserAgentApplication.prototype.getTelemetryManagerFromConfig = function (config, clientId) {\r\n        if (!config) { // if unset\r\n            return null;\r\n        }\r\n        // if set then validate\r\n        var applicationName = config.applicationName, applicationVersion = config.applicationVersion, telemetryEmitter = config.telemetryEmitter;\r\n        if (!applicationName || !applicationVersion || !telemetryEmitter) {\r\n            throw ClientConfigurationError_ClientConfigurationError.createTelemetryConfigError(config);\r\n        }\r\n        // if valid then construct\r\n        var telemetryPlatform = {\r\n            sdk: "msal.js",\r\n            sdkVersion: libraryVersion(),\r\n            applicationName: applicationName,\r\n            applicationVersion: applicationVersion\r\n        };\r\n        var telemetryManagerConfig = {\r\n            platform: telemetryPlatform,\r\n            clientId: clientId\r\n        };\r\n        return new telemetry_TelemetryManager(telemetryManagerConfig, telemetryEmitter);\r\n    };\r\n    __decorate([\r\n        resolveTokenOnlyIfOutOfIframe\r\n    ], UserAgentApplication.prototype, "acquireTokenSilent", null);\r\n    return UserAgentApplication;\r\n}());\r\n\r\n//# sourceMappingURL=UserAgentApplication.js.map\n// CONCATENATED MODULE: ./node_modules/msal/lib-es6/index.js\n/* concated harmony reexport UserAgentApplication */__webpack_require__.d(__webpack_exports__, "UserAgentApplication", function() { return UserAgentApplication_UserAgentApplication; });\n/* concated harmony reexport Logger */__webpack_require__.d(__webpack_exports__, "Logger", function() { return Logger_Logger; });\n/* concated harmony reexport LogLevel */__webpack_require__.d(__webpack_exports__, "LogLevel", function() { return LogLevel; });\n/* concated harmony reexport Account */__webpack_require__.d(__webpack_exports__, "Account", function() { return Account_Account; });\n/* concated harmony reexport Constants */__webpack_require__.d(__webpack_exports__, "Constants", function() { return Constants; });\n/* concated harmony reexport Authority */__webpack_require__.d(__webpack_exports__, "Authority", function() { return Authority_Authority; });\n/* concated harmony reexport AuthError */__webpack_require__.d(__webpack_exports__, "AuthError", function() { return AuthError_AuthError; });\n/* concated harmony reexport ClientAuthError */__webpack_require__.d(__webpack_exports__, "ClientAuthError", function() { return ClientAuthError_ClientAuthError; });\n/* concated harmony reexport ServerError */__webpack_require__.d(__webpack_exports__, "ServerError", function() { return ServerError_ServerError; });\n/* concated harmony reexport ClientConfigurationError */__webpack_require__.d(__webpack_exports__, "ClientConfigurationError", function() { return ClientConfigurationError_ClientConfigurationError; });\n/* concated harmony reexport InteractionRequiredAuthError */__webpack_require__.d(__webpack_exports__, "InteractionRequiredAuthError", function() { return InteractionRequiredAuthError_InteractionRequiredAuthError; });\n\r\n\r\n\r\n\r\n\r\n\r\n// Errors\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')}])}));